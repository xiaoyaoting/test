type PartialDeep<T> = {
  [K in keyof T]?: T[K] extends object ? PartialDeep<T[K]> : T[K]
}

export as namespace ABTNodeClient;

/*~ This declaration specifies that the class constructor function
 *~ is the exported object from the file
 */
export = ABTNodeClient;

/*~ Write your module's methods and properties in this class */
declare class ABTNodeClient {
  config: any;
  schema: void;
  constructor(httpEndpoint: string, userAgent: string = '');

  getQueries(): string[];
  getSubscriptions(): string[];
  getMutations(): string[];

  public setAuthToken(token: string): void;
  public setAuthAccessKey({ accessKeyId, accessKeySecret, type }: { accessKeyId: string; accessKeySecret: string, type: any }): void;

  protected _getAuthHeaders(): Record<string, string> | undefined;

  /**
   * Send raw query to ocap and return results
   *
   * @param {*} query
   * @memberof BaseClient
   * @return Promise
   */
  doRawQuery(query: any, requestOptions?: any): Promise<any>;
  doRawSubscription(query: any): Promise<any>;

  doBatchQuery(queries: object, requestOptions?: any): Promise<object>;

  generateQueryFns(): void;
  generateSubscriptionFns(): void;
  generateMutationFns(): void;

  getBlocklet(params: PartialDeep<ABTNodeClient.GetBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
getBlockletMetaFromUrl(params: PartialDeep<ABTNodeClient.GetBlockletMetaFromUrlParams>): Promise<ABTNodeClient.ResponseBlockletMetaFromUrl>
getBlockletByBundle(params: PartialDeep<ABTNodeClient.GetBlockletByBundleParams>): Promise<ABTNodeClient.ResponseBlockletInfo>
getBlockletDiff(params: PartialDeep<ABTNodeClient.GetBlockletDiffParams>): Promise<ABTNodeClient.ResponseBlockletDiff>
getBlocklets(params: PartialDeep<ABTNodeClient.GetBlockletsParams>): Promise<ABTNodeClient.ResponseGetBlocklets>
getLatestBlockletVersion(params: PartialDeep<ABTNodeClient.GetLatestBlockletVersionParams>): Promise<ABTNodeClient.ResponseLatestBlockletVersion>
getBlockletRuntimeHistory(params: PartialDeep<ABTNodeClient.GetBlockletRuntimeHistoryParams>): Promise<ABTNodeClient.ResponseBlockletRuntimeHistory>
getNodeInfo(): Promise<ABTNodeClient.ResponseGetNodeInfo>
resetNodeStatus(): Promise<ABTNodeClient.ResponseGetNodeInfo>
getNodeEnv(): Promise<ABTNodeClient.ResponseGetNodeEnv>
checkNodeVersion(): Promise<ABTNodeClient.ResponseCheckNodeVersion>
getDelegationState(): Promise<ABTNodeClient.ResponseDelegationState>
getNodeRuntimeHistory(params: PartialDeep<ABTNodeClient.GetNodeRuntimeHistoryParams>): Promise<ABTNodeClient.ResponseNodeRuntimeHistory>
getBlockletMeta(params: PartialDeep<ABTNodeClient.GetBlockletMetaParams>): Promise<ABTNodeClient.ResponseBlockletMeta>
getNotifications(params: PartialDeep<ABTNodeClient.GetNotificationsParams>): Promise<ABTNodeClient.ResponseGetNotifications>
getRoutingSites(params: PartialDeep<ABTNodeClient.GetRoutingSitesParams>): Promise<ABTNodeClient.ResponseGetRoutingSites>
getRoutingSnapshots(params: PartialDeep<ABTNodeClient.GetRoutingSnapshotsParams>): Promise<ABTNodeClient.ResponseGetRoutingSnapshots>
getSnapshotSites(params: PartialDeep<ABTNodeClient.GetSnapshotSitesParams>): Promise<ABTNodeClient.ResponseGetSnapshotSites>
getRoutingProviders(): Promise<ABTNodeClient.ResponseGetRoutingProviders>
getCertificates(): Promise<ABTNodeClient.ResponseGetCertificates>
checkDomains(params: PartialDeep<ABTNodeClient.CheckDomainsParams>): Promise<ABTNodeClient.ResponseCheckDomains>
findCertificateByDomain(params: PartialDeep<ABTNodeClient.FindCertificateByDomainParams>): Promise<ABTNodeClient.ResponseFindCertificateByDomain>
getAccessKeys(): Promise<ABTNodeClient.ResponseAccessKeys>
getWebHooks(): Promise<ABTNodeClient.ResponseWebHooks>
getWebhookSenders(): Promise<ABTNodeClient.ResponseSenderList>
sendTestMessage(params: PartialDeep<ABTNodeClient.SendTestMessageParams>): Promise<ABTNodeClient.ResponseSendMsg>
getSession(params: PartialDeep<ABTNodeClient.GetSessionParams>): Promise<ABTNodeClient.ResponseGetSession>
getRoles(params: PartialDeep<ABTNodeClient.GetRolesParams>): Promise<ABTNodeClient.ResponseRoles>
getPermissions(params: PartialDeep<ABTNodeClient.GetPermissionsParams>): Promise<ABTNodeClient.ResponsePermissions>
getInvitations(params: PartialDeep<ABTNodeClient.GetInvitationsParams>): Promise<ABTNodeClient.ResponseGetInvitations>
getUsers(params: PartialDeep<ABTNodeClient.GetUsersParams>): Promise<ABTNodeClient.ResponseUsers>
getUser(params: PartialDeep<ABTNodeClient.GetUserParams>): Promise<ABTNodeClient.ResponseUser>
getUsersCountPerRole(params: PartialDeep<ABTNodeClient.GetUsersCountPerRoleParams>): Promise<ABTNodeClient.ResponseGetUsersCountPerRole>
getOwner(params: PartialDeep<ABTNodeClient.GetOwnerParams>): Promise<ABTNodeClient.ResponseUser>
getPermissionsByRole(params: PartialDeep<ABTNodeClient.GetPermissionsByRoleParams>): Promise<ABTNodeClient.ResponsePermissions>
getPassportIssuances(params: PartialDeep<ABTNodeClient.GetPassportIssuancesParams>): Promise<ABTNodeClient.ResponseGetPassportIssuances>
getAuditLogs(params: PartialDeep<ABTNodeClient.GetAuditLogsParams>): Promise<ABTNodeClient.ResponseGetAuditLogs>
  installBlocklet(params: PartialDeep<ABTNodeClient.InstallBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
installBlockletFromVc(params: PartialDeep<ABTNodeClient.InstallBlockletFromVcParams>): Promise<ABTNodeClient.ResponseInstallFromVc>
installComponent(params: PartialDeep<ABTNodeClient.InstallComponentParams>): Promise<ABTNodeClient.ResponseBlocklet>
startBlocklet(params: PartialDeep<ABTNodeClient.StartBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
stopBlocklet(params: PartialDeep<ABTNodeClient.StopBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
reloadBlocklet(params: PartialDeep<ABTNodeClient.ReloadBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
restartBlocklet(params: PartialDeep<ABTNodeClient.RestartBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
deleteBlocklet(params: PartialDeep<ABTNodeClient.DeleteBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
deleteComponent(params: PartialDeep<ABTNodeClient.DeleteComponentParams>): Promise<ABTNodeClient.ResponseBlocklet>
cancelDownloadBlocklet(params: PartialDeep<ABTNodeClient.CancelDownloadBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
upgradeBlocklet(params: PartialDeep<ABTNodeClient.UpgradeBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
checkComponentsForUpdates(params: PartialDeep<ABTNodeClient.CheckComponentsForUpdatesParams>): Promise<ABTNodeClient.ResponseCheckComponentsForUpdates>
upgradeComponents(params: PartialDeep<ABTNodeClient.UpgradeComponentsParams>): Promise<ABTNodeClient.ResponseBlocklet>
configBlocklet(params: PartialDeep<ABTNodeClient.ConfigBlockletParams>): Promise<ABTNodeClient.ResponseBlocklet>
configPublicToStore(params: PartialDeep<ABTNodeClient.ConfigPublicToStoreParams>): Promise<ABTNodeClient.ResponseBlocklet>
configNavigations(params: PartialDeep<ABTNodeClient.ConfigNavigationsParams>): Promise<ABTNodeClient.ResponseBlocklet>
updateWhoCanAccess(params: PartialDeep<ABTNodeClient.UpdateWhoCanAccessParams>): Promise<ABTNodeClient.ResponseBlocklet>
updateComponentTitle(params: PartialDeep<ABTNodeClient.UpdateComponentTitleParams>): Promise<ABTNodeClient.ResponseBlocklet>
updateComponentMountPoint(params: PartialDeep<ABTNodeClient.UpdateComponentMountPointParams>): Promise<ABTNodeClient.ResponseBlocklet>
backupToSpaces(params: PartialDeep<ABTNodeClient.BackupToSpacesParams>): Promise<ABTNodeClient.GeneralResponse>
restoreFromSpaces(params: PartialDeep<ABTNodeClient.RestoreFromSpacesParams>): Promise<ABTNodeClient.GeneralResponse>
updateNodeInfo(params: PartialDeep<ABTNodeClient.UpdateNodeInfoParams>): Promise<ABTNodeClient.ResponseGetNodeInfo>
updateNodeRouting(params: PartialDeep<ABTNodeClient.UpdateNodeRoutingParams>): Promise<ABTNodeClient.ResponseGetNodeInfo>
upgradeNodeVersion(): Promise<ABTNodeClient.ResponseUpgradeNodeVersion>
restartServer(): Promise<ABTNodeClient.ResponseRestartServer>
resetNode(params: PartialDeep<ABTNodeClient.ResetNodeParams>): Promise<ABTNodeClient.ResponseResetNode>
updateGateway(params: PartialDeep<ABTNodeClient.UpdateGatewayParams>): Promise<ABTNodeClient.ResponseGateway>
createMemberInvitation(params: PartialDeep<ABTNodeClient.CreateMemberInvitationParams>): Promise<ABTNodeClient.ResponseCreateInvitation>
createTransferInvitation(params: PartialDeep<ABTNodeClient.CreateTransferInvitationParams>): Promise<ABTNodeClient.ResponseCreateTransferNodeInvitation>
deleteInvitation(params: PartialDeep<ABTNodeClient.DeleteInvitationParams>): Promise<ABTNodeClient.GeneralResponse>
createPassportIssuance(params: PartialDeep<ABTNodeClient.CreatePassportIssuanceParams>): Promise<ABTNodeClient.ResponseCreatePassportIssuance>
deletePassportIssuance(params: PartialDeep<ABTNodeClient.DeletePassportIssuanceParams>): Promise<ABTNodeClient.GeneralResponse>
configTrustedPassports(params: PartialDeep<ABTNodeClient.ConfigTrustedPassportsParams>): Promise<ABTNodeClient.GeneralResponse>
configPassportIssuance(params: PartialDeep<ABTNodeClient.ConfigPassportIssuanceParams>): Promise<ABTNodeClient.GeneralResponse>
removeUser(params: PartialDeep<ABTNodeClient.RemoveUserParams>): Promise<ABTNodeClient.ResponseUser>
updateUserApproval(params: PartialDeep<ABTNodeClient.UpdateUserApprovalParams>): Promise<ABTNodeClient.ResponseUser>
updateUserRole(params: PartialDeep<ABTNodeClient.UpdateUserRoleParams>): Promise<ABTNodeClient.ResponseUser>
issuePassportToUser(params: PartialDeep<ABTNodeClient.IssuePassportToUserParams>): Promise<ABTNodeClient.ResponseUser>
revokeUserPassport(params: PartialDeep<ABTNodeClient.RevokeUserPassportParams>): Promise<ABTNodeClient.ResponseUser>
enableUserPassport(params: PartialDeep<ABTNodeClient.EnableUserPassportParams>): Promise<ABTNodeClient.ResponseUser>
createRole(params: PartialDeep<ABTNodeClient.CreateRoleParams>): Promise<ABTNodeClient.ResponseRole>
updateRole(params: PartialDeep<ABTNodeClient.UpdateRoleParams>): Promise<ABTNodeClient.ResponseRole>
deleteRole(params: PartialDeep<ABTNodeClient.DeleteRoleParams>): Promise<ABTNodeClient.GeneralResponse>
createPermission(params: PartialDeep<ABTNodeClient.CreatePermissionParams>): Promise<ABTNodeClient.ResponsePermission>
updatePermission(params: PartialDeep<ABTNodeClient.UpdatePermissionParams>): Promise<ABTNodeClient.ResponsePermission>
deletePermission(params: PartialDeep<ABTNodeClient.DeletePermissionParams>): Promise<ABTNodeClient.GeneralResponse>
grantPermissionForRole(params: PartialDeep<ABTNodeClient.GrantPermissionForRoleParams>): Promise<ABTNodeClient.GeneralResponse>
revokePermissionFromRole(params: PartialDeep<ABTNodeClient.RevokePermissionFromRoleParams>): Promise<ABTNodeClient.GeneralResponse>
updatePermissionsForRole(params: PartialDeep<ABTNodeClient.UpdatePermissionsForRoleParams>): Promise<ABTNodeClient.ResponseRole>
hasPermission(params: PartialDeep<ABTNodeClient.HasPermissionParams>): Promise<ABTNodeClient.BooleanResponse>
addBlockletStore(params: PartialDeep<ABTNodeClient.AddBlockletStoreParams>): Promise<ABTNodeClient.GeneralResponse>
deleteBlockletStore(params: PartialDeep<ABTNodeClient.DeleteBlockletStoreParams>): Promise<ABTNodeClient.GeneralResponse>
readNotifications(params: PartialDeep<ABTNodeClient.ReadNotificationsParams>): Promise<ABTNodeClient.ResponseReadNotifications>
unreadNotifications(params: PartialDeep<ABTNodeClient.UnreadNotificationsParams>): Promise<ABTNodeClient.ResponseReadNotifications>
addRoutingSite(params: PartialDeep<ABTNodeClient.AddRoutingSiteParams>): Promise<ABTNodeClient.ResponseRoutingSite>
addDomainAlias(params: PartialDeep<ABTNodeClient.AddDomainAliasParams>): Promise<ABTNodeClient.ResponseRoutingSite>
deleteDomainAlias(params: PartialDeep<ABTNodeClient.DeleteDomainAliasParams>): Promise<ABTNodeClient.ResponseRoutingSite>
deleteRoutingSite(params: PartialDeep<ABTNodeClient.DeleteRoutingSiteParams>): Promise<ABTNodeClient.GeneralResponse>
updateRoutingSite(params: PartialDeep<ABTNodeClient.UpdateRoutingSiteParams>): Promise<ABTNodeClient.ResponseRoutingSite>
addRoutingRule(params: PartialDeep<ABTNodeClient.AddRoutingRuleParams>): Promise<ABTNodeClient.ResponseRoutingSite>
updateRoutingRule(params: PartialDeep<ABTNodeClient.UpdateRoutingRuleParams>): Promise<ABTNodeClient.ResponseRoutingSite>
deleteRoutingRule(params: PartialDeep<ABTNodeClient.DeleteRoutingRuleParams>): Promise<ABTNodeClient.ResponseRoutingSite>
takeRoutingSnapshot(params: PartialDeep<ABTNodeClient.TakeRoutingSnapshotParams>): Promise<ABTNodeClient.ResponseTakeRoutingSnapshot>
updateCertificate(params: PartialDeep<ABTNodeClient.UpdateCertificateParams>): Promise<ABTNodeClient.ResponseUpdateNginxHttpsCert>
addCertificate(params: PartialDeep<ABTNodeClient.AddCertificateParams>): Promise<ABTNodeClient.ResponseAddNginxHttpsCert>
deleteCertificate(params: PartialDeep<ABTNodeClient.DeleteCertificateParams>): Promise<ABTNodeClient.ResponseDeleteNginxHttpsCert>
issueLetsEncryptCert(params: PartialDeep<ABTNodeClient.IssueLetsEncryptCertParams>): Promise<ABTNodeClient.ResponseAddLetsEncryptCert>
createAccessKey(params: PartialDeep<ABTNodeClient.CreateAccessKeyParams>): Promise<ABTNodeClient.ResponseCreateAccessKey>
updateAccessKey(params: PartialDeep<ABTNodeClient.UpdateAccessKeyParams>): Promise<ABTNodeClient.ResponseUpdateAccessKey>
deleteAccessKey(params: PartialDeep<ABTNodeClient.DeleteAccessKeyParams>): Promise<ABTNodeClient.ResponseDeleteAccessKey>
createWebHook(params: PartialDeep<ABTNodeClient.CreateWebHookParams>): Promise<ABTNodeClient.ResponseCreateWebHook>
deleteWebHook(params: PartialDeep<ABTNodeClient.DeleteWebHookParams>): Promise<ABTNodeClient.ResponseDeleteWebHook>
startSession(params: PartialDeep<ABTNodeClient.StartSessionParams>): Promise<ABTNodeClient.ResponseGetSession>
updateSession(params: PartialDeep<ABTNodeClient.UpdateSessionParams>): Promise<ABTNodeClient.ResponseGetSession>
endSession(params: PartialDeep<ABTNodeClient.EndSessionParams>): Promise<ABTNodeClient.ResponseGetSession>
  
}

declare namespace ABTNodeClient {
  export interface SubscriptionResult<T> {
    then(fn: (result: ABTNodeClient.Subscription<T>) => any): Promise<any>;
    catch(fn: (err: Error) => any): Promise<any>;
  }

  export interface Subscription<T> {
    on(event: 'data', fn: (data: T) => any): this;
    on(event: 'error', fn: (err: Error) => void): this;
  }

  export interface WalletTypeObject {
    pk: number;
    role: number;
    address: number;
    hash: number;
  }

  export interface EncodeTxResult {
    object: object;
    buffer: buffer;
  }


enum BackendServiceType {
  daemon,
  blocklet,
  redirect,
  none,
  general_proxy,
  direct_response,
}

enum BlockletSource {
  registry,
  local,
  upload,
  url,
  custom,
}

enum BlockletStatus {
  added,
  downloading,
  downloaded,
  installing,
  installed,
  starting,
  running,
  stopping,
  stopped,
  error,
  upgrading,
  restarting,
  corrupted,
  waiting,
  deleted,
  unknown,
}

enum HeaderMatchType {
  exact,
  partial,
  regexp,
}

enum SenderType {
  slack,
  api,
}

enum StatusCode {
  ok,
  blocklet_not_found,
  blocklet_not_purchased,
  forbidden,
  internal,
  timeout,
}

interface BlockletControllerInput {
  id: string;
  nftId: string;
  nftOwner: string;
  chainHost: string;
  expireDate: undefined;
}

interface BlockletQueryInput {
  controller: ABTNodeClient.BlockletControllerInput;
}

interface BlockletStoreInput {
  name: string;
  description: string;
  url: string;
  logoUrl: string;
  maintainer: string;
  cdnUrl: string;
  protected: boolean;
  id: string;
}

interface ConfigEntryInput {
  key: string;
  value: string;
  required: boolean;
  description: string;
  validation: string;
  secure: boolean;
  custom: boolean;
  shared: boolean;
}

interface ConfigNavigationInput {
  id: string;
  title: string;
  link: string;
  icon: string;
  section: string;
  component: string;
  parent: string;
  role: string;
  visible: boolean;
  from: string;
}

interface DownloadTokenInput {
  did: string;
  token: string;
}

interface HashFileInput {
  file: string;
  hash: string;
}

interface IssuerInput {
  id: string;
  name: string;
  pk: string;
}

interface NodeInfoInput {
  name: string;
  description: string;
  autoUpgrade: boolean;
  enableWelcomePage: boolean;
  registerUrl: string;
  webWalletUrl: string;
  blockletRegistryList: ABTNodeClient.BlockletStoreInput[];
  diskAlertThreshold: undefined;
}

interface PagingInput {
  total: undefined;
  pageSize: undefined;
  pageCount: undefined;
  page: undefined;
}

interface PassportInput {
  id: string;
  name: string;
  title: string;
  issuer: ABTNodeClient.IssuerInput;
  type: string[];
  issuanceDate: string;
  expirationDate: string;
  status: string;
  role: string;
}

interface PermissionInput {
  name: string;
  description: string;
  isProtected: boolean;
}

interface RequestAddDomainAliasInput {
  id: string;
  domainAlias: string;
  force: boolean;
  teamDid: string;
}

interface RequestAddLetsEncryptCertInput {
  domain: string;
  did: string;
}

interface RequestAddNginxHttpsCertInput {
  name: string;
  privateKey: string;
  certificate: string;
}

interface RequestAddRoutingRuleInput {
  id: string;
  rule: ABTNodeClient.RoutingRuleInput;
  teamDid: string;
}

interface RequestAddRoutingSiteInput {
  domain: string;
  type: string;
  rules: ABTNodeClient.RoutingRuleInput[];
}

interface RequestBackupToSpacesInput {
  did: string;
}

interface RequestBlockletBundleInput {
  did: string;
  name: string;
  serverlessNftId: string;
}

interface RequestBlockletDiffInput {
  did: string;
  hashFiles: ABTNodeClient.HashFileInput[];
  rootDid: string;
}

interface RequestBlockletInput {
  did: string;
  storeUrl: string;
  attachRuntimeInfo: boolean;
}

interface RequestBlockletMetaFromUrlInput {
  url: string;
  checkPrice: boolean;
}

interface RequestBlockletRuntimeHistoryInput {
  did: string;
  hours: undefined;
}

interface RequestChangeBlockletStoreInput {
  teamDid: string;
  url: string;
}

interface RequestCheckDomainsInput {
  domains: string[];
  did: string;
}

interface RequestConfigBlockletInput {
  did: string[];
  configs: ABTNodeClient.ConfigEntryInput[];
}

interface RequestConfigNavigationsInput {
  did: string;
  navigations: ABTNodeClient.ConfigNavigationInput[];
}

interface RequestConfigPassportIssuanceInput {
  teamDid: string;
  enable: boolean;
}

interface RequestConfigPublicToStoreInput {
  did: string;
  publicToStore: boolean;
}

interface RequestConfigTrustedPassportsInput {
  teamDid: string;
  trustedPassports: ABTNodeClient.TrustedPassportInput[];
}

interface RequestCreateAccessKeyInput {
  remark: string;
  passport: string;
}

interface RequestCreateInvitationInput {
  teamDid: string;
  role: string;
  remark: string;
}

interface RequestCreatePassportIssuanceInput {
  teamDid: string;
  ownerDid: string;
  name: string;
}

interface RequestCreatePermissionInput {
  teamDid: string;
  name: string;
  description: string;
}

interface RequestCreateRoleInput {
  teamDid: string;
  name: string;
  title: string;
  description: string;
  childName: string;
  permissions: string[];
}

interface RequestCreateTransferNodeInvitationInput {
  teamDid: string;
  remark: string;
}

interface RequestCreateWebHookInput {
  type: ABTNodeClient.SenderType;
  title: string;
  description: string;
  params: ABTNodeClient.WebHookParamInput[];
}

interface RequestDeleteAccessKeyInput {
  accessKeyId: string;
}

interface RequestDeleteBlockletInput {
  did: string;
  keepData: boolean;
}

interface RequestDeleteComponentInput {
  did: string;
  rootDid: string;
  keepData: boolean;
}

interface RequestDeleteDomainAliasInput {
  id: string;
  domainAlias: string;
  teamDid: string;
}

interface RequestDeleteNginxHttpsCertInput {
  id: string;
}

interface RequestDeletePermissionInput {
  teamDid: string;
  name: string;
}

interface RequestDeleteRoleInput {
  teamDid: string;
  name: string;
}

interface RequestDeleteRoutingRuleInput {
  id: string;
  ruleId: string;
  teamDid: string;
}

interface RequestDeleteRoutingSiteInput {
  id: string;
}

interface RequestDeleteTeamSessionInput {
  teamDid: string;
  sessionId: string;
}

interface RequestDeleteWebHookInput {
  id: string;
}

interface RequestEndSessionInput {
  id: string;
}

interface RequestFindCertificateByDomainInput {
  domain: string;
  did: string;
}

interface RequestGatewayInput {
  requestLimit: ABTNodeClient.RequestLimitInput;
}

interface RequestGetAuditLogsInput {
  paging: ABTNodeClient.PagingInput;
  scope: string;
  category: string;
}

interface RequestGetBlockletsInput {
  useCache: boolean;
  query: ABTNodeClient.BlockletQueryInput;
}

interface RequestGetNotificationsInput {
  receiver: string;
  sender: string;
  read: boolean;
  paging: ABTNodeClient.PagingInput;
}

interface RequestGetPassportIssuancesInput {
  teamDid: string;
  ownerDid: string;
}

interface RequestGetRoutingSitesInput {
  snapshotHash: string;
}

interface RequestGetRoutingSnapshotsInput {
  limit: undefined;
}

interface RequestGetSessionInput {
  id: string;
}

interface RequestGetSnapshotSitesInput {
  hash: string;
}

interface RequestGrantPermissionForRoleInput {
  teamDid: string;
  roleName: string;
  grantName: string;
}

interface RequestHasPermissionInput {
  teamDid: string;
  role: string;
  permission: string;
}

interface RequestInstallComponentInput {
  rootDid: string;
  mountPoint: string;
  url: string;
  file: undefined;
  did: string;
  diffVersion: string;
  deleteSet: string[];
  name: string;
  title: string;
  configs: ABTNodeClient.ConfigEntryInput[];
  downloadTokenList: ABTNodeClient.DownloadTokenInput[];
  skipNavigation: boolean;
}

interface RequestInstallFromVcInput {
  challenge: string;
  vcPresentation: undefined;
}

interface RequestIssuePassportToUserInput {
  teamDid: string;
  userDid: string;
  role: string;
}

interface RequestLatestBlockletVersionInput {
  did: string;
  version: string;
}

interface RequestLimitInput {
  enabled: boolean;
  rate: undefined;
  ipHeader: string;
}

interface RequestNodeRoutingInput {
  provider: string;
  snapshotHash: string;
  forceRepopulate: boolean;
}

interface RequestNodeRuntimeHistoryInput {
  hours: undefined;
}

interface RequestReadNotificationsInput {
  id: string;
}

interface RequestResetNodeInput {
  owner: boolean;
  blocklets: boolean;
  webhooks: boolean;
  certificates: boolean;
  accessKeys: boolean;
  blockletExtras: boolean;
  routingRules: boolean;
  users: boolean;
  invitations: boolean;
}

interface RequestRestoreFromSpacesInput {
  endpoint: string;
  blockletSecretKey: string;
}

interface RequestRevokePermissionFromRoleInput {
  teamDid: string;
  roleName: string;
  grantName: string;
}

interface RequestRevokeUserPassportInput {
  teamDid: string;
  userDid: string;
  passportId: string;
}

interface RequestSendMsgInput {
  webhookId: string;
  message: string;
}

interface RequestStartSessionInput {
  data: string;
}

interface RequestTakeRoutingSnapshotInput {
  dryRun: boolean;
  message: string;
}

interface RequestTeamPermissionInput {
  teamDid: string;
  permission: ABTNodeClient.PermissionInput;
}

interface RequestTeamRoleInput {
  teamDid: string;
  role: ABTNodeClient.RoleInput;
}

interface RequestTeamUserInput {
  teamDid: string;
  user: ABTNodeClient.UserInfoInput;
}

interface RequestUpdateAccessKeyInput {
  accessKeyId: string;
  remark: string;
  passport: string;
}

interface RequestUpdateComponentMountPointInput {
  did: string;
  rootDid: string;
  mountPoint: string;
}

interface RequestUpdateComponentTitleInput {
  did: string;
  rootDid: string;
  title: string;
}

interface RequestUpdateComponentsInput {
  updateId: string;
  rootDid: string;
  selectedComponents: string[];
}

interface RequestUpdateNginxHttpsCertInput {
  id: string;
  name: string;
}

interface RequestUpdatePermissionsForRoleInput {
  teamDid: string;
  roleName: string;
  grantNames: string[];
}

interface RequestUpdateRoutingRuleInput {
  id: string;
  rule: ABTNodeClient.RoutingRuleInput;
  teamDid: string;
}

interface RequestUpdateRoutingSiteInput {
  id: string;
  corsAllowedOrigins: string[];
  domain: string;
  teamDid: string;
}

interface RequestUpdateSessionInput {
  id: string;
  data: string;
}

interface RequestUpdateWhoCanAccessInput {
  did: string[];
  whoCanAccess: string;
}

interface RequestUpgradeBlockletInput {
  did: string;
  storeUrl: string;
}

interface RequestUsersInput {
  teamDid: string;
  query: ABTNodeClient.UserQueryInput;
  sort: ABTNodeClient.UserSortInput;
  paging: ABTNodeClient.PagingInput;
  dids: string[];
}

interface RequestVersionedBlockletInput {
  type: string;
  did: string;
  storeUrl: string;
  url: string;
  file: undefined;
  diffVersion: string;
  deleteSet: string[];
  title: string;
  description: string;
  startImmediately: boolean;
  downloadTokenList: ABTNodeClient.DownloadTokenInput[];
}

interface RequsetDeleteInvitationInput {
  teamDid: string;
  inviteId: string;
}

interface RoleInput {
  name: string;
  description: string;
  grants: string[];
  title: string;
  isProtected: boolean;
}

interface RoutingRuleFromInput {
  pathPrefix: string;
  header: ABTNodeClient.RoutingRuleHeaderInput[];
}

interface RoutingRuleHeaderInput {
  key: string;
  value: string;
  type: ABTNodeClient.HeaderMatchType;
}

interface RoutingRuleInput {
  id: string;
  from: ABTNodeClient.RoutingRuleFromInput;
  to: ABTNodeClient.RoutingRuleToInput;
  isProtected: boolean;
}

interface RoutingRuleToInput {
  port: undefined;
  type: ABTNodeClient.BackendServiceType;
  did: string;
  url: string;
  redirectCode: undefined;
  interfaceName: string;
  componentId: string;
}

interface TeamInput {
  teamDid: string;
}

interface TrustedPassportInput {
  issuerDid: string;
  remark: string;
  mappings: ABTNodeClient.TrustedPassportMappingInput[];
}

interface TrustedPassportMappingFromInput {
  passport: string;
}

interface TrustedPassportMappingInput {
  from: ABTNodeClient.TrustedPassportMappingFromInput;
  to: ABTNodeClient.TrustedPassportMappingToInput;
}

interface TrustedPassportMappingToInput {
  role: string;
}

interface UserInfoInput {
  did: string;
  pk: string;
  role: string;
  avatar: string;
  fullName: string;
  email: string;
  approved: boolean;
  createdAt: string;
  updatedAt: string;
  locale: string;
  passports: ABTNodeClient.PassportInput[];
  firstLoginAt: string;
  lastLoginAt: string;
  remark: string;
}

interface UserQueryInput {
  role: string;
  approved: boolean;
  search: string;
}

interface UserSortInput {
  updatedAt: undefined;
  createdAt: undefined;
  lastLoginAt: undefined;
}

interface WebHookParamInput {
  name: string;
  description: string;
  required: boolean;
  defaultValue: string;
  value: string;
  type: string;
}

interface AccessKey {
  accessKeyId: string;
  remark: string;
  passport: string;
  createdAt: string;
  lastUsedAt: string;
  createdBy: string;
  updatedBy: string;
}

interface AuditLog {
  id: string;
  scope: string;
  category: string;
  action: string;
  content: string;
  actor: ABTNodeClient.AuditLogActor;
  env: ABTNodeClient.AuditLogEnv;
  createdAt: string;
  ip: string;
}

interface AuditLogActor {
  did: string;
  role: string;
  fullName: string;
}

interface AuditLogEnv {
  browser: ABTNodeClient.AuditLogEnvItem;
  os: ABTNodeClient.AuditLogEnvItem;
}

interface AuditLogEnvItem {
  name: string;
  version: string;
}

interface BlockletCapabilities {
  clusterMode: boolean;
  component: boolean;
  navigation: boolean;
}

interface BlockletController {
  id: string;
  nftId: string;
  nftOwner: string;
  chainHost: string;
  expireDate: undefined;
}

interface BlockletDiff {
  hasBlocklet: boolean;
  version: string;
  addSet: string[];
  changeSet: string[];
  deleteSet: string[];
}

interface BlockletDist {
  tarball: string;
  integrity: string;
}

interface BlockletEngine {
  name: string;
  displayName: string;
  description: string;
  version: string;
  available: boolean;
  visible: boolean;
}

interface BlockletHistoryItem {
  date: undefined;
  cpu: undefined;
  mem: undefined;
}

interface BlockletMeta {
  did: string;
  name: string;
  version: string;
  description: string;
  interfaces: ABTNodeClient.BlockletMetaInterface[];
  author: ABTNodeClient.BlockletMetaPerson;
  main: string;
  stats: ABTNodeClient.BlockletStats;
  homepage: string;
  price: undefined;
  path: string;
  community: string;
  documentation: string;
  support: string;
  screenshots: string[];
  keywords: string[];
  group: string;
  logo: string;
  title: string;
  dist: ABTNodeClient.BlockletDist;
  maintainers: ABTNodeClient.BlockletMetaPerson[];
  contributors: ABTNodeClient.BlockletMetaPerson[];
  repository: ABTNodeClient.BlockletRepository;
  payment: ABTNodeClient.BlockletPayment;
  nftFactory: string;
  lastPublishedAt: string;
  capabilities: ABTNodeClient.BlockletCapabilities;
  components: ABTNodeClient.ChildConfig[];
  environments: ABTNodeClient.Environment[];
  requirements: ABTNodeClient.Requirement;
  bundleDid: string;
  bundleName: string;
  navigation: undefined[];
}

interface BlockletMetaInterface {
  type: string;
  name: string;
  path: string;
  prefix: string;
  protocol: string;
  port: undefined;
  services: ABTNodeClient.BlockletMetaService[];
}

interface BlockletMetaPerson {
  name: string;
  email: string;
  url: string;
}

interface BlockletMetaService {
  name: string;
  config: undefined;
}

interface BlockletPayment {
  price: ABTNodeClient.BlockletPaymentPrice[];
  share: ABTNodeClient.BlockletPaymentShare[];
}

interface BlockletPaymentPrice {
  address: string;
  value: string;
  symbol: string;
}

interface BlockletPaymentShare {
  address: string;
  name: string;
  value: string;
}

interface BlockletPreUpdateInfo {
  updateId: string;
  updateList: ABTNodeClient.UpdateList[];
}

interface BlockletRepository {
  type: string;
  url: string;
}

interface BlockletSettings {
  initialized: boolean;
  enablePassportIssuance: boolean;
  trustedPassports: ABTNodeClient.TrustedPassport[];
  whoCanAccess: string;
  owner: ABTNodeClient.WalletInfo;
  children: ABTNodeClient.DeletedBlockletState[];
  publicToStore: boolean;
  storeList: ABTNodeClient.BlockletStore[];
  navigations: ABTNodeClient.ConfigNavigation[];
}

interface BlockletState {
  meta: ABTNodeClient.BlockletMeta;
  status: ABTNodeClient.BlockletStatus;
  createdAt: string;
  installedAt: string;
  startedAt: string;
  pausedAt: string;
  stoppedAt: string;
  environments: ABTNodeClient.ConfigEntry[];
  configs: ABTNodeClient.ConfigEntry[];
  diskInfo: ABTNodeClient.DiskInfo;
  runtimeInfo: ABTNodeClient.RuntimeInfo;
  appRuntimeInfo: ABTNodeClient.RuntimeInfo;
  source: ABTNodeClient.BlockletSource;
  deployedFrom: string;
  bundleSource: undefined;
  port: undefined;
  engine: ABTNodeClient.BlockletEngine;
  mode: string;
  ports: undefined;
  children: ABTNodeClient.ComponentState[];
  trustedPassports: ABTNodeClient.TrustedPassport[];
  enablePassportIssuance: boolean;
  dynamic: boolean;
  mountPoint: string;
  settings: ABTNodeClient.BlockletSettings;
  appDid: string;
  site: ABTNodeClient.RoutingSite;
  controller: ABTNodeClient.BlockletController;
}

interface BlockletStats {
  downloads: undefined;
  star: undefined;
  purchases: undefined;
}

interface BlockletStore {
  name: string;
  description: string;
  url: string;
  logoUrl: string;
  maintainer: string;
  cdnUrl: string;
  protected: boolean;
  id: string;
}

interface BooleanResponse {
  code: ABTNodeClient.StatusCode;
  result: boolean;
}

interface Certificate {
  name: string;
  domain: string;
  id: string;
  meta: ABTNodeClient.CertificateMeta;
  matchedSites: ABTNodeClient.MatchedSites[];
  createdAt: string;
  updatedAt: string;
  isProtected: boolean;
  source: string;
  status: string;
}

interface CertificateIssuer {
  countryName: string;
  organizationName: string;
  commonName: string;
}

interface CertificateMeta {
  issuer: ABTNodeClient.CertificateIssuer;
  sans: string[];
  validFrom: undefined;
  validTo: undefined;
  fingerprintAlg: string;
  fingerprint: string;
  validityPeriod: undefined;
}

interface ChildConfig {
  name: string;
  mountPoint: string;
}

interface ComponentState {
  meta: ABTNodeClient.BlockletMeta;
  status: ABTNodeClient.BlockletStatus;
  createdAt: string;
  installedAt: string;
  startedAt: string;
  pausedAt: string;
  stoppedAt: string;
  environments: ABTNodeClient.ConfigEntry[];
  configs: ABTNodeClient.ConfigEntry[];
  diskInfo: ABTNodeClient.DiskInfo;
  runtimeInfo: ABTNodeClient.RuntimeInfo;
  source: ABTNodeClient.BlockletSource;
  deployedFrom: string;
  bundleSource: undefined;
  port: undefined;
  engine: ABTNodeClient.BlockletEngine;
  mode: string;
  ports: undefined;
  children: ABTNodeClient.ComponentState[];
  dynamic: boolean;
  mountPoint: string;
}

interface ConfigEntry {
  key: string;
  value: string;
  required: boolean;
  description: string;
  validation: string;
  secure: boolean;
  custom: boolean;
  shared: boolean;
}

interface ConfigNavigation {
  id: string;
  title: string;
  link: string;
  icon: string;
  section: string;
  component: string;
  parent: string;
  role: string;
  visible: boolean;
  from: string;
}

interface CreateAccessKey {
  accessKeyId: string;
  accessKeySecret: string;
  remark: string;
  passport: string;
  createdAt: string;
  lastUsedAt: string;
}

interface DelegationState {
  delegated: boolean;
}

interface DeletedBlockletMeta {
  did: string;
  name: string;
  version: string;
  description: string;
  title: string;
  bundleDid: string;
  bundleName: string;
}

interface DeletedBlockletState {
  meta: ABTNodeClient.DeletedBlockletMeta;
  status: ABTNodeClient.BlockletStatus;
  deployedFrom: string;
  mountPoint: string;
  deletedAt: string;
}

interface DiskInfo {
  app: undefined;
  data: undefined;
  log: undefined;
  cache: undefined;
  blocklets: undefined;
}

interface Environment {
  name: string;
  description: string;
  default: string;
  required: boolean;
  secure: boolean;
  validation: string;
  shared: boolean;
}

interface Fuel {
  endpoint: string;
  address: string;
  value: string;
  reason: string;
}

interface Gateway {
  requestLimit: ABTNodeClient.RequestLimit;
}

interface GeneralResponse {
  code: ABTNodeClient.StatusCode;
}

interface IPInfo {
  internalV4: string;
  externalV4: string;
  internalV6: string;
  externalV6: string;
}

interface InviteInfo {
  inviteId: string;
  role: string;
  remark: string;
  expireDate: string;
  inviter: ABTNodeClient.UserInfo;
  teamDid: string;
  interfaceName: string;
}

interface Issuer {
  id: string;
  name: string;
  pk: string;
}

interface KeyValue {
  key: string;
  value: undefined;
}

interface LatestBlockletVersion {
  did: string;
  version: string;
  registryUrl: string;
}

interface LauncherInfo {
  did: string;
  type: string;
  provider: string;
  url: string;
  tag: string;
  chainHost: string;
}

interface MatchedSites {
  id: string;
  domain: string;
}

interface Mutation {
  installBlocklet: ABTNodeClient.ResponseBlocklet;
  installBlockletFromVc: ABTNodeClient.ResponseInstallFromVc;
  installComponent: ABTNodeClient.ResponseBlocklet;
  startBlocklet: ABTNodeClient.ResponseBlocklet;
  stopBlocklet: ABTNodeClient.ResponseBlocklet;
  reloadBlocklet: ABTNodeClient.ResponseBlocklet;
  restartBlocklet: ABTNodeClient.ResponseBlocklet;
  deleteBlocklet: ABTNodeClient.ResponseBlocklet;
  deleteComponent: ABTNodeClient.ResponseBlocklet;
  cancelDownloadBlocklet: ABTNodeClient.ResponseBlocklet;
  upgradeBlocklet: ABTNodeClient.ResponseBlocklet;
  checkComponentsForUpdates: ABTNodeClient.ResponseCheckComponentsForUpdates;
  upgradeComponents: ABTNodeClient.ResponseBlocklet;
  configBlocklet: ABTNodeClient.ResponseBlocklet;
  configPublicToStore: ABTNodeClient.ResponseBlocklet;
  configNavigations: ABTNodeClient.ResponseBlocklet;
  updateWhoCanAccess: ABTNodeClient.ResponseBlocklet;
  updateComponentTitle: ABTNodeClient.ResponseBlocklet;
  updateComponentMountPoint: ABTNodeClient.ResponseBlocklet;
  backupToSpaces: ABTNodeClient.GeneralResponse;
  restoreFromSpaces: ABTNodeClient.GeneralResponse;
  updateNodeInfo: ABTNodeClient.ResponseGetNodeInfo;
  updateNodeRouting: ABTNodeClient.ResponseGetNodeInfo;
  upgradeNodeVersion: ABTNodeClient.ResponseUpgradeNodeVersion;
  restartServer: ABTNodeClient.ResponseRestartServer;
  resetNode: ABTNodeClient.ResponseResetNode;
  updateGateway: ABTNodeClient.ResponseGateway;
  createMemberInvitation: ABTNodeClient.ResponseCreateInvitation;
  createTransferInvitation: ABTNodeClient.ResponseCreateTransferNodeInvitation;
  deleteInvitation: ABTNodeClient.GeneralResponse;
  createPassportIssuance: ABTNodeClient.ResponseCreatePassportIssuance;
  deletePassportIssuance: ABTNodeClient.GeneralResponse;
  configTrustedPassports: ABTNodeClient.GeneralResponse;
  configPassportIssuance: ABTNodeClient.GeneralResponse;
  removeUser: ABTNodeClient.ResponseUser;
  updateUserApproval: ABTNodeClient.ResponseUser;
  updateUserRole: ABTNodeClient.ResponseUser;
  issuePassportToUser: ABTNodeClient.ResponseUser;
  revokeUserPassport: ABTNodeClient.ResponseUser;
  enableUserPassport: ABTNodeClient.ResponseUser;
  createRole: ABTNodeClient.ResponseRole;
  updateRole: ABTNodeClient.ResponseRole;
  deleteRole: ABTNodeClient.GeneralResponse;
  createPermission: ABTNodeClient.ResponsePermission;
  updatePermission: ABTNodeClient.ResponsePermission;
  deletePermission: ABTNodeClient.GeneralResponse;
  grantPermissionForRole: ABTNodeClient.GeneralResponse;
  revokePermissionFromRole: ABTNodeClient.GeneralResponse;
  updatePermissionsForRole: ABTNodeClient.ResponseRole;
  hasPermission: ABTNodeClient.BooleanResponse;
  addBlockletStore: ABTNodeClient.GeneralResponse;
  deleteBlockletStore: ABTNodeClient.GeneralResponse;
  readNotifications: ABTNodeClient.ResponseReadNotifications;
  unreadNotifications: ABTNodeClient.ResponseReadNotifications;
  addRoutingSite: ABTNodeClient.ResponseRoutingSite;
  addDomainAlias: ABTNodeClient.ResponseRoutingSite;
  deleteDomainAlias: ABTNodeClient.ResponseRoutingSite;
  deleteRoutingSite: ABTNodeClient.GeneralResponse;
  updateRoutingSite: ABTNodeClient.ResponseRoutingSite;
  addRoutingRule: ABTNodeClient.ResponseRoutingSite;
  updateRoutingRule: ABTNodeClient.ResponseRoutingSite;
  deleteRoutingRule: ABTNodeClient.ResponseRoutingSite;
  takeRoutingSnapshot: ABTNodeClient.ResponseTakeRoutingSnapshot;
  updateCertificate: ABTNodeClient.ResponseUpdateNginxHttpsCert;
  addCertificate: ABTNodeClient.ResponseAddNginxHttpsCert;
  deleteCertificate: ABTNodeClient.ResponseDeleteNginxHttpsCert;
  issueLetsEncryptCert: ABTNodeClient.ResponseAddLetsEncryptCert;
  createAccessKey: ABTNodeClient.ResponseCreateAccessKey;
  updateAccessKey: ABTNodeClient.ResponseUpdateAccessKey;
  deleteAccessKey: ABTNodeClient.ResponseDeleteAccessKey;
  createWebHook: ABTNodeClient.ResponseCreateWebHook;
  deleteWebHook: ABTNodeClient.ResponseDeleteWebHook;
  startSession: ABTNodeClient.ResponseGetSession;
  updateSession: ABTNodeClient.ResponseGetSession;
  endSession: ABTNodeClient.ResponseGetSession;
}

interface NodeEnvInfo {
  ip: ABTNodeClient.IPInfo;
  os: string;
  location: string;
  docker: boolean;
  image: boolean;
  blockletEngines: ABTNodeClient.BlockletEngine[];
  gitpod: boolean;
  disk: ABTNodeClient.DiskInfo;
}

interface NodeHistoryItem {
  date: undefined;
  cpu: undefined;
  mem: undefined;
  daemonMem: undefined;
  serviceMem: undefined;
  dbMem: undefined;
}

interface NodeRouting {
  provider: string;
  snapshotHash: string;
  adminPath: string;
  requestLimit: ABTNodeClient.RequestLimit;
}

interface NodeState {
  did: string;
  pk: string;
  version: string;
  name: string;
  description: string;
  port: string;
  initialized: boolean;
  nodeOwner: ABTNodeClient.WalletInfo;
  createdAt: string;
  startedAt: string;
  initializedAt: string;
  mode: string;
  routing: ABTNodeClient.NodeRouting;
  environments: ABTNodeClient.ConfigEntry[];
  uptime: undefined;
  autoUpgrade: boolean;
  nextVersion: string;
  upgradeSessionId: string;
  registerUrl: string;
  enableWelcomePage: boolean;
  webWalletUrl: string;
  blockletRegistryList: ABTNodeClient.BlockletStore[];
  ownerNft: ABTNodeClient.OwnerNft;
  diskAlertThreshold: undefined;
  trustedPassports: ABTNodeClient.TrustedPassport[];
  launcher: ABTNodeClient.LauncherInfo;
  enablePassportIssuance: boolean;
  didRegistry: string;
  didDomain: string;
  status: undefined;
}

interface Notification {
  sender: string;
  receiver: string;
  title: string;
  description: string;
  action: string;
  entityType: string;
  entityId: string;
  read: boolean;
  createdAt: string;
  updatedAt: string;
  id: string;
  severity: string;
}

interface OwnerNft {
  did: string;
  holder: string;
  issuer: string;
}

interface Paging {
  total: undefined;
  pageSize: undefined;
  pageCount: undefined;
  page: undefined;
}

interface Passport {
  id: string;
  name: string;
  title: string;
  issuer: ABTNodeClient.Issuer;
  type: string[];
  issuanceDate: string;
  expirationDate: string;
  status: string;
  role: string;
}

interface PassportIssuanceInfo {
  id: string;
  name: string;
  title: string;
  expireDate: string;
  teamDid: string;
  ownerDid: string;
}

interface Permission {
  name: string;
  description: string;
  isProtected: boolean;
}

interface Query {
  getBlocklet: ABTNodeClient.ResponseBlocklet;
  getBlockletMetaFromUrl: ABTNodeClient.ResponseBlockletMetaFromUrl;
  getBlockletByBundle: ABTNodeClient.ResponseBlockletInfo;
  getBlockletDiff: ABTNodeClient.ResponseBlockletDiff;
  getBlocklets: ABTNodeClient.ResponseGetBlocklets;
  getLatestBlockletVersion: ABTNodeClient.ResponseLatestBlockletVersion;
  getBlockletRuntimeHistory: ABTNodeClient.ResponseBlockletRuntimeHistory;
  getNodeInfo: ABTNodeClient.ResponseGetNodeInfo;
  resetNodeStatus: ABTNodeClient.ResponseGetNodeInfo;
  getNodeEnv: ABTNodeClient.ResponseGetNodeEnv;
  checkNodeVersion: ABTNodeClient.ResponseCheckNodeVersion;
  getDelegationState: ABTNodeClient.ResponseDelegationState;
  getNodeRuntimeHistory: ABTNodeClient.ResponseNodeRuntimeHistory;
  getBlockletMeta: ABTNodeClient.ResponseBlockletMeta;
  getNotifications: ABTNodeClient.ResponseGetNotifications;
  getRoutingSites: ABTNodeClient.ResponseGetRoutingSites;
  getRoutingSnapshots: ABTNodeClient.ResponseGetRoutingSnapshots;
  getSnapshotSites: ABTNodeClient.ResponseGetSnapshotSites;
  getRoutingProviders: ABTNodeClient.ResponseGetRoutingProviders;
  getCertificates: ABTNodeClient.ResponseGetCertificates;
  checkDomains: ABTNodeClient.ResponseCheckDomains;
  findCertificateByDomain: ABTNodeClient.ResponseFindCertificateByDomain;
  getAccessKeys: ABTNodeClient.ResponseAccessKeys;
  getWebHooks: ABTNodeClient.ResponseWebHooks;
  getWebhookSenders: ABTNodeClient.ResponseSenderList;
  sendTestMessage: ABTNodeClient.ResponseSendMsg;
  getSession: ABTNodeClient.ResponseGetSession;
  getRoles: ABTNodeClient.ResponseRoles;
  getPermissions: ABTNodeClient.ResponsePermissions;
  getInvitations: ABTNodeClient.ResponseGetInvitations;
  getUsers: ABTNodeClient.ResponseUsers;
  getUser: ABTNodeClient.ResponseUser;
  getUsersCountPerRole: ABTNodeClient.ResponseGetUsersCountPerRole;
  getOwner: ABTNodeClient.ResponseUser;
  getPermissionsByRole: ABTNodeClient.ResponsePermissions;
  getPassportIssuances: ABTNodeClient.ResponseGetPassportIssuances;
  getAuditLogs: ABTNodeClient.ResponseGetAuditLogs;
}

interface RequestLimit {
  enabled: boolean;
  rate: undefined;
  ipHeader: string;
}

interface Requirement {
  server: string;
  os: undefined;
  cpu: undefined;
  fuels: ABTNodeClient.Fuel[];
}

interface ResponseAccessKeys {
  code: ABTNodeClient.StatusCode;
  list: ABTNodeClient.AccessKey[];
}

interface ResponseAddLetsEncryptCert {
  code: ABTNodeClient.StatusCode;
}

interface ResponseAddNginxHttpsCert {
  code: ABTNodeClient.StatusCode;
}

interface ResponseBlocklet {
  code: ABTNodeClient.StatusCode;
  blocklet: ABTNodeClient.BlockletState;
}

interface ResponseBlockletDiff {
  code: ABTNodeClient.StatusCode;
  blockletDiff: ABTNodeClient.BlockletDiff;
}

interface ResponseBlockletInfo {
  code: ABTNodeClient.StatusCode;
  blockletDid: string;
  isExternal: boolean;
  isInstalled: boolean;
  isRunning: boolean;
}

interface ResponseBlockletMeta {
  code: ABTNodeClient.StatusCode;
  meta: undefined;
}

interface ResponseBlockletMetaFromUrl {
  code: ABTNodeClient.StatusCode;
  meta: ABTNodeClient.BlockletMeta;
  isFree: boolean;
  inStore: boolean;
  registryUrl: string;
}

interface ResponseBlockletRuntimeHistory {
  code: ABTNodeClient.StatusCode;
  history: ABTNodeClient.BlockletHistoryItem[];
}

interface ResponseCheckComponentsForUpdates {
  code: ABTNodeClient.StatusCode;
  preUpdateInfo: ABTNodeClient.BlockletPreUpdateInfo;
}

interface ResponseCheckDomains {
  code: ABTNodeClient.StatusCode;
}

interface ResponseCheckNodeVersion {
  code: ABTNodeClient.StatusCode;
  version: string;
}

interface ResponseCreateAccessKey {
  code: ABTNodeClient.StatusCode;
  data: ABTNodeClient.CreateAccessKey;
}

interface ResponseCreateInvitation {
  code: ABTNodeClient.StatusCode;
  inviteInfo: ABTNodeClient.InviteInfo;
}

interface ResponseCreatePassportIssuance {
  code: ABTNodeClient.StatusCode;
  info: ABTNodeClient.PassportIssuanceInfo;
}

interface ResponseCreateTransferNodeInvitation {
  code: ABTNodeClient.StatusCode;
  inviteInfo: ABTNodeClient.InviteInfo;
}

interface ResponseCreateWebHook {
  code: ABTNodeClient.StatusCode;
  webhook: ABTNodeClient.WebHookSender;
}

interface ResponseDelegationState {
  code: ABTNodeClient.StatusCode;
  state: ABTNodeClient.DelegationState;
}

interface ResponseDeleteAccessKey {
  code: ABTNodeClient.StatusCode;
}

interface ResponseDeleteNginxHttpsCert {
  code: ABTNodeClient.StatusCode;
}

interface ResponseDeleteWebHook {
  code: ABTNodeClient.StatusCode;
}

interface ResponseFindCertificateByDomain {
  code: ABTNodeClient.StatusCode;
  cert: ABTNodeClient.Certificate;
}

interface ResponseGateway {
  code: ABTNodeClient.StatusCode;
  gateway: ABTNodeClient.Gateway;
}

interface ResponseGetAuditLogs {
  code: ABTNodeClient.StatusCode;
  list: ABTNodeClient.AuditLog[];
  paging: ABTNodeClient.Paging;
}

interface ResponseGetBlocklets {
  code: ABTNodeClient.StatusCode;
  blocklets: ABTNodeClient.BlockletState[];
}

interface ResponseGetCertificates {
  code: ABTNodeClient.StatusCode;
  certificates: ABTNodeClient.Certificate[];
}

interface ResponseGetInvitations {
  code: ABTNodeClient.StatusCode;
  invitations: ABTNodeClient.InviteInfo[];
}

interface ResponseGetNodeEnv {
  code: ABTNodeClient.StatusCode;
  info: ABTNodeClient.NodeEnvInfo;
}

interface ResponseGetNodeInfo {
  code: ABTNodeClient.StatusCode;
  info: ABTNodeClient.NodeState;
}

interface ResponseGetNotifications {
  code: ABTNodeClient.StatusCode;
  list: ABTNodeClient.Notification[];
  paging: ABTNodeClient.Paging;
}

interface ResponseGetPassportIssuances {
  code: ABTNodeClient.StatusCode;
  list: ABTNodeClient.PassportIssuanceInfo[];
}

interface ResponseGetRoutingProviders {
  code: ABTNodeClient.StatusCode;
  providers: ABTNodeClient.RoutingProvider[];
}

interface ResponseGetRoutingSites {
  code: ABTNodeClient.StatusCode;
  sites: ABTNodeClient.RoutingSite[];
}

interface ResponseGetRoutingSnapshots {
  code: ABTNodeClient.StatusCode;
  snapshots: ABTNodeClient.RoutingSnapshot[];
}

interface ResponseGetSession {
  code: ABTNodeClient.StatusCode;
  session: undefined;
}

interface ResponseGetSnapshotSites {
  code: ABTNodeClient.StatusCode;
  sites: ABTNodeClient.RoutingSite[];
}

interface ResponseGetUsersCountPerRole {
  code: ABTNodeClient.StatusCode;
  counts: ABTNodeClient.KeyValue[];
}

interface ResponseInstallFromVc {
  code: ABTNodeClient.StatusCode;
  blocklet: ABTNodeClient.BlockletState;
}

interface ResponseLatestBlockletVersion {
  code: ABTNodeClient.StatusCode;
  data: ABTNodeClient.LatestBlockletVersion;
}

interface ResponseNodeRuntimeHistory {
  code: ABTNodeClient.StatusCode;
  history: ABTNodeClient.NodeHistoryItem[];
}

interface ResponsePermission {
  code: ABTNodeClient.StatusCode;
  permission: ABTNodeClient.Permission;
}

interface ResponsePermissions {
  code: ABTNodeClient.StatusCode;
  permissions: ABTNodeClient.Permission[];
}

interface ResponseReadNotifications {
  code: ABTNodeClient.StatusCode;
  numAffected: undefined;
}

interface ResponseResetNode {
  code: ABTNodeClient.StatusCode;
}

interface ResponseRestartServer {
  code: ABTNodeClient.StatusCode;
  sessionId: string;
}

interface ResponseRole {
  code: ABTNodeClient.StatusCode;
  role: ABTNodeClient.Role;
}

interface ResponseRoles {
  code: ABTNodeClient.StatusCode;
  roles: ABTNodeClient.Role[];
}

interface ResponseRoutingSite {
  code: ABTNodeClient.StatusCode;
  site: ABTNodeClient.RoutingSite;
}

interface ResponseSendMsg {
  code: ABTNodeClient.StatusCode;
}

interface ResponseSenderList {
  code: ABTNodeClient.StatusCode;
  senders: ABTNodeClient.WebHookSender[];
}

interface ResponseTakeRoutingSnapshot {
  code: ABTNodeClient.StatusCode;
  hash: string;
}

interface ResponseUpdateAccessKey {
  code: ABTNodeClient.StatusCode;
  data: ABTNodeClient.AccessKey;
}

interface ResponseUpdateNginxHttpsCert {
  code: ABTNodeClient.StatusCode;
}

interface ResponseUpgradeNodeVersion {
  code: ABTNodeClient.StatusCode;
  sessionId: string;
}

interface ResponseUser {
  code: ABTNodeClient.StatusCode;
  user: ABTNodeClient.UserInfo;
}

interface ResponseUsers {
  code: ABTNodeClient.StatusCode;
  users: ABTNodeClient.UserInfo[];
  paging: ABTNodeClient.Paging;
}

interface ResponseWebHooks {
  code: ABTNodeClient.StatusCode;
  webhooks: ABTNodeClient.WebHookRecord[];
}

interface Role {
  name: string;
  description: string;
  grants: string[];
  title: string;
  isProtected: boolean;
}

interface RoutingProvider {
  name: string;
  description: string;
  running: boolean;
  available: boolean;
  error: string;
}

interface RoutingRule {
  id: string;
  from: ABTNodeClient.RoutingRuleFrom;
  to: ABTNodeClient.RoutingRuleTo;
  isProtected: boolean;
}

interface RoutingRuleFrom {
  pathPrefix: string;
  header: ABTNodeClient.RoutingRuleHeader[];
}

interface RoutingRuleHeader {
  key: string;
  value: string;
  type: ABTNodeClient.HeaderMatchType;
}

interface RoutingRuleTo {
  port: undefined;
  type: ABTNodeClient.BackendServiceType;
  did: string;
  url: string;
  redirectCode: undefined;
  interfaceName: string;
  componentId: string;
}

interface RoutingSite {
  id: string;
  domain: string;
  domainAliases: undefined[];
  rules: ABTNodeClient.RoutingRule[];
  isProtected: boolean;
  corsAllowedOrigins: string[];
}

interface RoutingSnapshot {
  hash: string;
  tree: string;
  message: string;
  author: string;
  createdAt: string;
}

interface RuntimeInfo {
  pid: string;
  port: string;
  uptime: string;
  memoryUsage: undefined;
  cpuUsage: undefined;
}

interface TrustedPassport {
  issuerDid: string;
  remark: string;
  mappings: ABTNodeClient.TrustedPassportMapping[];
}

interface TrustedPassportMapping {
  from: ABTNodeClient.TrustedPassportMappingFrom;
  to: ABTNodeClient.TrustedPassportMappingTo;
}

interface TrustedPassportMappingFrom {
  passport: string;
}

interface TrustedPassportMappingTo {
  role: string;
}

interface UpdateList {
  id: string;
  meta: ABTNodeClient.BlockletMeta;
}

interface UserInfo {
  did: string;
  pk: string;
  role: string;
  avatar: string;
  fullName: string;
  email: string;
  approved: boolean;
  createdAt: string;
  updatedAt: string;
  locale: string;
  passports: ABTNodeClient.Passport[];
  firstLoginAt: string;
  lastLoginAt: string;
  remark: string;
}

interface WalletInfo {
  did: string;
  pk: string;
}

interface WebHookParam {
  name: string;
  description: string;
  required: boolean;
  defaultValue: string;
  value: string;
  type: string;
}

interface WebHookRecord {
  type: ABTNodeClient.SenderType;
  id: string;
  params: ABTNodeClient.WebHookParam[];
  createdAt: string;
}

interface WebHookSender {
  type: ABTNodeClient.SenderType;
  title: string;
  description: string;
  params: ABTNodeClient.WebHookParam[];
}


interface GetBlockletParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface GetBlockletMetaFromUrlParams {
  input: ABTNodeClient.RequestBlockletMetaFromUrlInput;
}

interface GetBlockletByBundleParams {
  input: ABTNodeClient.RequestBlockletBundleInput;
}

interface GetBlockletDiffParams {
  input: ABTNodeClient.RequestBlockletDiffInput;
}

interface GetBlockletsParams {
  input: ABTNodeClient.RequestGetBlockletsInput;
}

interface GetLatestBlockletVersionParams {
  input: ABTNodeClient.RequestLatestBlockletVersionInput;
}

interface GetBlockletRuntimeHistoryParams {
  input: ABTNodeClient.RequestBlockletRuntimeHistoryInput;
}

interface GetNodeRuntimeHistoryParams {
  input: ABTNodeClient.RequestNodeRuntimeHistoryInput;
}

interface GetBlockletMetaParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface GetNotificationsParams {
  input: ABTNodeClient.RequestGetNotificationsInput;
}

interface GetRoutingSitesParams {
  input: ABTNodeClient.RequestGetRoutingSitesInput;
}

interface GetRoutingSnapshotsParams {
  input: ABTNodeClient.RequestGetRoutingSnapshotsInput;
}

interface GetSnapshotSitesParams {
  input: ABTNodeClient.RequestGetSnapshotSitesInput;
}

interface CheckDomainsParams {
  input: ABTNodeClient.RequestCheckDomainsInput;
}

interface FindCertificateByDomainParams {
  input: ABTNodeClient.RequestFindCertificateByDomainInput;
}

interface SendTestMessageParams {
  input: ABTNodeClient.RequestSendMsgInput;
}

interface GetSessionParams {
  input: ABTNodeClient.RequestGetSessionInput;
}

interface GetRolesParams {
  input: ABTNodeClient.TeamInput;
}

interface GetPermissionsParams {
  input: ABTNodeClient.TeamInput;
}

interface GetInvitationsParams {
  input: ABTNodeClient.TeamInput;
}

interface GetUsersParams {
  input: ABTNodeClient.RequestUsersInput;
}

interface GetUserParams {
  input: ABTNodeClient.RequestTeamUserInput;
}

interface GetUsersCountPerRoleParams {
  input: ABTNodeClient.TeamInput;
}

interface GetOwnerParams {
  input: ABTNodeClient.TeamInput;
}

interface GetPermissionsByRoleParams {
  input: ABTNodeClient.RequestTeamRoleInput;
}

interface GetPassportIssuancesParams {
  input: ABTNodeClient.RequestGetPassportIssuancesInput;
}

interface GetAuditLogsParams {
  input: ABTNodeClient.RequestGetAuditLogsInput;
}

interface InstallBlockletParams {
  input: ABTNodeClient.RequestVersionedBlockletInput;
}

interface InstallBlockletFromVcParams {
  input: ABTNodeClient.RequestInstallFromVcInput;
}

interface InstallComponentParams {
  input: ABTNodeClient.RequestInstallComponentInput;
}

interface StartBlockletParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface StopBlockletParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface ReloadBlockletParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface RestartBlockletParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface DeleteBlockletParams {
  input: ABTNodeClient.RequestDeleteBlockletInput;
}

interface DeleteComponentParams {
  input: ABTNodeClient.RequestDeleteComponentInput;
}

interface CancelDownloadBlockletParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface UpgradeBlockletParams {
  input: ABTNodeClient.RequestUpgradeBlockletInput;
}

interface CheckComponentsForUpdatesParams {
  input: ABTNodeClient.RequestBlockletInput;
}

interface UpgradeComponentsParams {
  input: ABTNodeClient.RequestUpdateComponentsInput;
}

interface ConfigBlockletParams {
  input: ABTNodeClient.RequestConfigBlockletInput;
}

interface ConfigPublicToStoreParams {
  input: ABTNodeClient.RequestConfigPublicToStoreInput;
}

interface ConfigNavigationsParams {
  input: ABTNodeClient.RequestConfigNavigationsInput;
}

interface UpdateWhoCanAccessParams {
  input: ABTNodeClient.RequestUpdateWhoCanAccessInput;
}

interface UpdateComponentTitleParams {
  input: ABTNodeClient.RequestUpdateComponentTitleInput;
}

interface UpdateComponentMountPointParams {
  input: ABTNodeClient.RequestUpdateComponentMountPointInput;
}

interface BackupToSpacesParams {
  input: ABTNodeClient.RequestBackupToSpacesInput;
}

interface RestoreFromSpacesParams {
  input: ABTNodeClient.RequestRestoreFromSpacesInput;
}

interface UpdateNodeInfoParams {
  input: ABTNodeClient.NodeInfoInput;
}

interface UpdateNodeRoutingParams {
  input: ABTNodeClient.RequestNodeRoutingInput;
}

interface ResetNodeParams {
  input: ABTNodeClient.RequestResetNodeInput;
}

interface UpdateGatewayParams {
  input: ABTNodeClient.RequestGatewayInput;
}

interface CreateMemberInvitationParams {
  input: ABTNodeClient.RequestCreateInvitationInput;
}

interface CreateTransferInvitationParams {
  input: ABTNodeClient.RequestCreateTransferNodeInvitationInput;
}

interface DeleteInvitationParams {
  input: ABTNodeClient.RequsetDeleteInvitationInput;
}

interface CreatePassportIssuanceParams {
  input: ABTNodeClient.RequestCreatePassportIssuanceInput;
}

interface DeletePassportIssuanceParams {
  input: ABTNodeClient.RequestDeleteTeamSessionInput;
}

interface ConfigTrustedPassportsParams {
  input: ABTNodeClient.RequestConfigTrustedPassportsInput;
}

interface ConfigPassportIssuanceParams {
  input: ABTNodeClient.RequestConfigPassportIssuanceInput;
}

interface RemoveUserParams {
  input: ABTNodeClient.RequestTeamUserInput;
}

interface UpdateUserApprovalParams {
  input: ABTNodeClient.RequestTeamUserInput;
}

interface UpdateUserRoleParams {
  input: ABTNodeClient.RequestTeamUserInput;
}

interface IssuePassportToUserParams {
  input: ABTNodeClient.RequestIssuePassportToUserInput;
}

interface RevokeUserPassportParams {
  input: ABTNodeClient.RequestRevokeUserPassportInput;
}

interface EnableUserPassportParams {
  input: ABTNodeClient.RequestRevokeUserPassportInput;
}

interface CreateRoleParams {
  input: ABTNodeClient.RequestCreateRoleInput;
}

interface UpdateRoleParams {
  input: ABTNodeClient.RequestTeamRoleInput;
}

interface DeleteRoleParams {
  input: ABTNodeClient.RequestDeleteRoleInput;
}

interface CreatePermissionParams {
  input: ABTNodeClient.RequestCreatePermissionInput;
}

interface UpdatePermissionParams {
  input: ABTNodeClient.RequestTeamPermissionInput;
}

interface DeletePermissionParams {
  input: ABTNodeClient.RequestDeletePermissionInput;
}

interface GrantPermissionForRoleParams {
  input: ABTNodeClient.RequestGrantPermissionForRoleInput;
}

interface RevokePermissionFromRoleParams {
  input: ABTNodeClient.RequestRevokePermissionFromRoleInput;
}

interface UpdatePermissionsForRoleParams {
  input: ABTNodeClient.RequestUpdatePermissionsForRoleInput;
}

interface HasPermissionParams {
  input: ABTNodeClient.RequestHasPermissionInput;
}

interface AddBlockletStoreParams {
  input: ABTNodeClient.RequestChangeBlockletStoreInput;
}

interface DeleteBlockletStoreParams {
  input: ABTNodeClient.RequestChangeBlockletStoreInput;
}

interface ReadNotificationsParams {
  input: ABTNodeClient.RequestReadNotificationsInput;
}

interface UnreadNotificationsParams {
  input: ABTNodeClient.RequestReadNotificationsInput;
}

interface AddRoutingSiteParams {
  input: ABTNodeClient.RequestAddRoutingSiteInput;
}

interface AddDomainAliasParams {
  input: ABTNodeClient.RequestAddDomainAliasInput;
}

interface DeleteDomainAliasParams {
  input: ABTNodeClient.RequestDeleteDomainAliasInput;
}

interface DeleteRoutingSiteParams {
  input: ABTNodeClient.RequestDeleteRoutingSiteInput;
}

interface UpdateRoutingSiteParams {
  input: ABTNodeClient.RequestUpdateRoutingSiteInput;
}

interface AddRoutingRuleParams {
  input: ABTNodeClient.RequestAddRoutingRuleInput;
}

interface UpdateRoutingRuleParams {
  input: ABTNodeClient.RequestUpdateRoutingRuleInput;
}

interface DeleteRoutingRuleParams {
  input: ABTNodeClient.RequestDeleteRoutingRuleInput;
}

interface TakeRoutingSnapshotParams {
  input: ABTNodeClient.RequestTakeRoutingSnapshotInput;
}

interface UpdateCertificateParams {
  input: ABTNodeClient.RequestUpdateNginxHttpsCertInput;
}

interface AddCertificateParams {
  input: ABTNodeClient.RequestAddNginxHttpsCertInput;
}

interface DeleteCertificateParams {
  input: ABTNodeClient.RequestDeleteNginxHttpsCertInput;
}

interface IssueLetsEncryptCertParams {
  input: ABTNodeClient.RequestAddLetsEncryptCertInput;
}

interface CreateAccessKeyParams {
  input: ABTNodeClient.RequestCreateAccessKeyInput;
}

interface UpdateAccessKeyParams {
  input: ABTNodeClient.RequestUpdateAccessKeyInput;
}

interface DeleteAccessKeyParams {
  input: ABTNodeClient.RequestDeleteAccessKeyInput;
}

interface CreateWebHookParams {
  input: ABTNodeClient.RequestCreateWebHookInput;
}

interface DeleteWebHookParams {
  input: ABTNodeClient.RequestDeleteWebHookInput;
}

interface StartSessionParams {
  input: ABTNodeClient.RequestStartSessionInput;
}

interface UpdateSessionParams {
  input: ABTNodeClient.RequestUpdateSessionInput;
}

interface EndSessionParams {
  input: ABTNodeClient.RequestEndSessionInput;
}

}
