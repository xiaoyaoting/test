"use strict";

/* eslint-disable no-underscore-dangle */
const EventEmitter = require('events');
const {
  fromSecretKey
} = require('@ocap/wallet');
const ABTNodeClient = require('./base');
class NativeABTNodeClient extends ABTNodeClient {
  constructor(httpEndpoint, userAgent) {
    super(httpEndpoint, userAgent);
    this._accessKeyId = null;
    this._accessKeySecret = null;

    // wallet type
    this._type = null;
  }
  setAuthAccessKey(_ref) {
    let {
      accessKeyId,
      accessKeySecret,
      type
    } = _ref;
    NativeABTNodeClient.validateAccessKey({
      accessKeyId,
      accessKeySecret,
      type
    });
    this._accessKeyId = accessKeyId;
    this._accessKeySecret = accessKeySecret;
    this._type = type;
  }
  _getAuthHeaders() {
    const headers = super._getAuthHeaders();
    if (this._accessKeyId && this._accessKeySecret) {
      const wallet = fromSecretKey(this._accessKeySecret, this._type);
      const timestamp = Date.now();
      headers['x-access-key-id'] = this._accessKeyId;
      headers['x-access-stamp'] = timestamp;
      headers['x-access-signature'] = wallet.sign("".concat(timestamp, "-").concat(this._accessKeyId));
    }
    return headers;
  }
  _getSocketOptions() {
    return {};
  }
  _getEventImplementation() {
    return EventEmitter;
  }
}
NativeABTNodeClient.validateAccessKey = _ref2 => {
  let {
    accessKeyId,
    accessKeySecret,
    type
  } = _ref2;
  const wallet = fromSecretKey(accessKeySecret, type);
  const isSameAddr = (addr1, addr2) => String(addr1).toLowerCase() === String(addr2).toLowerCase();
  const match = isSameAddr(accessKeyId, wallet.address);
  if (!match) {
    throw new Error('accessKeyId and accessKeySecret does not match');
  }
};
NativeABTNodeClient.signWithAccessKey = _ref3 => {
  let {
    accessKeyId,
    accessKeySecret,
    message,
    type
  } = _ref3;
  NativeABTNodeClient.validateAccessKey({
    accessKeyId,
    accessKeySecret
  });
  const wallet = fromSecretKey(accessKeySecret, type);
  return wallet.sign(message);
};
module.exports = NativeABTNodeClient;
//# sourceMappingURL=node.js.map