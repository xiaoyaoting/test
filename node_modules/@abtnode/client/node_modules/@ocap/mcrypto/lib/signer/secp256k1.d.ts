import { BytesType, KeyPairType, EncodingType } from '@ocap/util';
import Signer from '../protocols/signer';
/**
 * Signer implementation for secp256k1, based on `elliptic`
 *
 * @class Secp256k1Signer
 */
declare class Secp256k1Signer extends Signer {
    pkCompressed: boolean;
    pkHasFormatPrefix: boolean;
    constructor();
    isValidSK(sk: Uint8Array): boolean;
    /**
     * @public
     * @typedefKeyPairType
     * @prop {string} publicKey - publicKey in hex format
     * @prop {string} secretKey - secretKey in hex format
     * @memberof Secp256k1Signer
     */
    /**
     * Generate random secret/public key pair
     */
    genKeyPair(encoding?: EncodingType): KeyPairType;
    /**
     * Get publicKey from secretKey
     */
    getPublicKey(sk: BytesType, encoding?: EncodingType): BytesType;
    /**
     * Sign a message and get the signature hex
     */
    sign(message: BytesType, sk: BytesType, encoding?: EncodingType): BytesType;
    /**
     * Verify if a signature is valid
     */
    verify(message: BytesType, signature: BytesType, pk: BytesType): boolean;
}
declare const _default: Secp256k1Signer;
export default _default;
export { Secp256k1Signer };
