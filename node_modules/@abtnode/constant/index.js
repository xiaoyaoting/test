const NODE_SERVICES = Object.freeze({
  AUTH: 'auth',
  AUTH_SERVICE: '@abtnode/auth-service', // deprecated
});

const NODE_SERVICES_PREFIX = Object.freeze({
  AUTH_SERVICE: `/.service/${NODE_SERVICES.AUTH_SERVICE}`, // deprecated
});

const ROLES = Object.freeze({
  OWNER: 'owner',
  ADMIN: 'admin',
  MEMBER: 'member',
  GUEST: 'guest',
});

const SERVER_ROLES = Object.freeze({
  ...ROLES,
  CI: 'ci',
  CERTIFICATE: 'certificate',

  // blocklet user or sdk. must start with 'blocklet-
  BLOCKLET_OWNER: 'blocklet-owner',
  BLOCKLET_ADMIN: 'blocklet-admin',
  BLOCKLET_MEMBER: 'blocklet-member',
  BLOCKLET_SDK: 'blocklet-sdk',

  // external user
  EXTERNAL_BLOCKLET_CONTROLLER: 'external-blocklet-controller',
  EXTERNAL_BLOCKLETS_MANAGER: 'external-blocklets-manager',
});

const isBlockletRole = (role) =>
  role &&
  [
    SERVER_ROLES.BLOCKLET_OWNER,
    SERVER_ROLES.BLOCKLET_ADMIN,
    SERVER_ROLES.BLOCKLET_MEMBER,
    SERVER_ROLES.BLOCKLET_SDK,
  ].includes(role);

const AUTH_CERT_TYPE = {
  USER: 'user',
  OWNERSHIP_NFT: 'ownership_nft',
  BLOCKLET_USER: 'blocklet_user',
  BLOCKLET_CONTROLLER: 'blocklet_controller',
};

const RBAC_CONFIG = {
  roles: Object.freeze([
    {
      name: SERVER_ROLES.OWNER,
      title: 'Owner',
      description: 'Has full administrative access to the Blocklet Server',
      passport: true,
    },
    {
      name: SERVER_ROLES.ADMIN,
      title: 'Admin',
      description:
        'Has full permissions to manage blocklet and Blocklet Server such as install/remove/start/stop blocklet, manage blocklet URL mapping and certificates, manage blocklet team, manage node integrations and access keys, upgrade node to a new version',
      passport: true,
    },
    {
      name: SERVER_ROLES.MEMBER,
      title: 'Member',
      description:
        'Has permissions to manage blocklets, such as install/remove/start/stop blocklet, manage blocklet URL mapping and certificates',
      passport: true,
    },
    {
      name: SERVER_ROLES.GUEST,
      title: 'Guest',
      description: 'Has all read permissions on Blocklet Server',
      passport: true,
    },
    {
      name: SERVER_ROLES.CI,
      title: 'CI',
      description: 'Deploy blocklet to Blocklet Server',
      passport: true,
      noHuman: true,
    },
    {
      name: SERVER_ROLES.CERTIFICATE,
      title: 'Certificate',
      description: 'Manage https certificates for blocklets on the Blocklet Server',
      passport: true,
      noHuman: true,
    },
    {
      name: SERVER_ROLES.BLOCKLET_OWNER,
      title: 'Blocklet Owner',
    },
    {
      name: SERVER_ROLES.BLOCKLET_ADMIN,
      title: 'Blocklet Admin',
    },
    {
      name: SERVER_ROLES.BLOCKLET_MEMBER,
      title: 'Blocklet Member',
    },
    {
      name: SERVER_ROLES.BLOCKLET_SDK,
      title: 'Blocklet SDK',
    },
    {
      name: SERVER_ROLES.EXTERNAL_BLOCKLET_CONTROLLER,
      title: 'External Blocklet Controller',
    },
    {
      name: SERVER_ROLES.EXTERNAL_BLOCKLETS_MANAGER,
      title: 'External Blocklets Manager',
      description: 'Manage external blocklets in the Blocklet Server',
      passport: true,
      noHuman: true,
    },
    // for backward compatibility
    {
      name: NODE_SERVICES.AUTH_SERVICE,
      title: 'Auth Service',
    },
  ]),
  permissions: Object.freeze([
    {
      name: 'query_node',
      description:
        'View node data, include dashboard and node settings, log stream for both Blocklet Server and blocklets',
    },
    {
      name: 'mutate_node',
      description: 'Change node settings, upgrade node to a new version',
    },
    {
      name: 'query_session',
      description: 'Get data from a long running session',
    },
    {
      name: 'mutate_session',
      description: 'Start/update/end a long running session',
    },
    {
      name: 'query_accessKey',
      description: 'View access keys for Blocklet Server',
    },
    {
      name: 'mutate_accessKey',
      description: 'Manage access keys for Blocklet Server, such as create/update/delete',
    },
    {
      name: 'query_team',
      description: 'View team data(members/roles/permissions) for Blocklet Server and blocklets',
    },
    {
      name: 'mutate_team',
      description: 'Manage team data(members/roles/permissions) for Blocklet Server and blocklets',
    },
    {
      name: 'query_blocklets',
      description: 'View store and installed blocklets, including blocklet runtime configuration, domains and urls',
    },
    {
      name: 'mutate_blocklets',
      description: 'Perform state changing actions on blocklets, such as install/upgrade/config/start/stop/remove',
    },
    {
      name: 'query_router',
      description: 'View sites, URL mapping and certificates in service gateway',
    },
    {
      name: 'mutate_router',
      description: 'Manage sites, URL mapping and certificates in service gateway',
    },
    {
      name: 'query_certificate',
      description: 'View certificates in service gateway',
    },
    {
      name: 'mutate_certificate',
      description: 'Manage certificates in service gateway',
    },
    {
      name: 'query_notification',
      description: 'View notifications',
    },
    {
      name: 'mutate_notification',
      description: 'Manage notifications, such as mark notifications as read',
    },
    {
      name: 'query_webhook',
      description: 'View integrations',
    },
    {
      name: 'mutate_webhook',
      description: 'Manage integrations',
    },
    // query_blocklet, mutate_blocklet are only for blocklet members
    {
      name: 'query_blocklet',
      description: 'View a blocklet, including blocklet runtime configuration, domains and urls',
    },
    {
      name: 'mutate_blocklet',
      description: 'Perform state changing actions on a blocklet, such as upgrade/config/start/stop',
    },
  ]),
  grants: Object.freeze({
    [SERVER_ROLES.GUEST]: [
      'query_blocklets',
      'query_router',
      'query_webhook',
      'query_notification',
      'query_team',
      'query_accessKey',
      'query_node',
      'query_session',
    ],
    [SERVER_ROLES.MEMBER]: [
      SERVER_ROLES.GUEST,
      'mutate_blocklets',
      'mutate_router',
      'mutate_notification',
      'mutate_session',
    ],
    [SERVER_ROLES.ADMIN]: [
      SERVER_ROLES.MEMBER,
      'mutate_team',
      'mutate_webhook',
      'mutate_accessKey',
      'mutate_node',
      'mutate_certificate',
    ],
    [SERVER_ROLES.OWNER]: [ROLES.ADMIN],
    [SERVER_ROLES.CI]: ['query_blocklets', 'mutate_blocklets'],
    [SERVER_ROLES.CERTIFICATE]: ['query_certificate', 'mutate_certificate'],

    // blocklet app or blocklet user
    [SERVER_ROLES.BLOCKLET_SDK]: ['query_team', 'mutate_team'],
    [SERVER_ROLES.BLOCKLET_OWNER]: [SERVER_ROLES.BLOCKLET_ADMIN],
    [SERVER_ROLES.BLOCKLET_ADMIN]: [SERVER_ROLES.BLOCKLET_MEMBER, 'mutate_team', 'mutate_blocklet'],
    [SERVER_ROLES.BLOCKLET_MEMBER]: ['query_team', 'query_blocklet'],

    // external user
    [SERVER_ROLES.EXTERNAL_BLOCKLET_CONTROLLER]: ['query_blocklets', 'mutate_blocklets'],
    [SERVER_ROLES.EXTERNAL_BLOCKLETS_MANAGER]: ['query_blocklets', 'mutate_blocklets'],
  }),
};

const DAY_IN_MS = 24 * 60 * 60 * 1000;

const EVENTS = {
  NOTIFICATION_CREATE: 'notification.create',
  ROUTING_UPDATED: 'routing.updated',
  NODE_UPDATED: 'node.updated',
  NODE_MAINTAIN_PROGRESS: 'node.upgrade.progress',
  NODE_STARTED: 'node.started',
  NODE_STOPPED: 'node.stopped',
  NODE_ADDED_OWNER: 'node.addedOwner',
  NODE_RUNTIME_INFO: 'node.runtimeInfo',
  BLOCKLETS_RUNTIME_INFO: 'node.blockletsRuntimeInfo',
  DOMAIN_STATUS: 'domain.status',
  USER_ADDED: 'user.added',
  USER_REMOVED: 'user.removed',
  USER_UPDATED: 'user.updated',
  CERT_ADDED: 'cert.added',
  CERT_ISSUED: 'cert.issued',
  CERT_UPDATED: 'cert.updated',
  CERT_REMOVED: 'cert.removed',
  CERT_ERROR: 'cert.error',
  RELOAD_GATEWAY: 'gateway.reload',
};

const WHO_CAN_ACCESS = {
  OWNER: 'owner',
  INVITED: 'invited',
  ALL: 'all',
};

const BLOCKLET_STORE_URL = 'https://store.blocklet.dev';
const BLOCKLET_STORE_URL_DEV = 'https://dev.store.blocklet.dev';

module.exports = Object.freeze({
  // Blocklet Server
  NODE_MODES: Object.freeze({
    PRODUCTION: 'production',
    DEBUG: 'debug',
    MAINTENANCE: 'maintenance',
  }),

  DEFAULT_DESCRIPTION: 'Web Interface to manage your Blocklet Server',

  NODE_MAINTAIN_PROGRESS: Object.freeze({
    SETUP: 'setup', // backup
    INSTALLING: 'installing',
    VERIFYING: 'verifying',
    RESTARTING: 'restarting',
    CLEANUP: 'cleanup',
    COMPLETE: 'complete',
    ROLLBACK: 'rollback',
  }),

  VC_TYPE_BLOCKLET_PURCHASE: 'BlockletPurchaseCredential',
  VC_TYPE_NODE_PASSPORT: 'ABTNodePassport',
  VC_TYPE_GENERAL_PASSPORT: 'NFTPassport',

  NFT_TYPE_SERVER_OWNERSHIP: 'BlockletServerOwnershipNFT',
  NFT_TYPE_SERVERLESS: 'BlockletServerServerlessNFT',

  NODE_PACKAGE_NAME: '@abtnode/cli', // deprecated in 1.6.0
  NODE_COMMAND_NAME: 'abtnode', // deprecated in 1.6.0
  NODE_DATA_DIR_NAME: '_abtnode',
  USER_AVATAR_DIR: '/.assets/avatar',
  USER_AVATAR_URL_PREFIX: 'bn://avatar',
  USER_AVATAR_PATH_PREFIX: '/user/avatar',

  PROCESS_NAME_DAEMON: 'abt-node-daemon',
  PROCESS_NAME_PROXY: 'abt-node-db-hub',
  PROCESS_NAME_UPDATER: 'abt-node-updater',
  PROCESS_NAME_SERVICE: 'abt-node-service',
  PROCESS_NAME_ROUTER: 'abt-node-router',
  PROCESS_NAME_LOG_ROTATE: 'abt-node-log-rotate',
  PROCESS_NAME_EVENT_HUB: 'abt-node-event-hub',

  NODE_REGISTER_URL: 'https://install.arcblock.io/',
  WEB_WALLET_URL: 'https://web.abtwallet.io',
  BLOCKLET_STORE_URL,
  BLOCKLET_STORE_URL_DEV,
  BLOCKLET_STORE_API_PREFIX: '/api',
  BLOCKLET_STORE_API_BLOCKLET_PREFIX: '/api/blocklets',
  BLOCKLET_STORE_META_PATH: '/api/store.json',
  BLOCKLET_STORE: {
    name: 'Official Store',
    description: 'ArcBlock official blocklet registry',
    url: BLOCKLET_STORE_URL,
    logoUrl: '/logo.png',
    maintainer: 'arcblock',
  },
  BLOCKLET_STORE_DEV: {
    name: 'Dev Store',
    description: 'ArcBlock dev registry that contains demo and example blocklets',
    url: BLOCKLET_STORE_URL_DEV,
    maintainer: 'arcblock',
    logoUrl: '/logo.png',
  },

  DEFAULT_DID_REGISTRY: 'https://registry.abtnet.io',
  DEFAULT_DID_DOMAIN: 'did.abtnet.io',
  DEFAULT_IP_DOMAIN: '*.ip.abtnet.io',
  DEFAULT_IP_DOMAIN_SUFFIX: 'ip.abtnet.io',
  DEFAULT_WILDCARD_CERT_HOST: 'https://releases.arcblock.io/',

  DEFAULT_CERTIFICATE_EMAIL: 'certs@arcblock.io',

  CONFIG_FILENAME: 'config.yml',
  CONFIG_FILENAME_OLD: 'abtnode.yml',
  CONFIG_FOLDER_NAME: '.blocklet-server',
  CONFIG_FOLDER_NAME_OLD: '.abtnode',
  EXPORTED_FOLDER_NAME: 'exported_blocklet_server',

  StatusCode: Object.freeze({
    ok: 0,

    blocklet_not_found: 1,
    blocklet_not_purchased: 2,

    forbidden: 403,
    internal: 500,
    timeout: 504,
  }),

  // Service Gateway
  // eslint-disable-next-line prefer-regex-literals
  IP: new RegExp('-(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\-(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}'),
  DOMAIN_FOR_IP_SITE: '',
  DOMAIN_FOR_IP_SITE_REGEXP: `~^\\d+.\\d+.\\d+.\\d+$`, // eslint-disable-line
  DOMAIN_FOR_DEFAULT_SITE: '*',
  DOMAIN_FOR_INTERNAL_SITE: '127.0.0.1',
  NAME_FOR_WELLKNOWN_SITE: 'wellknown',
  WELLKNOWN_PATH_PREFIX: '/.well-known',
  WELLKNOWN_ACME_CHALLENGE_PREFIX: '/.well-known/acme-challenge',
  WELLKNOWN_DID_RESOLVER_PREFIX: '/.well-known/did.json',
  WELLKNOWN_PING_PREFIX: '/.well-known/ping',
  WELLKNOWN_SERVICE_PATH_PREFIX: '/.well-known/service',
  WELLKNOWN_BLOCKLET_ADMIN_PATH: '/.well-known/service/admin',
  WELLKNOWN_BLOCKLET_LOGO_PATH: '/.well-known/service/blocklet/logo',
  SLOT_FOR_IP_DNS_SITE: '888-888-888-888',

  DEFAULT_ADMIN_PATH: '/admin',
  DEFAULT_SERVICE_PATH: '/.abtnode/service',
  DEFAULT_HTTP_PORT: 80,
  DEFAULT_HTTPS_PORT: 443,
  MAX_UPLOAD_FILE_SIZE: 500, // unit: MB
  DEFAULT_DAEMON_PORT: 8089,
  MAX_NGINX_WORKER_CONNECTIONS: 10240,

  BLOCKLET_PROXY_PATH_PREFIX: '/.blocklet/proxy',
  BLOCKLET_SITE_GROUP_SUFFIX: '.blocklet-domain-group',

  // Time and dates
  DAY_IN_MS,
  DAEMON_MAX_MEM_LIMIT_IN_MB: 800,
  PROXY_MAX_MEM_LIMIT_IN_MB: 800,
  BLOCKLET_MAX_MEM_LIMIT_IN_MB: 800,
  CERTIFICATE_EXPIRES_OFFSET: 10 * DAY_IN_MS,
  ROUTING_RULE_TYPES: Object.freeze({
    NONE: 'none',
    DAEMON: 'daemon',
    SERVICE: 'service',
    BLOCKLET: 'blocklet',
    REDIRECT: 'redirect',
    GENERAL_PROXY: 'general_proxy',
    DIRECT_RESPONSE: 'direct_response',
  }),

  // Team
  ROLES,
  SERVER_ROLES,
  isBlockletRole,
  AUTH_CERT_TYPE,
  RBAC_CONFIG,
  genPermissionName: (resource, action = 'access') => `${action}_${resource.replace('_', '-')}`, // resource cannot include '_'
  PASSPORT_STATUS: {
    VALID: 'valid',
    REVOKED: 'revoked',
  },

  // Service
  NODE_SERVICES,
  NODE_SERVICES_PREFIX,

  DISK_ALERT_THRESHOLD_PERCENT: 80,

  // EVENTS
  EVENTS,

  WHO_CAN_ACCESS,
  WHO_CAN_ACCESS_PREFIX_ROLES: 'roles:',

  GATEWAY_REQ_LIMIT: Object.freeze({
    min: 10,
    max: 100,
  }),

  // Store
  STORE_DETAIL_PAGE_PATH_PREFIX: '/blocklets',

  MAX_USER_PAGE_SIZE: 100,

  SERVER_STATUS: {
    RUNNING: 1,
    STOPPED: 2,
    START_FROM_CRASH: 3,
  },

  LOG_RETAIN_IN_DAYS: 60,
  EXPIRED_BLOCKLET_DATA_RETENTION_DAYS: 7,

  BLOCKLET_INSTALL_TYPE: {
    STORE: 'store',
    URL: 'url',
    UPLOAD: 'upload',
    DEV: 'dev',
    CREATE: 'create',
    RESTORE: 'restore',
  },
});
