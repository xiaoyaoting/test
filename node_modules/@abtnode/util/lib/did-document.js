const stringify = require('json-stable-stringify');
const { toBase64, toBase58 } = require('@ocap/util');
const joinUrl = require('url-join');
const pRetry = require('p-retry');
const debug = require('debug')('@abtnode/util:did-document');
const axios = require('./axios');
const { encode: encodeBase32 } = require('./base32');

const getDID = (address) => {
  if (!address || typeof address !== 'string') {
    return address;
  }

  if (address.startsWith('did:abt:')) {
    return address;
  }

  return `did:abt:${address}`;
};

const update = async ({ services, didRegistryUrl, wallet }) => {
  debug('update did document', { didRegistryUrl });

  const did = getDID(wallet.address);
  const time = new Date().toISOString();

  const document = {
    '@context': 'https://www.w3.org/ns/did/v1',
    id: did,
    controller: did,
    service: services,
    verificationMethod: [
      {
        id: `${did}#key-1`,
        type: 'Ed25519Signature',
        controller: did,
        publicKeyMultibase: toBase58(wallet.publicKey),
      },
    ],
    authentication: [`${did}#key-1`],
    created: time,
    updated: time,
  };

  const proof = {
    type: 'Ed25519Signature',
    created: time,
    verificationMethod: `${did}#key-1`,
    jws: toBase64(wallet.sign(stringify(document))),
  };

  document.proof = proof;

  return axios.post(joinUrl(didRegistryUrl, '/.well-known/did-resolver/registries'), document, { timeout: 10 * 1000 });
};

const updateWithRetry = async (...args) => pRetry(() => update(...args), { retries: 3 });

const getServerServices = ({ ips, wallet, domain }) => {
  const records = ips.map((ip) => ({
    type: 'A',
    rr: encodeBase32(wallet.address),
    value: ip,
    domain,
  }));

  const services = [
    {
      id: getDID(wallet.address),
      type: 'DNSRecords',
      records,
    },
  ];

  return services;
};

const getBlockletServices = ({ blockletAppDid, daemonDidDomain, domain }) => {
  return [
    {
      id: getDID(blockletAppDid),
      type: 'DNSRecords',
      records: [
        {
          type: 'CNAME',
          rr: encodeBase32(blockletAppDid),
          value: daemonDidDomain,
          domain,
        },
      ],
    },
  ];
};

const updateServerDocument = async ({ ips, wallet, didRegistryUrl, domain }) => {
  const filteredIps = (ips || []).filter(Boolean);
  if (filteredIps.length === 0) {
    throw new Error('No DID Document to update');
  }

  const services = getServerServices({ ips: filteredIps, domain, wallet });

  return updateWithRetry({ services, didRegistryUrl, wallet });
};

const updateBlockletDocument = async ({ wallet, didRegistryUrl, domain, daemonDidDomain, blockletAppDid }) => {
  const services = getBlockletServices({ blockletAppDid, daemonDidDomain, domain });

  return updateWithRetry({ services, didRegistryUrl, wallet });
};

const disableDNS = async ({ wallet, didRegistryUrl }) => updateWithRetry({ services: [], didRegistryUrl, wallet });

module.exports = {
  updateServerDocument,
  updateBlockletDocument,
  disableDNS,
  getDID,
  getServerServices,
  getBlockletServices,
};
