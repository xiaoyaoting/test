const net = require('net');
const debug = require('debug')('@abtnode/util:ensure-endpoint-healthy');

const sleep = require('./sleep');
const tryWithTimeout = require('./try-with-timeout');

const ONE_SECOND = 1000;

const dial = (host, port) =>
  new Promise((resolve, reject) => {
    const socket = net.connect({
      host: host || '127.0.0.1',
      port,
    });

    socket.on('connect', () => {
      socket.destroy();
      resolve();
    });

    socket.on('error', (error) => {
      reject(error);
    });
  });

const ensureStarted = async ({ host, port, timeout = 10 * ONE_SECOND, elapse = 0 }) => {
  const startTime = Date.now();
  try {
    await dial(host, port);
    debug('ping if started', { port });
    return true;
  } catch (err) {
    debug('ping error:', err.message, port);
    await sleep(ONE_SECOND);

    const spend = elapse + (Date.now() - startTime);

    if (spend >= timeout) {
      throw new Error(
        `the service is not ready within ${Math.ceil(timeout / ONE_SECOND)} seconds, please check your network`
      );
    }

    return ensureStarted({ host, port, timeout, elapse: spend });
  }
};

const ensureHealthy = async ({ host, port, minConsecutiveTime = 5 * ONE_SECOND }) => {
  const checkInterval = 100; // ms
  const minCheckTimes = Math.ceil(minConsecutiveTime / checkInterval);

  debug('check if healthy', { port });
  /* eslint-disable no-await-in-loop */
  for (let i = 0; i < minCheckTimes; i++) {
    debug('ping if healthy', { port });
    await dial(host, port);
    await sleep(checkInterval);
  }
};

module.exports = async ({
  host = '127.0.0.1',
  port,
  timeout = 10 * ONE_SECOND,
  minConsecutiveTime = (+process.env.ENDPOINT_CONSECUTIVE_TIME || 5) * ONE_SECOND,
}) => {
  debug('ensure endpoint healthy', { port, minConsecutiveTime });

  if (timeout < minConsecutiveTime) {
    throw new Error('"timeout" should not less than "minConsecutiveTime"');
  }

  return tryWithTimeout(async () => {
    await ensureStarted({ host, port, timeout: timeout - minConsecutiveTime });
    await ensureHealthy({ host, port, minConsecutiveTime });
  }, timeout);
};
