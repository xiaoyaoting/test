const fs = require('fs');
const path = require('path');
const get = require('lodash/get');

const logger = require('@abtnode/logger')('@abtnode/util:logo-middleware');

const ensureBlockletExist = async (req, res, next) => {
  const { blocklet } = req;

  if (!blocklet || !get(blocklet, 'env.appDir')) {
    res.sendFallbackLogo();
    return;
  }

  next();
};

const ensureCustomSquareLogo = async (req, res, next) => {
  const { blocklet, sendOptions } = req;

  const customLogoSquare = get(blocklet, 'environmentObj.BLOCKLET_APP_LOGO_SQUARE');

  if (customLogoSquare) {
    if (customLogoSquare.startsWith('http')) {
      res.redirect(customLogoSquare);
      return;
    }

    const logoFile = path.join(get(blocklet, 'env.appDir'), customLogoSquare);
    if (fs.existsSync(logoFile)) {
      res.sendFile(logoFile, sendOptions);
      return;
    }
  }

  next();
};

const ensureBundleLogo = async (req, res, next) => {
  const { blocklet, sendOptions } = req;

  if (blocklet.meta.logo) {
    const logoFile = path.join(get(blocklet, 'env.appDir'), blocklet.meta.logo);

    if (fs.existsSync(logoFile)) {
      res.sendFile(logoFile, sendOptions);
      return;
    }
  }

  next();
};

const fallbackLogo = async (req, res) => {
  res.sendFallbackLogo();
};

// eslint-disable-next-line no-unused-vars
const cacheError = async (err, req, res, next) => {
  logger.error('failed to send blocklet logo', { url: req.url, error: err });
  res.sendFallbackLogo();
};

const ensureDefaultLogo = async (req, res, next) => {
  const { blocklet, sendOptions } = req;

  if (blocklet && get(blocklet, 'env.dataDir')) {
    get(blocklet, 'env.dataDir');

    const logoSvgFile = path.join(get(blocklet, 'env.dataDir'), 'logo.svg');
    if (fs.existsSync(logoSvgFile)) {
      res.sendFile(logoSvgFile, sendOptions);
      return;
    }

    const logoPngFile = path.join(get(blocklet, 'env.dataDir'), 'logo.png');
    if (fs.existsSync(logoPngFile)) {
      res.sendFile(logoPngFile, sendOptions);
      return;
    }
  }

  next();
};

const ensureCustomFavicon = async (req, res, next) => {
  const { blocklet, sendOptions } = req;

  const customLogoFavicon = get(blocklet, 'environmentObj.BLOCKLET_APP_LOGO_FAVICON');
  if (customLogoFavicon) {
    if (customLogoFavicon.startsWith('http')) {
      res.redirect(customLogoFavicon);
      return;
    }

    const logoFile = path.join(get(blocklet, 'env.appDir'), customLogoFavicon);
    if (fs.existsSync(logoFile)) {
      res.sendFile(logoFile, sendOptions);
      return;
    }
  }

  next();
};

const attachSendLogoContext =
  ({ onSendFallbackLogo, onGetBlocklet }) =>
  async (req, res, next) => {
    const sendOptions = { maxAge: '1d' };

    req.sendOptions = sendOptions;

    try {
      req.blocklet = await onGetBlocklet({ req });
    } catch (error) {
      logger.error('failed to get blocklet', { url: req.url, error });
      req.blocklet = null;
    }

    res.sendFallbackLogo = () => {
      onSendFallbackLogo({ res, sendOptions });
    };

    next();
  };

module.exports = {
  attachSendLogoContext,
  ensureBlockletExist,
  ensureCustomSquareLogo,
  ensureBundleLogo,
  ensureCustomFavicon,
  ensureDefaultLogo,
  fallbackLogo,
  cacheError,
};
