const crypto = require('crypto');
const AES = require('@ocap/mcrypto/lib/crypter/aes').default;

const encrypt = (m, s, i) => AES.encrypt(m, crypto.pbkdf2Sync(i, s, 256, 32, 'sha512').toString('hex'));
const decrypt = (m, s, i) => AES.decrypt(m, crypto.pbkdf2Sync(i, s, 256, 32, 'sha512').toString('hex'));

const formatEnv = (raw, stringifyObject = true) => {
  let value = raw;

  // ensure no
  if (Array.isArray(value) && value.every((x) => x.originFileObj && x.url)) {
    value = value.map((x) => x.url);
    if (value.length === 1) {
      [value] = value;
    }
  }

  // ensure no objects
  if (stringifyObject) {
    if (value && typeof value === 'object') {
      value = JSON.stringify(value);
    }
  }

  // ensure no line breaks for environment variables
  if (value && typeof value === 'string') {
    value = value.replace(/(\r\n|\n|\r)/gm, ' ');
  }

  return value;
};

// https://github.com/joaquimserafim/base64-url/blob/54d9c9ede66a8724f280cf24fd18c38b9a53915f/index.js#L10
const escape = (str) => str.replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
const encodeEncryptionKey = (key) => escape(Buffer.from(key).toString('base64'));
const unescape = (str) => (str + '==='.slice((str.length + 3) % 4)).replace(/-/g, '+').replace(/_/g, '/');
const decodeEncryptionKey = (str) => new Uint8Array(Buffer.from(unescape(str), 'base64'));

module.exports = {
  encrypt,
  decrypt,
  formatEnv,
  encodeEncryptionKey,
  decodeEncryptionKey,
};
