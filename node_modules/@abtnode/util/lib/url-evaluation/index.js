const checkURLAccessibleInBrowser = require('./check-accessible-browser');

const isIpAddress = (hostname) => {
  return /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/.test(hostname);
};

const isIpEcho = (hostname) => {
  return hostname.endsWith('.ip.abtnet.io');
};

const isDidDomain = (hostname) => {
  return hostname.endsWith('.did.abtnet.io');
};

const isCustomDomain = (domain) => {
  return !isIpEcho(domain) && !isDidDomain(domain) && !isIpAddress(domain);
};

/**
 * 用于评估 url 可访问性/使用优先级 (考虑 node/browser 两种环境)
 */
const evaluateURL = async (url, options = {}) => {
  const { timeout = 5000, checkAccessible = checkURLAccessibleInBrowser } = options;
  const { protocol, port, hostname } = new URL(url);
  // https +1000 分
  let score = protocol === 'https:' ? 1000 : 0;
  // 自定义域名，优先级最高 (即使不可访问)
  if (isCustomDomain(hostname)) {
    score += 30000;
    // 子层越多越靠后
    score -= hostname.split('.').length;
  } else {
    // ip echo, +20
    if (isIpEcho(hostname)) {
      score += 20;
    }
    // 纯 ip 地址
    if (isIpAddress(hostname)) {
      score += 1;
    }
    // 带端口优先权放后
    if (port) {
      score -= 1;
    }
  }
  // 不可访问, 减 20000 分 (这里将 4xx~5xx 也认为是可访问)
  let accessible = false;
  if (checkAccessible) {
    accessible = await checkAccessible(url, timeout);
    if (!accessible) {
      score -= 20000;
    }
  }
  return { url, score, accessible };
};

/**
 * 用于评估一组 url 的可访问性/使用优先级, 返回一组按 score 从高到低排序的 urls
 */
const evaluateURLs = async (urls, options = {}) => {
  const results = await Promise.all(
    urls.map(async (url) => {
      try {
        return await evaluateURL(url, options);
      } catch (e) {
        console.error(e);
        return { url, score: Number.MIN_SAFE_INTEGER, accessible: false };
      }
    })
  );
  // 有些情况下可能不需要排序, 可以传入 sort: false
  if (options.sort === false) {
    return results;
  }
  return results.sort((a, b) => b.score - a.score);
};

module.exports = {
  evaluateURL,
  evaluateURLs,
};
