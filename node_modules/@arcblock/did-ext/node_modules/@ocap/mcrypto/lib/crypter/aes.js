"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AesCrypter = void 0;
const AES = __importStar(require("crypto-js/aes"));
const enc_latin1_1 = __importDefault(require("crypto-js/enc-latin1"));
const enc_utf8_1 = __importDefault(require("crypto-js/enc-utf8"));
const enc_utf16_1 = __importDefault(require("crypto-js/enc-utf16"));
const enc_base64_1 = __importDefault(require("crypto-js/enc-base64"));
const enc_hex_1 = __importDefault(require("crypto-js/enc-hex"));
const crypter_1 = __importDefault(require("../protocols/crypter"));
const encoders = {
    latin1: enc_latin1_1.default,
    utf8: enc_utf8_1.default,
    hex: enc_hex_1.default,
    utf16: enc_utf16_1.default,
    base64: enc_base64_1.default,
};
// AES-CBC-256
class AesCrypter extends crypter_1.default {
    encrypt(message, secret) {
        const text = typeof message === 'string' ? message : JSON.stringify(message);
        return AES.encrypt(text, secret).toString();
    }
    decrypt(cipher, secret, outputEncoding = 'utf8') {
        return AES.decrypt(cipher, secret).toString(encoders[outputEncoding]);
    }
}
exports.AesCrypter = AesCrypter;
exports.default = new AesCrypter();
