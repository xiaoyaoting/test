"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeccakHasher = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const js_sha3_1 = __importDefault(require("js-sha3"));
const util_1 = require("@ocap/util");
const encode_1 = require("../encode");
/**
 * Keccak support with different hash length
 *
 * @class KeccakHasher
 */
class KeccakHasher {
    constructor() {
        [224, 256, 384, 512].forEach((x) => {
            const name = `hash${x}`;
            // @ts-ignore
            const hasher = (data) => js_sha3_1.default[`keccak${x}`](data);
            const hashFn = (input, round) => {
                if (round === 1) {
                    return hasher(input);
                }
                return hashFn(hasher(input), round - 1);
            };
            this[name] = (data, round = 1, encoding = 'hex') => {
                let input = data;
                try {
                    input = (0, util_1.toUint8Array)(data);
                }
                catch (err) {
                    // Do nothing
                }
                const res = hashFn(input, round);
                return (0, encode_1.encode)(`0x${res}`, encoding);
            };
        });
    }
}
exports.KeccakHasher = KeccakHasher;
exports.default = new KeccakHasher();
