import { LiteralUnion } from 'type-fest';
export declare type DIDTypeKey = LiteralUnion<'role' | 'pk' | 'hash' | 'address', string>;
export declare type DIDTypeShortcut = LiteralUnion<'default' | 'arcblock' | 'eth' | 'ethereum', string>;
export declare type DIDType = {
    [key in DIDTypeKey]?: number;
};
export declare type DIDTypeStr = {
    [key in DIDTypeKey]?: string;
};
export declare type DIDTypeArg = DIDTypeShortcut | DIDType;
declare const DID_TYPE_ARCBLOCK: DIDType;
declare const DID_TYPE_ETHEREUM: DIDType;
declare const isEthereumType: (type: DIDType) => any;
/**
 * Checks if the given string is an address
 *
 * @method isEthereumDid
 * @param {String} address the given HEX address
 * @return {Boolean}
 */
declare const isEthereumDid: (did: string) => boolean;
/**
 * Converts to a checksum address
 *
 * @method toChecksumAddress
 * @param {String} address the given HEX address
 * @return {String}
 */
declare const toChecksumAddress: (address: string) => string;
/**
 * Create an wallet type object that be used as param to create a new wallet
 */
declare function DidType(type?: DIDTypeArg): DIDType;
declare namespace DidType {
    var toJSON: (type: DIDType) => DIDTypeStr;
    var fromJSON: (json: DIDTypeStr) => DIDType;
}
/**
 * Convert type info object to hex string
 *
 * @public
 * @static
 * @param {object} type - wallet type, {@see @arcblock/did#DidType}
 * @returns string
 */
declare const fromTypeInfo: (type: DIDTypeArg) => string;
/**
 * Get type info from did
 */
declare const toTypeInfo: (did: string) => DIDType;
declare const toTypeInfoStr: (did: string) => DIDTypeStr;
export { DID_TYPE_ARCBLOCK, DID_TYPE_ETHEREUM, fromTypeInfo, toTypeInfo, toTypeInfoStr, isEthereumType, isEthereumDid, toChecksumAddress, DidType, };
