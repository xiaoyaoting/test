import { BytesType } from '@ocap/util';
export declare type JwtBody = {
    iss: string;
    iat: string;
    nbf: string;
    exp: string;
    version: string;
    [key: string]: any;
};
export declare type JwtHeader = {
    alg: string;
    type: 'JWT';
};
export declare type JwtToken = {
    header: JwtHeader;
    body: JwtBody;
    signature: string;
};
export declare type JwtVerifyOptions = Partial<{
    tolerance: number;
    enforceTimestamp: boolean;
    signerKey: string;
}>;
/**
 *
 *
 * @param {string} signer - address string
 * @param {string} sk - hex encoded secret key
 * @param {*} [payload={}] - data to be included before signing
 * @param {boolean} [doSign=true] - do we need to sign the payload or just return the content to be signed
 * @param {string} [version='1.0.0']
 * @return {*}  {string} - hex encoded signature
 */
export declare function sign(signer: string, sk: BytesType, payload?: {}, doSign?: boolean, version?: string): string;
export declare function decode(token: string, bodyOnly?: true): JwtBody;
export declare function decode(token: string, bodyOnly?: false): JwtToken;
/**
 * Verify a jwt token
 *
 * @param {string} token  - the jwt token
 * @param {string} signerPk - signer public key
 * @param {{
 *     tolerance: number; - number of seconds to tolerant expire
 *     enforceTimestamp: boolean; - whether should be verify timestamps?
 *     signerKey: string; - which field should be used to pick the signer
 *   }} [{
 *     tolerance,
 *     enforceTimestamp,
 *     signerKey,
 *   }={
 *       tolerance: 5,
 *       enforceTimestamp: true,
 *       signerKey: 'iss',
 *     }]
 * @return {*}  {boolean}
 */
export declare function verify(token: string, signerPk: BytesType, options?: JwtVerifyOptions): boolean;
