{"version":3,"file":"util.js","names":["parse","require","print","getTypeField","root","key","type","ofType","getTypeFilter","kinds","x","isDeprecated","kind","includes","resolveFieldTree","depth","map","maxDepth","fields","scalarFields","filter","name","scalar","Boolean","objectFields","subType","args","reduce","arg","unionFields","possibleTypes","t","sort","a","b","object","union","shouldIgnore","fieldPath","blackList","some","RegExp","test","makeQuery","ignoreFields","argValues","path","localeCompare","join","Array","isArray","length","argStr","Object","keys","formatArgs","selection","trim","subQueryStr","values","specs","Error","missingArgs","isRequiredMissing","isMissing","push","message","toString","formatScalarArg","value","v","replace","ensureList","formatArg","spec","result","console","error","addFieldsPath","prefix","forEach","extractArgSpecs","types","obj","inputFields","acc","f","subName","subKind","subSpecs","getGraphQLBuilders","rootName","startsWith","query","mutation","subscription","fns","argSpecs","globalIgnore","fn","_ignoreFields","concat","queryStr","err","getQueryBuilders","getMutationBuilders","getSubscriptionBuilders","fakeMessage","fieldSource","fakeField","field","Date","toISOString","enumValues","module","exports"],"sources":["../src/util.js"],"sourcesContent":["const { parse } = require('graphql/language/parser');\nconst { print } = require('graphql/language/printer');\n\nconst getTypeField = (root, key) => {\n  if (root.type.ofType) {\n    if (root.type.ofType.ofType) {\n      if (root.type.ofType.ofType[key]) {\n        return root.type.ofType.ofType[key];\n      }\n    }\n\n    if (root.type.ofType[key]) {\n      return root.type.ofType[key];\n    }\n  }\n\n  return root.type[key] || root[key];\n};\n\n/**\n * Make a field filter fn\n *\n * @param {*} kind\n */\nconst getTypeFilter = kinds => x => {\n  if (x.isDeprecated) {\n    return false;\n  }\n\n  const kind = getTypeField(x, 'kind');\n  return kinds.includes(kind);\n};\n\n/**\n * get fields and its dependencies based on schema\n *\n * @param {*} type\n * @param {*} depth\n * @param {*} map\n * @returns\n */\nconst resolveFieldTree = (type, depth, map, maxDepth) => {\n  const { fields } = type;\n  const scalarFields = (fields || [])\n    .filter(getTypeFilter(['SCALAR', 'ENUM']))\n    .map(x => ({ name: x.name, kind: x.kind }));\n\n  if (depth >= maxDepth) {\n    return { scalar: scalarFields.filter(x => Boolean(x.name)) };\n  }\n\n  const objectFields = (fields || []).filter(getTypeFilter(['OBJECT'])).map(x => {\n    const subType = getTypeField(x, 'name');\n    const kind = getTypeField(x, 'kind');\n    return {\n      type: kind,\n      name: x.name,\n      args: (x.args || []).reduce((args, arg) => {\n        args[arg.name] = arg;\n        return args;\n      }, {}),\n      fields: resolveFieldTree(map[subType], depth + 1, map, maxDepth),\n    };\n  });\n\n  const unionFields = (fields || []).filter(getTypeFilter(['UNION'])).map(x => {\n    const subType = getTypeField(x, 'name');\n    return {\n      type: x.type.kind,\n      name: x.name,\n      possibleTypes: map[subType].possibleTypes.map(t => ({\n        name: t.name,\n        fields: resolveFieldTree(map[t.name], depth + 1, map, maxDepth),\n      })),\n    };\n  });\n\n  scalarFields.sort((a, b) => a.name - b.name);\n  objectFields.sort((a, b) => a.name - b.name);\n  unionFields.sort((a, b) => a.name - b.name);\n\n  return {\n    scalar: scalarFields,\n    object: objectFields,\n    union: unionFields,\n  };\n};\n\nconst shouldIgnore = (fieldPath, blackList) => {\n  return blackList.some(x => (x instanceof RegExp ? x.test(fieldPath) : x === fieldPath));\n};\n\n/**\n * make graphql query string based on field list\n *\n * @param {*} fields\n * @param {*} ignoreFields\n * @returns string\n */\n/* eslint-disable indent */\nconst makeQuery = (fields, ignoreFields, argValues = {}) => `\n  ${fields.scalar\n    .filter(x => shouldIgnore(x.path, ignoreFields) === false)\n    .sort((a, b) => a.name.localeCompare(b.name))\n    .map(x => x.name)\n    .join('\\n')}\n  ${\n    Array.isArray(fields.object)\n      ? fields.object\n          .filter(\n            x =>\n              (x.fields.scalar || []).length ||\n              (x.fields.object || []).length ||\n              (x.fields.union || []).length\n          )\n          .filter(x => shouldIgnore(x.path, ignoreFields) === false)\n          .sort((a, b) => a.name.localeCompare(b.name))\n          .map(x => {\n            const argStr = Object.keys(x.args).length\n              ? `${formatArgs(argValues[x.path] || {}, x.args)}`\n              : '';\n            const selection = makeQuery(x.fields, ignoreFields, argValues).trim();\n            const subQueryStr = `${x.name} ${argStr ? `(${argStr})` : ''} ${\n              selection ? `{${selection}}` : ''\n            }`;\n\n            return subQueryStr;\n          })\n          .join('\\n')\n      : ''\n  }\n  ${\n    Array.isArray(fields.union) && fields.union.filter(x => x.possibleTypes.length).length\n      ? fields.union\n          .filter(x => x.possibleTypes.length)\n          .filter(x => shouldIgnore(x.path, ignoreFields) === false)\n          .sort((a, b) => a.name.localeCompare(b.name))\n          .map(x => {\n            const subQueryStr = `${x.name} {\n              __typename\n              ${x.possibleTypes.filter(t => !ignoreFields.includes(t.name)).map(\n                t => `... on ${t.name} {\n                ${makeQuery(t.fields, ignoreFields, argValues).trim()}\n              }`\n              )}\n            }`;\n\n            return subQueryStr;\n          })\n          .join('\\n')\n      : ''\n  }\n  `;\n/* eslint-enable indent */\n\n/**\n * assemble graphql params\n *\n * @param {*} values\n * @param {*} specs\n * @returns string\n */\nconst formatArgs = (values, specs = {}) => {\n  if (!values) {\n    throw new Error('Empty args when generating graphql query');\n  }\n\n  const missingArgs = [];\n  const isRequiredMissing = Object.keys(specs).some(x => {\n    const isMissing =\n      getTypeField(specs[x], 'kind') === 'NON_NULL' && typeof values[x] === 'undefined';\n    if (isMissing) {\n      missingArgs.push(x);\n    }\n\n    return isMissing;\n  });\n  if (isRequiredMissing) {\n    const message = `Missing required args {${missingArgs.toString()}} when generating query`;\n    // console.error(message, values, specs); // eslint-disable-line\n    throw new Error(message);\n  }\n\n  const formatScalarArg = (type, value) => {\n    // console.log('formatScalarArg', { type, value });\n    if (Array.isArray(value)) {\n      return `[${value.map(v => formatScalarArg(type, v)).join(',')}]`;\n    }\n\n    // escape slash(\\) and double quotes (\")\n    if ('String' === type) {\n      return `\"${value\n        .toString()\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')}\"`;\n    }\n\n    if (['DateTime', 'ID', 'HexString'].includes(type)) {\n      return `\"${value.toString()}\"`;\n    }\n\n    if (['BigNumber', 'Int', 'Float', 'Long', 'Boolean'].includes(type)) {\n      return value;\n    }\n\n    return value.toString();\n  };\n\n  const ensureList = v => (Array.isArray(v) ? v : [v]);\n\n  const formatArg = (value, spec) => {\n    const type = getTypeField(spec, 'name');\n    const kind = getTypeField(spec, 'kind');\n    const fields = getTypeField(spec, 'fields');\n\n    let result = '';\n    if (spec.kind === 'LIST') {\n      result = `[${ensureList(value)\n        .map(v => {\n          if (kind === 'SCALAR') {\n            return formatScalarArg(type, v);\n          }\n          if (fields) {\n            return `{${formatArgs(v, fields)}}`;\n          }\n\n          // eslint-disable-next-line\n          console.error('formatArgs: unrecognized type in list', {\n            value,\n            spec,\n            type,\n            kind,\n            fields,\n          });\n        })\n        .join(',')}]`;\n    } else if (spec.type.kind === 'LIST') {\n      result = `[${ensureList(value)\n        .map(v => {\n          if (spec.type.ofType.kind === 'SCALAR') {\n            return formatScalarArg(spec.type.ofType.name, v);\n          }\n          if (spec.type.ofType.fields) {\n            return `{${formatArgs(v, spec.type.ofType.fields)}}`;\n          }\n\n          if (kind === 'SCALAR') {\n            return formatScalarArg(type, v);\n          }\n          if (fields) {\n            return `{${formatArgs(v, fields)}}`;\n          }\n\n          // eslint-disable-next-line\n          console.error('formatArgs: unrecognized type in list', {\n            value,\n            spec,\n            type,\n            kind,\n            fields,\n          });\n        })\n        .join(',')}]`;\n    } else if (kind === 'SCALAR') {\n      result = formatScalarArg(type, value);\n    } else if (kind === 'ENUM') {\n      result = value;\n    } else if (kind === 'INPUT_OBJECT') {\n      result = `{${formatArgs(value, fields)}}`;\n    }\n\n    return result;\n  };\n\n  return Object.keys(values || {})\n    .filter(x => specs[x])\n    .map(x => `${x}: ${formatArg(values[x], specs[x])}`)\n    .join(', ');\n};\n\n/**\n * Add path for nested objects\n *\n * @param {*} fields\n * @param {string} [prefix='']\n */\nconst addFieldsPath = (fields, prefix = '') => {\n  if (Array.isArray(fields.scalar)) {\n    fields.scalar.forEach(x => {\n      x.path = [prefix, x.name].filter(Boolean).join('.');\n    });\n  }\n\n  if (Array.isArray(fields.object)) {\n    fields.object.forEach(x => {\n      x.path = [prefix, x.name].filter(Boolean).join('.');\n      addFieldsPath(x.fields, x.path);\n    });\n  }\n\n  if (Array.isArray(fields.union)) {\n    fields.union.forEach(x => {\n      x.path = [prefix, x.name].filter(Boolean).join('.');\n    });\n  }\n};\n\n/**\n * Extract nested argument specs, that can be used when formatting arguments\n *\n * @param {*} args\n * @param {*} types\n * @returns Object\n */\nconst extractArgSpecs = (args, types) => {\n  return args.reduce((obj, x) => {\n    obj[x.name] = x;\n    const name = getTypeField(x, 'name');\n    const kind = getTypeField(x, 'kind');\n\n    if (kind === 'INPUT_OBJECT' && Array.isArray(types[name].inputFields)) {\n      x.fields = types[name].inputFields.reduce((acc, f) => {\n        acc[f.name] = f;\n        const subName = getTypeField(f, 'name');\n        const subKind = getTypeField(f, 'kind');\n\n        if (subKind === 'INPUT_OBJECT') {\n          const subSpecs = extractArgSpecs(types[subName].inputFields, types);\n          if (f.type.kind === 'LIST') {\n            acc[f.name].type.ofType.fields = subSpecs;\n          } else {\n            acc[f.name].type.fields = subSpecs;\n          }\n        }\n\n        return acc;\n      }, {});\n    }\n    return obj;\n  }, {});\n};\n\n/**\n * generate methods for all queries found on RootQueryType\n *\n * @param {*} { types, rootName, ignoreFields, type }\n * @returns <queryName => queryGeneratorFn>\n */\nconst getGraphQLBuilders = ({ types, rootName, ignoreFields, type, maxDepth = 4 }) => {\n  const map = types.reduce((map, x) => {\n    if (x.name.startsWith('__') === false) {\n      map[x.name] = x;\n    }\n    return map;\n  }, {});\n\n  const prefix = {\n    query: '',\n    mutation: 'mutation',\n    subscription: 'subscription',\n  }[type];\n\n  return map[rootName].fields.reduce((fns, x) => {\n    const fields = resolveFieldTree(map[x.type.name], 0, map, maxDepth || 4);\n\n    addFieldsPath(fields);\n\n    const argSpecs = extractArgSpecs(x.args, map);\n    const globalIgnore = typeof ignoreFields === 'function' ? ignoreFields(x) : ignoreFields || [];\n\n    /* eslint-disable indent */\n    const fn = (argValues = {}, _ignoreFields = []) => {\n      // console.log(require('util').inspect(argSpecs, { depth: 8 }));\n\n      const argStr = x.args.length ? `${formatArgs(argValues, argSpecs)}` : '';\n      const selection = makeQuery(\n        fields,\n        [].concat(_ignoreFields || []).concat(globalIgnore),\n        argValues\n      ).trim();\n\n      const queryStr = `${prefix}{${x.name}${argStr ? `(${argStr})` : ''}${\n        selection ? `{${selection}}` : ''\n      }}`;\n\n      try {\n        return print(parse(queryStr));\n      } catch (err) {\n        // eslint-disable-next-line\n        console.error('GraphQLBuilder Error:', queryStr);\n        throw err;\n      }\n    };\n    /* eslint-enable indent */\n\n    fn.args = argSpecs;\n    fns[x.name] = fn;\n    return fns;\n  }, {});\n};\n\nconst getQueryBuilders = ({ types, rootName, ignoreFields, maxDepth }) =>\n  getGraphQLBuilders({ types, rootName, ignoreFields, maxDepth, type: 'query' });\n\nconst getMutationBuilders = ({ types, rootName, ignoreFields, maxDepth }) =>\n  getGraphQLBuilders({ types, rootName, ignoreFields, maxDepth, type: 'mutation' });\n\nconst getSubscriptionBuilders = ({ types, rootName, ignoreFields, maxDepth }) =>\n  getGraphQLBuilders({ types, rootName, ignoreFields, maxDepth, type: 'subscription' });\n\n/**\n * Generate a fake query arg object, or fake response object\n *\n * @param {object} spec - the spec of the object to fake\n * @param {object} types - the whole type tree from graphql schema\n * @param {string} [fieldSource='inputFields']\n * @returns {object} the fake message\n */\nconst fakeMessage = (spec, types, fieldSource = 'inputFields') => {\n  const args = {};\n  if (!Array.isArray(spec[fieldSource])) {\n    return fakeField(spec, types, fieldSource);\n  }\n\n  spec[fieldSource].forEach(x => {\n    // If list, we do not force it to be NON_NULL\n    // prettier-ignore\n    switch (x.type.kind) {\n    case 'LIST':\n      args[x.name] = [fakeMessage(types[x.type.ofType.name], types, fieldSource)];\n      break;\n    case 'SCALAR':\n      args[x.name] = fakeField(x.type, types, fieldSource);\n      break;\n    case 'NON_NULL':\n      args[x.name] = fakeField(x.type.ofType, types, fieldSource);\n      break;\n    case 'OBJECT':\n      args[x.name] = fakeField(types[x.type.name], types, fieldSource);\n      break;\n    case 'ENUM':\n      args[x.name] = fakeField(types[x.type.name], types, fieldSource);\n      break;\n    default:\n      break;\n    }\n  });\n\n  // HACK: required here for single list\n  const keys = Object.keys(args);\n  if (keys.length === 1 && Array.isArray(args[keys[0]])) {\n    return args[keys[0]];\n  }\n\n  return args;\n};\n\nconst fakeField = (field, types, fieldSource) => {\n  if (['String', 'HexString'].includes(field.name)) {\n    return 'abc';\n  }\n  if (field.name === 'Boolean') {\n    return true;\n  }\n  if (field.name === 'DateTime') {\n    return new Date('2019-04-29').toISOString();\n  }\n  if (['BigNumber', 'Int', 'Float', 'Long'].includes(field.name)) {\n    return 123;\n  }\n  if (field.kind === 'ENUM') {\n    return field.enumValues[0].name;\n  }\n  if (['INPUT_OBJECT', 'OBJECT'].includes(field.kind)) {\n    return fakeMessage(types[field.name], types, fieldSource);\n  }\n};\n\nmodule.exports = {\n  getQueryBuilders,\n  getMutationBuilders,\n  getSubscriptionBuilders,\n  getGraphQLBuilders,\n  getTypeFilter,\n  resolveFieldTree,\n  makeQuery,\n  extractArgSpecs,\n  formatArgs,\n  fakeMessage,\n  fakeField,\n};\n"],"mappings":";;AAAA,MAAM;EAAEA;AAAF,IAAYC,OAAO,CAAC,yBAAD,CAAzB;;AACA,MAAM;EAAEC;AAAF,IAAYD,OAAO,CAAC,0BAAD,CAAzB;;AAEA,MAAME,YAAY,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;EAClC,IAAID,IAAI,CAACE,IAAL,CAAUC,MAAd,EAAsB;IACpB,IAAIH,IAAI,CAACE,IAAL,CAAUC,MAAV,CAAiBA,MAArB,EAA6B;MAC3B,IAAIH,IAAI,CAACE,IAAL,CAAUC,MAAV,CAAiBA,MAAjB,CAAwBF,GAAxB,CAAJ,EAAkC;QAChC,OAAOD,IAAI,CAACE,IAAL,CAAUC,MAAV,CAAiBA,MAAjB,CAAwBF,GAAxB,CAAP;MACD;IACF;;IAED,IAAID,IAAI,CAACE,IAAL,CAAUC,MAAV,CAAiBF,GAAjB,CAAJ,EAA2B;MACzB,OAAOD,IAAI,CAACE,IAAL,CAAUC,MAAV,CAAiBF,GAAjB,CAAP;IACD;EACF;;EAED,OAAOD,IAAI,CAACE,IAAL,CAAUD,GAAV,KAAkBD,IAAI,CAACC,GAAD,CAA7B;AACD,CAdD;AAgBA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,aAAa,GAAGC,KAAK,IAAIC,CAAC,IAAI;EAClC,IAAIA,CAAC,CAACC,YAAN,EAAoB;IAClB,OAAO,KAAP;EACD;;EAED,MAAMC,IAAI,GAAGT,YAAY,CAACO,CAAD,EAAI,MAAJ,CAAzB;EACA,OAAOD,KAAK,CAACI,QAAN,CAAeD,IAAf,CAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,gBAAgB,GAAG,CAACR,IAAD,EAAOS,KAAP,EAAcC,GAAd,EAAmBC,QAAnB,KAAgC;EACvD,MAAM;IAAEC;EAAF,IAAaZ,IAAnB;EACA,MAAMa,YAAY,GAAG,CAACD,MAAM,IAAI,EAAX,EAClBE,MADkB,CACXZ,aAAa,CAAC,CAAC,QAAD,EAAW,MAAX,CAAD,CADF,EAElBQ,GAFkB,CAEdN,CAAC,KAAK;IAAEW,IAAI,EAAEX,CAAC,CAACW,IAAV;IAAgBT,IAAI,EAAEF,CAAC,CAACE;EAAxB,CAAL,CAFa,CAArB;;EAIA,IAAIG,KAAK,IAAIE,QAAb,EAAuB;IACrB,OAAO;MAAEK,MAAM,EAAEH,YAAY,CAACC,MAAb,CAAoBV,CAAC,IAAIa,OAAO,CAACb,CAAC,CAACW,IAAH,CAAhC;IAAV,CAAP;EACD;;EAED,MAAMG,YAAY,GAAG,CAACN,MAAM,IAAI,EAAX,EAAeE,MAAf,CAAsBZ,aAAa,CAAC,CAAC,QAAD,CAAD,CAAnC,EAAiDQ,GAAjD,CAAqDN,CAAC,IAAI;IAC7E,MAAMe,OAAO,GAAGtB,YAAY,CAACO,CAAD,EAAI,MAAJ,CAA5B;IACA,MAAME,IAAI,GAAGT,YAAY,CAACO,CAAD,EAAI,MAAJ,CAAzB;IACA,OAAO;MACLJ,IAAI,EAAEM,IADD;MAELS,IAAI,EAAEX,CAAC,CAACW,IAFH;MAGLK,IAAI,EAAE,CAAChB,CAAC,CAACgB,IAAF,IAAU,EAAX,EAAeC,MAAf,CAAsB,CAACD,IAAD,EAAOE,GAAP,KAAe;QACzCF,IAAI,CAACE,GAAG,CAACP,IAAL,CAAJ,GAAiBO,GAAjB;QACA,OAAOF,IAAP;MACD,CAHK,EAGH,EAHG,CAHD;MAOLR,MAAM,EAAEJ,gBAAgB,CAACE,GAAG,CAACS,OAAD,CAAJ,EAAeV,KAAK,GAAG,CAAvB,EAA0BC,GAA1B,EAA+BC,QAA/B;IAPnB,CAAP;EASD,CAZoB,CAArB;EAcA,MAAMY,WAAW,GAAG,CAACX,MAAM,IAAI,EAAX,EAAeE,MAAf,CAAsBZ,aAAa,CAAC,CAAC,OAAD,CAAD,CAAnC,EAAgDQ,GAAhD,CAAoDN,CAAC,IAAI;IAC3E,MAAMe,OAAO,GAAGtB,YAAY,CAACO,CAAD,EAAI,MAAJ,CAA5B;IACA,OAAO;MACLJ,IAAI,EAAEI,CAAC,CAACJ,IAAF,CAAOM,IADR;MAELS,IAAI,EAAEX,CAAC,CAACW,IAFH;MAGLS,aAAa,EAAEd,GAAG,CAACS,OAAD,CAAH,CAAaK,aAAb,CAA2Bd,GAA3B,CAA+Be,CAAC,KAAK;QAClDV,IAAI,EAAEU,CAAC,CAACV,IAD0C;QAElDH,MAAM,EAAEJ,gBAAgB,CAACE,GAAG,CAACe,CAAC,CAACV,IAAH,CAAJ,EAAcN,KAAK,GAAG,CAAtB,EAAyBC,GAAzB,EAA8BC,QAA9B;MAF0B,CAAL,CAAhC;IAHV,CAAP;EAQD,CAVmB,CAApB;EAYAE,YAAY,CAACa,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACZ,IAAF,GAASa,CAAC,CAACb,IAAvC;EACAG,YAAY,CAACQ,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACZ,IAAF,GAASa,CAAC,CAACb,IAAvC;EACAQ,WAAW,CAACG,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACZ,IAAF,GAASa,CAAC,CAACb,IAAtC;EAEA,OAAO;IACLC,MAAM,EAAEH,YADH;IAELgB,MAAM,EAAEX,YAFH;IAGLY,KAAK,EAAEP;EAHF,CAAP;AAKD,CA7CD;;AA+CA,MAAMQ,YAAY,GAAG,CAACC,SAAD,EAAYC,SAAZ,KAA0B;EAC7C,OAAOA,SAAS,CAACC,IAAV,CAAe9B,CAAC,IAAKA,CAAC,YAAY+B,MAAb,GAAsB/B,CAAC,CAACgC,IAAF,CAAOJ,SAAP,CAAtB,GAA0C5B,CAAC,KAAK4B,SAArE,CAAP;AACD,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;AACA,MAAMK,SAAS,GAAG,SAAZA,SAAY,CAACzB,MAAD,EAAS0B,YAAT;EAAA,IAAuBC,SAAvB,uEAAmC,EAAnC;EAAA,qBACd3B,MAAM,CAACI,MAAP,CACCF,MADD,CACQV,CAAC,IAAI2B,YAAY,CAAC3B,CAAC,CAACoC,IAAH,EAASF,YAAT,CAAZ,KAAuC,KADpD,EAECZ,IAFD,CAEM,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACZ,IAAF,CAAO0B,aAAP,CAAqBb,CAAC,CAACb,IAAvB,CAFhB,EAGCL,GAHD,CAGKN,CAAC,IAAIA,CAAC,CAACW,IAHZ,EAIC2B,IAJD,CAIM,IAJN,CADc,iBAOdC,KAAK,CAACC,OAAN,CAAchC,MAAM,CAACiB,MAArB,IACIjB,MAAM,CAACiB,MAAP,CACGf,MADH,CAEIV,CAAC,IACC,CAACA,CAAC,CAACQ,MAAF,CAASI,MAAT,IAAmB,EAApB,EAAwB6B,MAAxB,IACA,CAACzC,CAAC,CAACQ,MAAF,CAASiB,MAAT,IAAmB,EAApB,EAAwBgB,MADxB,IAEA,CAACzC,CAAC,CAACQ,MAAF,CAASkB,KAAT,IAAkB,EAAnB,EAAuBe,MAL7B,EAOG/B,MAPH,CAOUV,CAAC,IAAI2B,YAAY,CAAC3B,CAAC,CAACoC,IAAH,EAASF,YAAT,CAAZ,KAAuC,KAPtD,EAQGZ,IARH,CAQQ,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACZ,IAAF,CAAO0B,aAAP,CAAqBb,CAAC,CAACb,IAAvB,CARlB,EASGL,GATH,CASON,CAAC,IAAI;IACR,MAAM0C,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAY5C,CAAC,CAACgB,IAAd,EAAoByB,MAApB,aACRI,UAAU,CAACV,SAAS,CAACnC,CAAC,CAACoC,IAAH,CAAT,IAAqB,EAAtB,EAA0BpC,CAAC,CAACgB,IAA5B,CADF,IAEX,EAFJ;IAGA,MAAM8B,SAAS,GAAGb,SAAS,CAACjC,CAAC,CAACQ,MAAH,EAAW0B,YAAX,EAAyBC,SAAzB,CAAT,CAA6CY,IAA7C,EAAlB;IACA,MAAMC,WAAW,aAAMhD,CAAC,CAACW,IAAR,cAAgB+B,MAAM,cAAOA,MAAP,SAAmB,EAAzC,cACfI,SAAS,cAAOA,SAAP,SAAsB,EADhB,CAAjB;IAIA,OAAOE,WAAP;EACD,CAnBH,EAoBGV,IApBH,CAoBQ,IApBR,CADJ,GAsBI,EA7BU,iBAgCdC,KAAK,CAACC,OAAN,CAAchC,MAAM,CAACkB,KAArB,KAA+BlB,MAAM,CAACkB,KAAP,CAAahB,MAAb,CAAoBV,CAAC,IAAIA,CAAC,CAACoB,aAAF,CAAgBqB,MAAzC,EAAiDA,MAAhF,GACIjC,MAAM,CAACkB,KAAP,CACGhB,MADH,CACUV,CAAC,IAAIA,CAAC,CAACoB,aAAF,CAAgBqB,MAD/B,EAEG/B,MAFH,CAEUV,CAAC,IAAI2B,YAAY,CAAC3B,CAAC,CAACoC,IAAH,EAASF,YAAT,CAAZ,KAAuC,KAFtD,EAGGZ,IAHH,CAGQ,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACZ,IAAF,CAAO0B,aAAP,CAAqBb,CAAC,CAACb,IAAvB,CAHlB,EAIGL,GAJH,CAION,CAAC,IAAI;IACR,MAAMgD,WAAW,aAAMhD,CAAC,CAACW,IAAR,yDAEbX,CAAC,CAACoB,aAAF,CAAgBV,MAAhB,CAAuBW,CAAC,IAAI,CAACa,YAAY,CAAC/B,QAAb,CAAsBkB,CAAC,CAACV,IAAxB,CAA7B,EAA4DL,GAA5D,CACAe,CAAC,qBAAcA,CAAC,CAACV,IAAhB,iCACCsB,SAAS,CAACZ,CAAC,CAACb,MAAH,EAAW0B,YAAX,EAAyBC,SAAzB,CAAT,CAA6CY,IAA7C,EADD,sBADD,CAFa,oBAAjB;IASA,OAAOC,WAAP;EACD,CAfH,EAgBGV,IAhBH,CAgBQ,IAhBR,CADJ,GAkBI,EAlDU;AAAA,CAAlB;AAqDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,UAAU,GAAG,SAAbA,UAAa,CAACI,MAAD,EAAwB;EAAA,IAAfC,KAAe,uEAAP,EAAO;;EACzC,IAAI,CAACD,MAAL,EAAa;IACX,MAAM,IAAIE,KAAJ,CAAU,0CAAV,CAAN;EACD;;EAED,MAAMC,WAAW,GAAG,EAApB;EACA,MAAMC,iBAAiB,GAAGV,MAAM,CAACC,IAAP,CAAYM,KAAZ,EAAmBpB,IAAnB,CAAwB9B,CAAC,IAAI;IACrD,MAAMsD,SAAS,GACb7D,YAAY,CAACyD,KAAK,CAAClD,CAAD,CAAN,EAAW,MAAX,CAAZ,KAAmC,UAAnC,IAAiD,OAAOiD,MAAM,CAACjD,CAAD,CAAb,KAAqB,WADxE;;IAEA,IAAIsD,SAAJ,EAAe;MACbF,WAAW,CAACG,IAAZ,CAAiBvD,CAAjB;IACD;;IAED,OAAOsD,SAAP;EACD,CARyB,CAA1B;;EASA,IAAID,iBAAJ,EAAuB;IACrB,MAAMG,OAAO,oCAA6BJ,WAAW,CAACK,QAAZ,EAA7B,4BAAb,CADqB,CAErB;;IACA,MAAM,IAAIN,KAAJ,CAAUK,OAAV,CAAN;EACD;;EAED,MAAME,eAAe,GAAG,CAAC9D,IAAD,EAAO+D,KAAP,KAAiB;IACvC;IACA,IAAIpB,KAAK,CAACC,OAAN,CAAcmB,KAAd,CAAJ,EAA0B;MACxB,kBAAWA,KAAK,CAACrD,GAAN,CAAUsD,CAAC,IAAIF,eAAe,CAAC9D,IAAD,EAAOgE,CAAP,CAA9B,EAAyCtB,IAAzC,CAA8C,GAA9C,CAAX;IACD,CAJsC,CAMvC;;;IACA,IAAI,aAAa1C,IAAjB,EAAuB;MACrB,mBAAW+D,KAAK,CACbF,QADQ,GAERI,OAFQ,CAEA,KAFA,EAEO,MAFP,EAGRA,OAHQ,CAGA,IAHA,EAGM,KAHN,CAAX;IAID;;IAED,IAAI,CAAC,UAAD,EAAa,IAAb,EAAmB,WAAnB,EAAgC1D,QAAhC,CAAyCP,IAAzC,CAAJ,EAAoD;MAClD,mBAAW+D,KAAK,CAACF,QAAN,EAAX;IACD;;IAED,IAAI,CAAC,WAAD,EAAc,KAAd,EAAqB,OAArB,EAA8B,MAA9B,EAAsC,SAAtC,EAAiDtD,QAAjD,CAA0DP,IAA1D,CAAJ,EAAqE;MACnE,OAAO+D,KAAP;IACD;;IAED,OAAOA,KAAK,CAACF,QAAN,EAAP;EACD,CAvBD;;EAyBA,MAAMK,UAAU,GAAGF,CAAC,IAAKrB,KAAK,CAACC,OAAN,CAAcoB,CAAd,IAAmBA,CAAnB,GAAuB,CAACA,CAAD,CAAhD;;EAEA,MAAMG,SAAS,GAAG,CAACJ,KAAD,EAAQK,IAAR,KAAiB;IACjC,MAAMpE,IAAI,GAAGH,YAAY,CAACuE,IAAD,EAAO,MAAP,CAAzB;IACA,MAAM9D,IAAI,GAAGT,YAAY,CAACuE,IAAD,EAAO,MAAP,CAAzB;IACA,MAAMxD,MAAM,GAAGf,YAAY,CAACuE,IAAD,EAAO,QAAP,CAA3B;IAEA,IAAIC,MAAM,GAAG,EAAb;;IACA,IAAID,IAAI,CAAC9D,IAAL,KAAc,MAAlB,EAA0B;MACxB+D,MAAM,cAAOH,UAAU,CAACH,KAAD,CAAV,CACVrD,GADU,CACNsD,CAAC,IAAI;QACR,IAAI1D,IAAI,KAAK,QAAb,EAAuB;UACrB,OAAOwD,eAAe,CAAC9D,IAAD,EAAOgE,CAAP,CAAtB;QACD;;QACD,IAAIpD,MAAJ,EAAY;UACV,kBAAWqC,UAAU,CAACe,CAAD,EAAIpD,MAAJ,CAArB;QACD,CANO,CAQR;;;QACA0D,OAAO,CAACC,KAAR,CAAc,uCAAd,EAAuD;UACrDR,KADqD;UAErDK,IAFqD;UAGrDpE,IAHqD;UAIrDM,IAJqD;UAKrDM;QALqD,CAAvD;MAOD,CAjBU,EAkBV8B,IAlBU,CAkBL,GAlBK,CAAP,MAAN;IAmBD,CApBD,MAoBO,IAAI0B,IAAI,CAACpE,IAAL,CAAUM,IAAV,KAAmB,MAAvB,EAA+B;MACpC+D,MAAM,cAAOH,UAAU,CAACH,KAAD,CAAV,CACVrD,GADU,CACNsD,CAAC,IAAI;QACR,IAAII,IAAI,CAACpE,IAAL,CAAUC,MAAV,CAAiBK,IAAjB,KAA0B,QAA9B,EAAwC;UACtC,OAAOwD,eAAe,CAACM,IAAI,CAACpE,IAAL,CAAUC,MAAV,CAAiBc,IAAlB,EAAwBiD,CAAxB,CAAtB;QACD;;QACD,IAAII,IAAI,CAACpE,IAAL,CAAUC,MAAV,CAAiBW,MAArB,EAA6B;UAC3B,kBAAWqC,UAAU,CAACe,CAAD,EAAII,IAAI,CAACpE,IAAL,CAAUC,MAAV,CAAiBW,MAArB,CAArB;QACD;;QAED,IAAIN,IAAI,KAAK,QAAb,EAAuB;UACrB,OAAOwD,eAAe,CAAC9D,IAAD,EAAOgE,CAAP,CAAtB;QACD;;QACD,IAAIpD,MAAJ,EAAY;UACV,kBAAWqC,UAAU,CAACe,CAAD,EAAIpD,MAAJ,CAArB;QACD,CAbO,CAeR;;;QACA0D,OAAO,CAACC,KAAR,CAAc,uCAAd,EAAuD;UACrDR,KADqD;UAErDK,IAFqD;UAGrDpE,IAHqD;UAIrDM,IAJqD;UAKrDM;QALqD,CAAvD;MAOD,CAxBU,EAyBV8B,IAzBU,CAyBL,GAzBK,CAAP,MAAN;IA0BD,CA3BM,MA2BA,IAAIpC,IAAI,KAAK,QAAb,EAAuB;MAC5B+D,MAAM,GAAGP,eAAe,CAAC9D,IAAD,EAAO+D,KAAP,CAAxB;IACD,CAFM,MAEA,IAAIzD,IAAI,KAAK,MAAb,EAAqB;MAC1B+D,MAAM,GAAGN,KAAT;IACD,CAFM,MAEA,IAAIzD,IAAI,KAAK,cAAb,EAA6B;MAClC+D,MAAM,cAAOpB,UAAU,CAACc,KAAD,EAAQnD,MAAR,CAAjB,MAAN;IACD;;IAED,OAAOyD,MAAP;EACD,CA9DD;;EAgEA,OAAOtB,MAAM,CAACC,IAAP,CAAYK,MAAM,IAAI,EAAtB,EACJvC,MADI,CACGV,CAAC,IAAIkD,KAAK,CAAClD,CAAD,CADb,EAEJM,GAFI,CAEAN,CAAC,cAAOA,CAAP,eAAa+D,SAAS,CAACd,MAAM,CAACjD,CAAD,CAAP,EAAYkD,KAAK,CAAClD,CAAD,CAAjB,CAAtB,CAFD,EAGJsC,IAHI,CAGC,IAHD,CAAP;AAID,CApHD;AAsHA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM8B,aAAa,GAAG,SAAhBA,aAAgB,CAAC5D,MAAD,EAAyB;EAAA,IAAhB6D,MAAgB,uEAAP,EAAO;;EAC7C,IAAI9B,KAAK,CAACC,OAAN,CAAchC,MAAM,CAACI,MAArB,CAAJ,EAAkC;IAChCJ,MAAM,CAACI,MAAP,CAAc0D,OAAd,CAAsBtE,CAAC,IAAI;MACzBA,CAAC,CAACoC,IAAF,GAAS,CAACiC,MAAD,EAASrE,CAAC,CAACW,IAAX,EAAiBD,MAAjB,CAAwBG,OAAxB,EAAiCyB,IAAjC,CAAsC,GAAtC,CAAT;IACD,CAFD;EAGD;;EAED,IAAIC,KAAK,CAACC,OAAN,CAAchC,MAAM,CAACiB,MAArB,CAAJ,EAAkC;IAChCjB,MAAM,CAACiB,MAAP,CAAc6C,OAAd,CAAsBtE,CAAC,IAAI;MACzBA,CAAC,CAACoC,IAAF,GAAS,CAACiC,MAAD,EAASrE,CAAC,CAACW,IAAX,EAAiBD,MAAjB,CAAwBG,OAAxB,EAAiCyB,IAAjC,CAAsC,GAAtC,CAAT;MACA8B,aAAa,CAACpE,CAAC,CAACQ,MAAH,EAAWR,CAAC,CAACoC,IAAb,CAAb;IACD,CAHD;EAID;;EAED,IAAIG,KAAK,CAACC,OAAN,CAAchC,MAAM,CAACkB,KAArB,CAAJ,EAAiC;IAC/BlB,MAAM,CAACkB,KAAP,CAAa4C,OAAb,CAAqBtE,CAAC,IAAI;MACxBA,CAAC,CAACoC,IAAF,GAAS,CAACiC,MAAD,EAASrE,CAAC,CAACW,IAAX,EAAiBD,MAAjB,CAAwBG,OAAxB,EAAiCyB,IAAjC,CAAsC,GAAtC,CAAT;IACD,CAFD;EAGD;AACF,CAnBD;AAqBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMiC,eAAe,GAAG,CAACvD,IAAD,EAAOwD,KAAP,KAAiB;EACvC,OAAOxD,IAAI,CAACC,MAAL,CAAY,CAACwD,GAAD,EAAMzE,CAAN,KAAY;IAC7ByE,GAAG,CAACzE,CAAC,CAACW,IAAH,CAAH,GAAcX,CAAd;IACA,MAAMW,IAAI,GAAGlB,YAAY,CAACO,CAAD,EAAI,MAAJ,CAAzB;IACA,MAAME,IAAI,GAAGT,YAAY,CAACO,CAAD,EAAI,MAAJ,CAAzB;;IAEA,IAAIE,IAAI,KAAK,cAAT,IAA2BqC,KAAK,CAACC,OAAN,CAAcgC,KAAK,CAAC7D,IAAD,CAAL,CAAY+D,WAA1B,CAA/B,EAAuE;MACrE1E,CAAC,CAACQ,MAAF,GAAWgE,KAAK,CAAC7D,IAAD,CAAL,CAAY+D,WAAZ,CAAwBzD,MAAxB,CAA+B,CAAC0D,GAAD,EAAMC,CAAN,KAAY;QACpDD,GAAG,CAACC,CAAC,CAACjE,IAAH,CAAH,GAAciE,CAAd;QACA,MAAMC,OAAO,GAAGpF,YAAY,CAACmF,CAAD,EAAI,MAAJ,CAA5B;QACA,MAAME,OAAO,GAAGrF,YAAY,CAACmF,CAAD,EAAI,MAAJ,CAA5B;;QAEA,IAAIE,OAAO,KAAK,cAAhB,EAAgC;UAC9B,MAAMC,QAAQ,GAAGR,eAAe,CAACC,KAAK,CAACK,OAAD,CAAL,CAAeH,WAAhB,EAA6BF,KAA7B,CAAhC;;UACA,IAAII,CAAC,CAAChF,IAAF,CAAOM,IAAP,KAAgB,MAApB,EAA4B;YAC1ByE,GAAG,CAACC,CAAC,CAACjE,IAAH,CAAH,CAAYf,IAAZ,CAAiBC,MAAjB,CAAwBW,MAAxB,GAAiCuE,QAAjC;UACD,CAFD,MAEO;YACLJ,GAAG,CAACC,CAAC,CAACjE,IAAH,CAAH,CAAYf,IAAZ,CAAiBY,MAAjB,GAA0BuE,QAA1B;UACD;QACF;;QAED,OAAOJ,GAAP;MACD,CAfU,EAeR,EAfQ,CAAX;IAgBD;;IACD,OAAOF,GAAP;EACD,CAxBM,EAwBJ,EAxBI,CAAP;AAyBD,CA1BD;AA4BA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMO,kBAAkB,GAAG,QAA2D;EAAA,IAA1D;IAAER,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiCtC,IAAjC;IAAuCW,QAAQ,GAAG;EAAlD,CAA0D;EACpF,MAAMD,GAAG,GAAGkE,KAAK,CAACvD,MAAN,CAAa,CAACX,GAAD,EAAMN,CAAN,KAAY;IACnC,IAAIA,CAAC,CAACW,IAAF,CAAOuE,UAAP,CAAkB,IAAlB,MAA4B,KAAhC,EAAuC;MACrC5E,GAAG,CAACN,CAAC,CAACW,IAAH,CAAH,GAAcX,CAAd;IACD;;IACD,OAAOM,GAAP;EACD,CALW,EAKT,EALS,CAAZ;EAOA,MAAM+D,MAAM,GAAG;IACbc,KAAK,EAAE,EADM;IAEbC,QAAQ,EAAE,UAFG;IAGbC,YAAY,EAAE;EAHD,EAIbzF,IAJa,CAAf;EAMA,OAAOU,GAAG,CAAC2E,QAAD,CAAH,CAAczE,MAAd,CAAqBS,MAArB,CAA4B,CAACqE,GAAD,EAAMtF,CAAN,KAAY;IAC7C,MAAMQ,MAAM,GAAGJ,gBAAgB,CAACE,GAAG,CAACN,CAAC,CAACJ,IAAF,CAAOe,IAAR,CAAJ,EAAmB,CAAnB,EAAsBL,GAAtB,EAA2BC,QAAQ,IAAI,CAAvC,CAA/B;IAEA6D,aAAa,CAAC5D,MAAD,CAAb;IAEA,MAAM+E,QAAQ,GAAGhB,eAAe,CAACvE,CAAC,CAACgB,IAAH,EAASV,GAAT,CAAhC;IACA,MAAMkF,YAAY,GAAG,OAAOtD,YAAP,KAAwB,UAAxB,GAAqCA,YAAY,CAAClC,CAAD,CAAjD,GAAuDkC,YAAY,IAAI,EAA5F;IAEA;;IACA,MAAMuD,EAAE,GAAG,SAALA,EAAK,GAAwC;MAAA,IAAvCtD,SAAuC,uEAA3B,EAA2B;;MAAA,IAAvBuD,aAAuB,uEAAP,EAAO;;MACjD;MAEA,MAAMhD,MAAM,GAAG1C,CAAC,CAACgB,IAAF,CAAOyB,MAAP,aAAmBI,UAAU,CAACV,SAAD,EAAYoD,QAAZ,CAA7B,IAAuD,EAAtE;MACA,MAAMzC,SAAS,GAAGb,SAAS,CACzBzB,MADyB,EAEzB,GAAGmF,MAAH,CAAUD,aAAa,IAAI,EAA3B,EAA+BC,MAA/B,CAAsCH,YAAtC,CAFyB,EAGzBrD,SAHyB,CAAT,CAIhBY,IAJgB,EAAlB;MAMA,MAAM6C,QAAQ,aAAMvB,MAAN,cAAgBrE,CAAC,CAACW,IAAlB,SAAyB+B,MAAM,cAAOA,MAAP,SAAmB,EAAlD,SACZI,SAAS,cAAOA,SAAP,SAAsB,EADnB,MAAd;;MAIA,IAAI;QACF,OAAOtD,KAAK,CAACF,KAAK,CAACsG,QAAD,CAAN,CAAZ;MACD,CAFD,CAEE,OAAOC,GAAP,EAAY;QACZ;QACA3B,OAAO,CAACC,KAAR,CAAc,uBAAd,EAAuCyB,QAAvC;QACA,MAAMC,GAAN;MACD;IACF,CArBD;IAsBA;;;IAEAJ,EAAE,CAACzE,IAAH,GAAUuE,QAAV;IACAD,GAAG,CAACtF,CAAC,CAACW,IAAH,CAAH,GAAc8E,EAAd;IACA,OAAOH,GAAP;EACD,CApCM,EAoCJ,EApCI,CAAP;AAqCD,CAnDD;;AAqDA,MAAMQ,gBAAgB,GAAG;EAAA,IAAC;IAAEtB,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiC3B;EAAjC,CAAD;EAAA,OACvByE,kBAAkB,CAAC;IAAER,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiC3B,QAAjC;IAA2CX,IAAI,EAAE;EAAjD,CAAD,CADK;AAAA,CAAzB;;AAGA,MAAMmG,mBAAmB,GAAG;EAAA,IAAC;IAAEvB,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiC3B;EAAjC,CAAD;EAAA,OAC1ByE,kBAAkB,CAAC;IAAER,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiC3B,QAAjC;IAA2CX,IAAI,EAAE;EAAjD,CAAD,CADQ;AAAA,CAA5B;;AAGA,MAAMoG,uBAAuB,GAAG;EAAA,IAAC;IAAExB,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiC3B;EAAjC,CAAD;EAAA,OAC9ByE,kBAAkB,CAAC;IAAER,KAAF;IAASS,QAAT;IAAmB/C,YAAnB;IAAiC3B,QAAjC;IAA2CX,IAAI,EAAE;EAAjD,CAAD,CADY;AAAA,CAAhC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMqG,WAAW,GAAG,SAAdA,WAAc,CAACjC,IAAD,EAAOQ,KAAP,EAA8C;EAAA,IAAhC0B,WAAgC,uEAAlB,aAAkB;EAChE,MAAMlF,IAAI,GAAG,EAAb;;EACA,IAAI,CAACuB,KAAK,CAACC,OAAN,CAAcwB,IAAI,CAACkC,WAAD,CAAlB,CAAL,EAAuC;IACrC,OAAOC,SAAS,CAACnC,IAAD,EAAOQ,KAAP,EAAc0B,WAAd,CAAhB;EACD;;EAEDlC,IAAI,CAACkC,WAAD,CAAJ,CAAkB5B,OAAlB,CAA0BtE,CAAC,IAAI;IAC7B;IACA;IACA,QAAQA,CAAC,CAACJ,IAAF,CAAOM,IAAf;MACA,KAAK,MAAL;QACEc,IAAI,CAAChB,CAAC,CAACW,IAAH,CAAJ,GAAe,CAACsF,WAAW,CAACzB,KAAK,CAACxE,CAAC,CAACJ,IAAF,CAAOC,MAAP,CAAcc,IAAf,CAAN,EAA4B6D,KAA5B,EAAmC0B,WAAnC,CAAZ,CAAf;QACA;;MACF,KAAK,QAAL;QACElF,IAAI,CAAChB,CAAC,CAACW,IAAH,CAAJ,GAAewF,SAAS,CAACnG,CAAC,CAACJ,IAAH,EAAS4E,KAAT,EAAgB0B,WAAhB,CAAxB;QACA;;MACF,KAAK,UAAL;QACElF,IAAI,CAAChB,CAAC,CAACW,IAAH,CAAJ,GAAewF,SAAS,CAACnG,CAAC,CAACJ,IAAF,CAAOC,MAAR,EAAgB2E,KAAhB,EAAuB0B,WAAvB,CAAxB;QACA;;MACF,KAAK,QAAL;QACElF,IAAI,CAAChB,CAAC,CAACW,IAAH,CAAJ,GAAewF,SAAS,CAAC3B,KAAK,CAACxE,CAAC,CAACJ,IAAF,CAAOe,IAAR,CAAN,EAAqB6D,KAArB,EAA4B0B,WAA5B,CAAxB;QACA;;MACF,KAAK,MAAL;QACElF,IAAI,CAAChB,CAAC,CAACW,IAAH,CAAJ,GAAewF,SAAS,CAAC3B,KAAK,CAACxE,CAAC,CAACJ,IAAF,CAAOe,IAAR,CAAN,EAAqB6D,KAArB,EAA4B0B,WAA5B,CAAxB;QACA;;MACF;QACE;IAjBF;EAmBD,CAtBD,EANgE,CA8BhE;;EACA,MAAMtD,IAAI,GAAGD,MAAM,CAACC,IAAP,CAAY5B,IAAZ,CAAb;;EACA,IAAI4B,IAAI,CAACH,MAAL,KAAgB,CAAhB,IAAqBF,KAAK,CAACC,OAAN,CAAcxB,IAAI,CAAC4B,IAAI,CAAC,CAAD,CAAL,CAAlB,CAAzB,EAAuD;IACrD,OAAO5B,IAAI,CAAC4B,IAAI,CAAC,CAAD,CAAL,CAAX;EACD;;EAED,OAAO5B,IAAP;AACD,CArCD;;AAuCA,MAAMmF,SAAS,GAAG,CAACC,KAAD,EAAQ5B,KAAR,EAAe0B,WAAf,KAA+B;EAC/C,IAAI,CAAC,QAAD,EAAW,WAAX,EAAwB/F,QAAxB,CAAiCiG,KAAK,CAACzF,IAAvC,CAAJ,EAAkD;IAChD,OAAO,KAAP;EACD;;EACD,IAAIyF,KAAK,CAACzF,IAAN,KAAe,SAAnB,EAA8B;IAC5B,OAAO,IAAP;EACD;;EACD,IAAIyF,KAAK,CAACzF,IAAN,KAAe,UAAnB,EAA+B;IAC7B,OAAO,IAAI0F,IAAJ,CAAS,YAAT,EAAuBC,WAAvB,EAAP;EACD;;EACD,IAAI,CAAC,WAAD,EAAc,KAAd,EAAqB,OAArB,EAA8B,MAA9B,EAAsCnG,QAAtC,CAA+CiG,KAAK,CAACzF,IAArD,CAAJ,EAAgE;IAC9D,OAAO,GAAP;EACD;;EACD,IAAIyF,KAAK,CAAClG,IAAN,KAAe,MAAnB,EAA2B;IACzB,OAAOkG,KAAK,CAACG,UAAN,CAAiB,CAAjB,EAAoB5F,IAA3B;EACD;;EACD,IAAI,CAAC,cAAD,EAAiB,QAAjB,EAA2BR,QAA3B,CAAoCiG,KAAK,CAAClG,IAA1C,CAAJ,EAAqD;IACnD,OAAO+F,WAAW,CAACzB,KAAK,CAAC4B,KAAK,CAACzF,IAAP,CAAN,EAAoB6D,KAApB,EAA2B0B,WAA3B,CAAlB;EACD;AACF,CAnBD;;AAqBAM,MAAM,CAACC,OAAP,GAAiB;EACfX,gBADe;EAEfC,mBAFe;EAGfC,uBAHe;EAIfhB,kBAJe;EAKflF,aALe;EAMfM,gBANe;EAOf6B,SAPe;EAQfsC,eARe;EASf1B,UATe;EAUfoD,WAVe;EAWfE;AAXe,CAAjB"}