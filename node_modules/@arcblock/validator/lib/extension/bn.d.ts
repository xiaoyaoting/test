import { Root, AnySchema } from 'joi';
import BN from 'bn.js';
export interface BNSchema extends AnySchema {
    min(threshold: any): this;
    gte(threshold: any): this;
    max(threshold: any): this;
    lte(threshold: any): this;
    greater(threshold: any): this;
    gt(threshold: any): this;
    less(threshold: any): this;
    lt(threshold: any): this;
    positive(): this;
    negative(): this;
}
export declare function BNExtension(root: Root): {
    type: string;
    base: AnySchema<any>;
    messages: {
        'bn.nan': string;
        'bn.max': string;
        'bn.min': string;
        'bn.less': string;
        'bn.greater': string;
        'bn.positive': string;
        'bn.negative': string;
    };
    prepare(value: any, helpers: any): {
        value: BN;
        errors?: undefined;
    } | {
        errors: any;
        value?: undefined;
    };
    coerce(value: BN): {
        value: string;
    };
    validate(value: any): {
        value: any;
    };
    rules: {
        gt: {
            args: ({
                name: string;
                ref: boolean;
                assert: (v: any) => boolean;
                message: string;
                normalize: (v: any) => BN;
            } | {
                name: string;
                assert: (v: any) => boolean;
                message: string;
                ref?: undefined;
                normalize?: undefined;
            })[];
            validate(value: any, helpers: any, args: any): any;
        };
        lt: {
            args: ({
                name: string;
                ref: boolean;
                assert: (v: any) => boolean;
                message: string;
                normalize: (v: any) => BN;
            } | {
                name: string;
                assert: (v: any) => boolean;
                message: string;
                ref?: undefined;
                normalize?: undefined;
            })[];
            validate(value: any, helpers: any, args: any): any;
        };
        min: {
            alias: string;
            method(threshold: any): BNSchema;
        };
        max: {
            alias: string;
            method(threshold: any): BNSchema;
        };
        greater: {
            alias: string;
            method(threshold: any): BNSchema;
        };
        less: {
            alias: string;
            method(threshold: any): BNSchema;
        };
        positive: {
            method(): BNSchema;
        };
        negative: {
            method(): BNSchema;
        };
    };
};
