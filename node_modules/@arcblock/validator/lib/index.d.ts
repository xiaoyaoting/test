import BaseJoi, { Root } from 'joi';
import { BNSchema } from './extension/bn';
import { DIDSchema } from './extension/did';
export interface ExtendedRoot extends Root {
    DID(): DIDSchema;
    BN(): BNSchema;
}
export declare const Joi: ExtendedRoot;
export declare const schemas: {
    context: BaseJoi.ObjectSchema<any>;
    tokenInput: BaseJoi.ObjectSchema<any>;
    multiInput: BaseJoi.ArraySchema<any[]>;
    multiSig: BaseJoi.ArraySchema<any[]>;
    foreignToken: BaseJoi.ObjectSchema<any>;
    variableInput: BaseJoi.ObjectSchema<any>;
    nftDisplay: BaseJoi.ObjectSchema<any>;
    nftEndpoint: BaseJoi.ObjectSchema<any>;
    nftIssuer: BaseJoi.ObjectSchema<any>;
    tokenHolder: BaseJoi.AlternativesSchema<any>;
    assetProps: {
        address: DIDSchema;
        moniker: BaseJoi.StringSchema<string>;
        data: BaseJoi.AnySchema<any>;
        readonly: BaseJoi.BooleanSchema<boolean>;
        transferrable: BaseJoi.BooleanSchema<boolean>;
        ttl: BaseJoi.NumberSchema<number>;
        parent: DIDSchema;
        issuer: DIDSchema;
        endpoint: BaseJoi.ObjectSchema<any>;
        display: BaseJoi.ObjectSchema<any>;
        tags: BaseJoi.ArraySchema<any[]>;
    };
    assetSchema: BaseJoi.ObjectSchema<any>;
    factoryProps: {
        address: DIDSchema;
        name: BaseJoi.StringSchema<string>;
        description: BaseJoi.StringSchema<string>;
        settlement: BaseJoi.StringSchema<string>;
        limit: BaseJoi.NumberSchema<number>;
        trustedIssuers: BaseJoi.ArraySchema<any[]>;
        data: BaseJoi.AnySchema<any>;
        display: BaseJoi.ObjectSchema<any>;
        input: BaseJoi.ObjectSchema<any>;
        output: BaseJoi.ObjectSchema<any>;
        hooks: BaseJoi.ArraySchema<any[]>;
    };
    factorySchema: BaseJoi.ObjectSchema<any>;
};
export declare const patterns: {
    txHash: RegExp;
};
