"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sha2Hasher = void 0;
/* eslint-disable @typescript-eslint/ban-ts-comment */
const util_1 = require("@ocap/util");
const hash_js_1 = require("hash.js");
const encode_1 = require("../encode");
const hashFns = {
    sha224: hash_js_1.sha224,
    sha256: hash_js_1.sha256,
    sha384: hash_js_1.sha384,
    sha512: hash_js_1.sha512,
};
/**
 * Sha2 support with different hash length
 *
 * @class
 */
class Sha2Hasher {
    constructor() {
        [224, 256, 384, 512].forEach((x) => {
            const name = `hash${x}`;
            // @ts-ignore
            const hasher = hashFns[`sha${x}`];
            const hashFn = (input, round) => {
                let inputBytes = input;
                try {
                    inputBytes = (0, util_1.toUint8Array)(input);
                }
                catch (err) {
                    // Do nothing
                }
                if (round === 1) {
                    return `0x${hasher().update(inputBytes).digest('hex')}`;
                }
                return hashFn(hashFn(inputBytes, 1), round - 1);
            };
            this[name] = (data, round = 2, encoding = 'hex') => {
                const res = hashFn(data, round);
                return (0, encode_1.encode)(res, encoding);
            };
        });
    }
}
exports.Sha2Hasher = Sha2Hasher;
exports.default = new Sha2Hasher();
