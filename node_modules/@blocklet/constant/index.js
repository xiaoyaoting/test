const fromEntry = (entries) => (v) => {
  const match = Object.entries(entries).find((x) => x[1] === Number(v));
  return match ? match[0] : 'unknown';
};

const toEntry = (entries) => (v) => Object.keys(entries).find((x) => entries[x] === Number(v));

// Blocklet Status

const BlockletStatus = Object.freeze({
  added: 0,
  downloading: 1,
  downloaded: 2, // Deprecated
  installing: 3,
  installed: 4,
  starting: 5,
  running: 6,
  stopping: 7,
  stopped: 8,
  error: 9,
  upgrading: 10,
  restarting: 11, // Deprecated
  corrupted: 12,
  waiting: 13,
  deleted: 14,
});

const fromBlockletStatus = fromEntry(BlockletStatus);
const toBlockletStatus = toEntry(BlockletStatus);

// Blocklet Source

const BlockletSource = Object.freeze({
  // Installed from Blocklet Store
  registry: 0,

  // Installed from local development source folder
  local: 1,

  // Installed from uploading bundle directly
  upload: 2,

  // Installed from a url (similar to Blocklet Store)
  url: 3,

  // Installed by custom creation
  custom: 4,
});

const fromBlockletSource = fromEntry(BlockletSource);
const toBlockletSource = toEntry(BlockletSource);

// Blocklet Group(Type)

const BlockletGroup = Object.freeze({
  // Only static website
  // The website is served by by Blocklet Server at runtime
  static: 'static',

  // The runtime instance is provided by its own backend server
  dapp: 'dapp',

  starter: false, // deprecated

  // This type is used to combine other component blocklets
  // No instance will be spawned at runtime
  gateway: 'gateway',
});

const BLOCKLET_GROUPS = ['dapp', 'static', 'gateway'];

// Blocklet Events

const BlockletEvents = Object.freeze({
  // status updated
  added: 'blocklet.added',
  downloadFailed: 'blocklet.downloadFailed',
  installed: 'blocklet.installed',
  installFailed: 'blocklet.installFailed',
  upgraded: 'blocklet.upgraded',
  upgradeFailed: 'blocklet.upgradedFailed',
  downgraded: 'blocklet.downgraded',
  downgradeFailed: 'blocklet.downgradedFailed',
  removed: 'blocklet.removed',
  started: 'blocklet.started',
  startFailed: 'blocklet.startFailed',
  stopped: 'blocklet.stopped',
  reloaded: 'blocklet.reloaded', // Deprecated
  statusChange: 'blocklet.statusChange',
  dataCleaned: 'blocklet.dataCleaned',

  // state updated
  updated: 'blocklet.updated',
  domainStatus: 'blocklet.domainStatus',
  storeChange: 'blocklet.storeChange',
  appDidChanged: 'blocklet.appDidChanged',

  // purchase
  purchaseChange: 'blocklet.purchaseChange',

  // cert
  certError: 'blocklet.certError',
  certIssued: 'blocklet.certIssued',
});

// Blocklet Interface

const BLOCKLET_INTERFACE_TYPE_WEB = 'web';
const BLOCKLET_INTERFACE_TYPE_SERVICE = 'service';

// Wellknown interface declares an sub-interface under web interface
// The path of the wellknown interface must starts with /.well-known, e.g. /.well-known/acme-challenge)
// The wellknown interface can be mounted to every endpoint of the abtnode and all blocklets on the abtnode
const BLOCKLET_INTERFACE_TYPE_WELLKNOWN = 'wellknown';
const BLOCKLET_INTERFACE_TYPES = [
  BLOCKLET_INTERFACE_TYPE_WEB,
  BLOCKLET_INTERFACE_TYPE_SERVICE,
  BLOCKLET_INTERFACE_TYPE_WELLKNOWN,
];

const BLOCKLET_INTERFACE_PUBLIC = 'publicUrl';
const BLOCKLET_INTERFACE_WELLKNOWN = 'wellknownUrl'; // Deprecated
const BLOCKLET_UI_INTERFACES = [BLOCKLET_INTERFACE_PUBLIC];
const BLOCKLET_STANDARD_INTERFACES = [BLOCKLET_INTERFACE_PUBLIC, BLOCKLET_INTERFACE_WELLKNOWN];

const BLOCKLET_INTERFACE_PROTOCOL_HTTP = 'http';
const BLOCKLET_INTERFACE_PROTOCOL_TCP = 'tcp';
const BLOCKLET_INTERFACE_PROTOCOL_UDP = 'udp';
const BLOCKLET_INTERFACE_PROTOCOLS = [
  BLOCKLET_INTERFACE_PROTOCOL_TCP,
  BLOCKLET_INTERFACE_PROTOCOL_UDP,
  BLOCKLET_INTERFACE_PROTOCOL_HTTP,
];

module.exports = Object.freeze({
  BlockletStatus,
  fromBlockletStatus,
  toBlockletStatus,

  BlockletSource,
  fromBlockletSource,
  toBlockletSource,

  BlockletGroup,
  BLOCKLET_GROUPS,

  BlockletEvents,

  BLOCKLET_PLATFORMS: ['aix', 'darwin', 'freebsd', 'linux', 'openbsd', 'sunos', 'win32'],
  BLOCKLET_ARCHITECTURES: ['arm', 'arm64', 'ia32', 'mips', 'mipsel', 'ppc', 'ppc64', 's390', 's390x', 'x32', 'x64'],

  BLOCKLET_MODES: Object.freeze({
    PRODUCTION: 'production',
    DEVELOPMENT: 'development',
  }),

  BLOCKLET_FACTORY_SHARES: { developer: 0.7, store: 0.3 },

  // interface
  BLOCKLET_INTERFACE_PUBLIC,
  BLOCKLET_INTERFACE_WELLKNOWN, // Deprecated
  BLOCKLET_UI_INTERFACES,
  BLOCKLET_STANDARD_INTERFACES,

  BLOCKLET_INTERFACE_TYPE_WEB,
  BLOCKLET_INTERFACE_TYPE_SERVICE,
  BLOCKLET_INTERFACE_TYPE_WELLKNOWN,
  BLOCKLET_INTERFACE_TYPES,

  BLOCKLET_INTERFACE_PROTOCOL_HTTP,
  BLOCKLET_INTERFACE_PROTOCOL_TCP,
  BLOCKLET_INTERFACE_PROTOCOL_UDP,
  BLOCKLET_INTERFACE_PROTOCOLS,

  BLOCKLET_DYNAMIC_PATH_PREFIX: '*',
  BLOCKLET_DEFAULT_PORT_NAME: 'BLOCKLET_PORT',
  BLOCKLET_DEFAULT_PATH_REWRITE: '/',

  // bundle
  BLOCKLET_RELEASE_FOLDER: '.blocklet/release',
  BLOCKLET_RELEASE_FILE: 'blocklet.json',
  BLOCKLET_BUNDLE_FOLDER: '.blocklet/bundle',
  BLOCKLET_BUNDLE_FILE: 'blocklet.zip',
  BLOCKLET_ENTRY_FILE: 'blocklet.js',
  BLOCKLET_META_FILE: 'blocklet.yml',
  BLOCKLET_META_FILE_ALT: 'blocklet.yaml',
  BLOCKLET_PREFERENCE_FILE: 'blocklet.prefs.json',
  BLOCKLET_PREFERENCE_PREFIX: 'prefs.',

  BLOCKLET_DEFAULT_VERSION: '1.0.0',

  BLOCKLET_UPLOADS_DIR: '__uploads',

  BLOCKLET_LATEST_SPEC_VERSION: '1.2.7',
  BLOCKLET_LATEST_REQUIREMENT_SERVER: '>=1.7.0',
  BLOCKLET_LATEST_REQUIREMENT_ABTNODE: '>=1.5.15', // Deprecated

  BLOCKLET_CONFIGURABLE_KEY: {
    // APP Config Key that start with BLOCKLET_ cannot set to child component
    BLOCKLET_CLUSTER_SIZE: 'BLOCKLET_CLUSTER_SIZE',
    BLOCKLET_APP_NAME: 'BLOCKLET_APP_NAME',
    BLOCKLET_APP_DESCRIPTION: 'BLOCKLET_APP_DESCRIPTION',
    BLOCKLET_APP_SK: 'BLOCKLET_APP_SK',
    BLOCKLET_APP_LOGO: 'BLOCKLET_APP_LOGO', // deprecated
    BLOCKLET_APP_LOGO_SQUARE: 'BLOCKLET_APP_LOGO_SQUARE',
    BLOCKLET_APP_LOGO_RECT: 'BLOCKLET_APP_LOGO_RECT',
    BLOCKLET_APP_LOGO_FAVICON: 'BLOCKLET_APP_LOGO_FAVICON',
    BLOCKLET_APP_URL: 'BLOCKLET_APP_URL',
    BLOCKLET_PASSPORT_COLOR: 'BLOCKLET_PASSPORT_COLOR',
    BLOCKLET_WALLET_TYPE: 'BLOCKLET_WALLET_TYPE',
    BLOCKLET_DELETABLE: 'BLOCKLET_DELETABLE',
    BLOCKLET_APP_SPACE_ENDPOINT: 'BLOCKLET_APP_SPACE_ENDPOINT',
    // 保存 did spaces 的地址
    BLOCKLET_APP_SPACES_URL: 'BLOCKLET_APP_SPACES_URL',

    // Component Key
    COMPONENT_ACCESS_WHO: 'COMPONENT_ACCESS_WHO',
  },

  BLOCKLET_APP_SPACE_ENDPOINTS: {
    REQUIRED: 'required',
    OPTIONAL: 'optional',
  },

  CHAIN_INFO_CONFIG: {
    CHAIN_TYPE: ['type', 'arcblock'],
    CHAIN_ID: ['id', 'none'],
    CHAIN_HOST: ['host', 'none'],
  },
});
