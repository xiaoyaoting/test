"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
const get_1 = __importDefault(require("lodash/get"));
const constants_1 = __importDefault(require("./constants"));
const { BLOCKLET_BUNDLE_FOLDER, BlockletGroup } = constants_1.default;
const validateBlockletEntry = (dir, meta) => {
    const { main, group } = meta;
    if (group === BlockletGroup.dapp) {
        // backward compatible
        if (!fs_1.default.existsSync(path_1.default.join(dir, 'blocklet.js')) &&
            !fs_1.default.existsSync(path_1.default.join(dir, BLOCKLET_BUNDLE_FOLDER, 'blocklet.js'))) {
            // backward compatible
            if ((0, isEmpty_1.default)(meta.engine)) {
                throw new Error(`DApp ${meta.name} may be corrupted or not properly bundled: missing blocklet.js`);
            }
            const engine = (0, get_1.default)(meta, 'engine', null);
            if (engine) {
                if (!Array.isArray(engine)) {
                    if (!engine.interpreter) {
                        throw new Error(`DApp ${meta.name} may be corrupted or not properly configured: missing engine.interpreter`);
                    }
                    return;
                }
                engine.forEach((r) => {
                    ['interpreter', 'platform'].forEach((k) => {
                        if (!(0, get_1.default)(r, k, null)) {
                            throw new Error(`DApp ${meta.name} may be corrupted or not properly configured: missing engine.${k}`);
                        }
                    });
                });
                const platform = os_1.default.platform();
                if (!engine.find((r) => r.platform === platform)) {
                    throw new Error(`DApp ${meta.name} may be corrupted or not properly configured: no engine run on ${platform}`);
                }
            }
        }
        return;
    }
    if (group === BlockletGroup.static) {
        if (!fs_1.default.existsSync(path_1.default.join(dir, main))) {
            throw new Error('Static blocklet may be corrupted or not properly configured: missing main folder');
        }
        return;
    }
    if (group === BlockletGroup.gateway) {
        return;
    }
    throw new Error(`Unsupported blocklet type ${group}`);
};
module.exports = validateBlockletEntry;
