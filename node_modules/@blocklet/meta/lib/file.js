"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.update = exports.select = exports.list = void 0;
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const constants_1 = __importDefault(require("./constants"));
const { BLOCKLET_META_FILE, BLOCKLET_META_FILE_ALT } = constants_1.default;
const list = [BLOCKLET_META_FILE, BLOCKLET_META_FILE_ALT];
exports.list = list;
const select = (dir, { throwOnError = true } = {}) => {
    const metaFile = path_1.default.join(dir, BLOCKLET_META_FILE);
    const metaFileAlt = path_1.default.join(dir, BLOCKLET_META_FILE_ALT);
    if (fs_extra_1.default.existsSync(metaFile) === false && fs_extra_1.default.existsSync(metaFileAlt) === false) {
        if (throwOnError) {
            throw new Error('blocklet.yml not found, please migrate your blocklet meta by run `abtnode blocklet:migrate`');
        }
        return '';
    }
    const metaToUpdate = fs_extra_1.default.existsSync(metaFile) ? metaFile : fs_extra_1.default.existsSync(metaFileAlt) ? metaFileAlt : null; // eslint-disable-line
    return metaToUpdate;
};
exports.select = select;
const update = (file, meta, { fix = true } = {}) => {
    if (!fix) {
        fs_extra_1.default.writeFileSync(file, js_yaml_1.default.dump(meta, { sortKeys: false, skipInvalid: true }));
        return;
    }
    delete meta.path;
    // @ts-ignore
    delete meta.folder;
    delete meta.htmlAst;
    delete meta.stats;
    delete meta.nftFactory;
    delete meta.signatures;
    delete meta.lastPublishedAt;
    if (!meta.specVersion) {
        meta.specVersion = '1.0.0';
    }
    fs_extra_1.default.writeFileSync(file, js_yaml_1.default.dump(meta, { sortKeys: false, skipInvalid: true }));
};
exports.update = update;
exports.default = {
    list,
    select,
    update,
};
