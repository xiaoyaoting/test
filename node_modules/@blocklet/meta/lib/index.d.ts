/// <reference types="node" />
import constants from './constants';
import parse from './parse';
import toBlockletDid from './did';
import getBlockletWallet from './wallet';
import getBlockletInfo from './info';
import getBlockletEngine from './engine';
import { validateMeta, fixAndValidateService } from './validate';
import { formatPerson, parsePerson, fixPerson, fixInterfaces, fixService } from './fix';
import { list, select, update } from './file';
import verifyMultiSig from './verify-multi-sig';
export { constants };
export { list };
export { select };
export { update };
export { parse };
export { validateMeta };
export { fixAndValidateService };
export { formatPerson };
export { parsePerson };
export { fixPerson };
export { fixInterfaces };
export { fixService };
export { toBlockletDid };
export { getBlockletWallet };
export { getBlockletInfo };
export { getBlockletEngine };
export { verifyMultiSig };
declare const _default: {
    constants: any;
    list: any[];
    select: (dir: string, { throwOnError }?: {
        throwOnError?: boolean;
    }) => string;
    update: (file: string, meta: import("./types").TBlockletMeta, { fix }?: {
        fix?: boolean;
    }) => void;
    parse: (dir: string, { ensureMain, ensureFiles, ensureDist, ensureComponentStore, extraRawAttrs, schemaOptions, defaultStoreUrl, fix, }?: {
        ensureMain?: boolean;
        ensureFiles?: boolean;
        ensureDist?: boolean;
        ensureComponentStore?: boolean;
        extraRawAttrs?: any;
        schemaOptions?: any;
        enableDefaults?: boolean;
        extraAttrSpec?: any;
        defaultStoreUrl?: string | ((component: import("./types").TComponent) => string);
        fix?: boolean;
    }) => import("./types").TBlockletMeta;
    validateMeta: (meta: any, { ensureMain, ensureFiles, ensureDist, ensureComponentStore, schemaOptions, }?: {
        ensureMain?: boolean;
        ensureFiles?: boolean;
        ensureDist?: boolean;
        ensureComponentStore?: boolean;
        schemaOptions?: any;
    }) => import("./types").TBlockletMeta;
    fixAndValidateService: (meta: import("./types").TBlockletMeta) => import("./types").TBlockletMeta;
    formatPerson: (person: string | Record<string, any>) => string;
    parsePerson: (person: string) => any;
    fixPerson: (data: any) => any;
    fixInterfaces: (meta: any, removeMerged?: boolean) => any;
    fixService: (meta: import("./types").TBlockletMeta) => import("./types").TBlockletMeta;
    toBlockletDid: {
        (name: string | Buffer): string;
        toExternalBlocklet(name: string, userDid: string, { didOnly, nameOnly }?: {
            didOnly?: boolean;
            nameOnly?: boolean;
        }): string | {
            did: string;
            name: string;
        };
    };
    getBlockletWallet: (blockletDid: string, nodeSk?: string, type?: import("@arcblock/did").DIDType, index?: number) => import("@ocap/wallet").WalletObject<string>;
    getBlockletInfo: (state: import("@abtnode/client").BlockletState, nodeSk?: string, { returnWallet }?: {
        returnWallet?: boolean;
    }) => {
        did: string;
        name: string;
        version: string;
        description: string;
        passportColor?: string;
        appUrl: string;
        wallet?: import("@ocap/wallet").WalletObject<string>;
    };
    getBlockletEngine: (meta: import("./types").TBlockletMeta) => import("./types").TEngine;
    verifyMultiSig: (blockletMeta: import("./types").TBlockletMeta) => boolean;
};
export default _default;
