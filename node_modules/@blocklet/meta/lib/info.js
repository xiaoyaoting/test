"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const get_1 = __importDefault(require("lodash/get"));
const wallet_1 = __importDefault(require("./wallet"));
const util_1 = require("./util");
const getBlockletInfo = (state, nodeSk, { returnWallet = true } = {}) => {
    if (!state || typeof state !== 'object' || !Array.isArray(state.environments) || !(0, get_1.default)(state, 'meta.did')) {
        throw new Error('Blocklet state must be an object');
    }
    const { environments, configs = [] } = state;
    const envs = [...configs, ...environments];
    const customDescription = envs.find((x) => x.key === 'BLOCKLET_APP_DESCRIPTION');
    const customPassportColor = envs.find((x) => x.key === 'BLOCKLET_PASSPORT_COLOR');
    const customAppUrl = envs.find((x) => x.key === 'BLOCKLET_APP_URL');
    const { did, version } = state.meta;
    const name = (0, util_1.getDisplayName)(state);
    const description = (0, get_1.default)(customDescription, 'value', state.meta.description);
    const passportColor = (0, get_1.default)(customPassportColor, 'value', 'auto');
    const appUrl = (0, get_1.default)(customAppUrl, 'value', '');
    if (!returnWallet) {
        return {
            did,
            version,
            name,
            description,
            appUrl,
        };
    }
    const customSk = envs.find((x) => x.key === 'BLOCKLET_APP_SK');
    const customType = envs.find((x) => x.key === 'BLOCKLET_WALLET_TYPE');
    let type;
    if (customType && customType.value === 'eth') {
        type = customType.value;
    }
    let wallet = null;
    if (customSk && customSk.value && customType) {
        wallet = (0, wallet_1.default)(customSk.value, null, type);
    }
    else if (customSk && customSk.value) {
        wallet = (0, wallet_1.default)(customSk.value);
    }
    else {
        if (!nodeSk || typeof nodeSk !== 'string') {
            throw new Error('Node secret key must be a string');
        }
        if (customType) {
            wallet = (0, wallet_1.default)(state.meta.did, nodeSk, type);
        }
        else {
            wallet = (0, wallet_1.default)(state.meta.did, nodeSk);
        }
    }
    return {
        did,
        version,
        name,
        description,
        passportColor,
        appUrl,
        wallet,
    };
};
module.exports = getBlockletInfo;
