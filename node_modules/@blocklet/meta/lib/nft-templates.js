"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBlockletPurchaseTemplate = void 0;
const url_join_1 = __importDefault(require("url-join"));
const getBlockletPurchaseTemplate = (serviceUrl = 'https://registry.arcblock.io') => ({
    type: 'vc',
    value: {
        '@context': 'https://schema.arcblock.io/v0.1/context.jsonld',
        id: '{{input.id}}',
        tag: ['{{data.did}}'],
        type: ['VerifiableCredential', 'PurchaseCredential', 'NFTCertificate', 'BlockletPurchaseCredential'],
        issuer: {
            id: '{{ctx.issuer.id}}',
            pk: '{{ctx.issuer.pk}}',
            name: '{{ctx.issuer.name}}',
        },
        issuanceDate: '{{input.issuanceDate}}',
        credentialSubject: {
            id: '{{ctx.owner}}',
            sn: '{{ctx.id}}',
            purchased: {
                blocklet: {
                    id: '{{data.did}}',
                    url: '{{{data.url}}}',
                    name: '{{data.name}}',
                },
            },
            display: {
                type: 'url',
                content: (0, url_join_1.default)(serviceUrl, '/api/nft/display'), // accept asset-did in query param
            },
        },
        credentialStatus: {
            id: (0, url_join_1.default)(serviceUrl, '/api/nft/status'),
            type: 'NFTStatusList2021',
            scope: 'public',
        },
        proof: {
            type: '{{input.proofType}}',
            created: '{{input.issuanceDate}}',
            proofPurpose: 'assertionMethod',
            jws: '{{input.signature}}',
        },
    },
});
exports.getBlockletPurchaseTemplate = getBlockletPurchaseTemplate;
exports.default = {
    getBlockletPurchaseTemplate,
};
