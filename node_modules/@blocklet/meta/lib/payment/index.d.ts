import v2 from './v2';
export declare const createNftFactoryItx: ({ meta, tokens, shares, issuers, serviceUrl, }: {
    meta: import("../types").TBlockletMeta;
    tokens: Pick<import("@abtnode/client").BlockletPaymentPrice, "address" | "value">[];
    shares: {
        value: number;
        address: string;
    }[];
    issuers: string[];
    serviceUrl: string;
}) => {
    name: string;
    description: string;
    settlement: string;
    limit: number;
    trustedIssuers: string[];
    input: {
        tokens: Pick<import("@abtnode/client").BlockletPaymentPrice, "address" | "value">[];
        assets: any[];
        variables: any[];
    };
    output: {
        issuer: string;
        parent: string;
        moniker: string;
        readonly: boolean;
        transferrable: boolean;
        data: {
            type: string;
            value: {
                '@context': string;
                id: string;
                tag: string[];
                type: string[];
                issuer: {
                    id: string;
                    pk: string;
                    name: string;
                };
                issuanceDate: string;
                credentialSubject: {
                    id: string;
                    sn: string;
                    purchased: {
                        blocklet: {
                            id: string;
                            url: string;
                            name: string;
                        };
                    };
                    display: {
                        type: string;
                        content: string;
                    };
                };
                credentialStatus: {
                    id: string;
                    type: string;
                    scope: string;
                };
                proof: {
                    type: string;
                    created: string;
                    proofPurpose: string;
                    jws: string;
                };
            };
        };
    };
    data: {
        type: string;
        value: {
            did: string;
            url: string;
            name: string;
        };
    };
    hooks: {
        name: string;
        type: string;
        hook: string;
    }[];
};
export { v2 };
declare const _default: {
    createNftFactoryItx: ({ meta, tokens, shares, issuers, serviceUrl, }: {
        meta: import("../types").TBlockletMeta;
        tokens: Pick<import("@abtnode/client").BlockletPaymentPrice, "address" | "value">[];
        shares: {
            value: number;
            address: string;
        }[];
        issuers: string[];
        serviceUrl: string;
    }) => {
        name: string;
        description: string;
        settlement: string;
        limit: number;
        trustedIssuers: string[];
        input: {
            tokens: Pick<import("@abtnode/client").BlockletPaymentPrice, "address" | "value">[];
            assets: any[];
            variables: any[];
        };
        output: {
            issuer: string;
            parent: string;
            moniker: string;
            readonly: boolean;
            transferrable: boolean;
            data: {
                type: string;
                value: {
                    '@context': string;
                    id: string;
                    tag: string[];
                    type: string[];
                    issuer: {
                        id: string;
                        pk: string;
                        name: string;
                    };
                    issuanceDate: string;
                    credentialSubject: {
                        id: string;
                        sn: string;
                        purchased: {
                            blocklet: {
                                id: string;
                                url: string;
                                name: string;
                            };
                        };
                        display: {
                            type: string;
                            content: string;
                        };
                    };
                    credentialStatus: {
                        id: string;
                        type: string;
                        scope: string;
                    };
                    proof: {
                        type: string;
                        created: string;
                        proofPurpose: string;
                        jws: string;
                    };
                };
            };
        };
        data: {
            type: string;
            value: {
                did: string;
                url: string;
                name: string;
            };
        };
        hooks: {
            name: string;
            type: string;
            hook: string;
        }[];
    };
    v2: {
        createNftFactoryItx: ({ blockletMeta, ocapClient, issuers, storeUrl, }: {
            blockletMeta: import("../types").TBlockletMeta;
            ocapClient: any;
            issuers: string[];
            storeUrl: string;
        }) => Promise<{
            itx: any;
            stores: {
                id: string;
                url: string;
            }[];
            shares: {
                amount: string;
                tokenAddress: string;
                accountAddress: string;
            }[];
        }>;
        verifyPaymentIntegrity: ({ integrity: expected, blockletMeta, ocapClient, storeId, }: {
            integrity: string;
            blockletMeta: import("../types").TBlockletMeta;
            ocapClient: any;
            storeId: string;
        }) => Promise<string>;
        verifyNftFactory: ({ factoryState, signerWallet, }: {
            factoryState: {
                data: {
                    value: string;
                };
                input?: any;
                address?: string;
                hooks?: {
                    type: string;
                    hook: string;
                }[];
            };
            signerWallet: any;
        }) => Promise<any>;
        checkFreeBlocklet: (blockletMeta: import("../types").TBlockletMeta) => Promise<boolean>;
        version: string;
        _test: {
            getPriceTokens: (meta: any, ocapClient: any) => Promise<any>;
            getFactoryInput: (inputTokens: {
                address: string;
                value: string | number;
                decimal: number;
            }[], { formatToken }?: {
                formatToken?: boolean;
            }) => {
                tokens: {
                    address: string;
                    value: string | number;
                    decimal: number;
                }[];
                assets: [];
                variables: [];
            };
            getPaymentIntegrity: ({ contract, factoryInput, storeComponents, meta, client, storeId, }: {
                contract?: string;
                factoryInput?: any;
                storeComponents?: any;
                meta?: any;
                client?: any;
                storeId?: string;
            }) => Promise<string>;
            getComponents: (inputMeta: any) => Promise<{
                components: import("./v2").Component[];
                stores: import("./v2").Store[];
            }>;
            getContract: ({ meta, priceTokens, components, }: {
                meta: import("../types").TBlockletMeta;
                priceTokens: {
                    decimal: number;
                }[];
                components: any;
            }) => Promise<{
                code: string;
                shares: {
                    amount: string;
                    tokenAddress: string;
                    accountAddress: string;
                }[];
            }>;
        };
    };
};
export default _default;
