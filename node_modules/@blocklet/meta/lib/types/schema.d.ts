export interface TAuthConfig {
    allowSwitchProfile?: boolean;
    blockUnauthenticated?: boolean;
    blockUnauthorized?: boolean;
    ignoreUrls?: string[];
    profileFields?: ('fullName' | 'email' | 'avatar' | 'phone')[];
    whoCanAccess?: 'owner' | 'invited' | 'all';
}
export interface TBlockletMeta {
    author?: TPerson;
    bundleDid?: string;
    bundleName?: string;
    capabilities?: {
        clusterMode?: boolean;
        component?: boolean;
        didSpace?: 'required' | 'optional';
        navigation?: boolean;
    };
    community?: string;
    components?: {
        description?: TDescription;
        mountPoint?: TMountPoint;
        mountPoints?: {
            child: {
                interfaceName: string;
            };
            root: {
                interfaceName: string;
                prefix: string;
            };
            services?: TService[];
        }[];
        name: TBlockletName;
        resolved?: string | string;
        services?: TService[];
        source?: {
            url: string | string[];
        } | {
            name: TBlockletName;
            store?: string | string[];
            version?: 'latest' | string;
        };
        title?: TTitle;
    }[];
    contributors?: TPerson[];
    copyright?: {
        owner?: string;
        year?: string | number;
    };
    description: TDescription;
    did: string;
    dist?: TDist;
    documentation?: string;
    engine?: TEngine | TEngine[];
    environments?: TEnvironment[];
    files?: string[];
    gitHash?: string;
    group: 'dapp' | 'static' | 'gateway';
    homepage?: string;
    htmlAst?: any;
    interfaces?: TInterface[];
    keywords?: string | string[];
    lastPublishedAt?: string;
    license?: string;
    logo?: string;
    logoUrl?: string;
    main: string;
    maintainers?: TPerson[];
    name: TBlockletName;
    navigation?: TNavigation;
    nftFactory?: string;
    path?: string;
    payment?: {
        componentPrice?: {
            parentPriceRange?: number[];
            type: 'fixed' | 'percentage';
            value: number;
        }[];
        price?: {
            address: string;
            value: number;
        }[];
        share?: {
            address: string;
            name: string;
            value: number;
        }[];
    };
    repository?: string | {
        directory?: string;
        type: 'git' | 'https' | 'svn';
        url: string;
    };
    requirements?: {
        abtnode?: string;
        cpu?: '*' | 'arm' | 'arm64' | 'ia32' | 'mips' | 'mipsel' | 'ppc' | 'ppc64' | 's390' | 's390x' | 'x32' | 'x64' | ('arm' | 'arm64' | 'ia32' | 'mips' | 'mipsel' | 'ppc' | 'ppc64' | 's390' | 's390x' | 'x32' | 'x64')[];
        fuels?: {
            address?: string;
            endpoint: string;
            reason: string;
            value: string;
        }[];
        nodejs?: string;
        os?: '*' | 'aix' | 'darwin' | 'freebsd' | 'linux' | 'openbsd' | 'sunos' | 'win32' | ('aix' | 'darwin' | 'freebsd' | 'linux' | 'openbsd' | 'sunos' | 'win32')[];
        server?: string;
    };
    screenshots?: string[];
    scripts?: TScripts;
    signatures?: TSignature[];
    specVersion?: string;
    stats?: TStats;
    storeId?: string;
    support?: string | string;
    tags?: string | string[];
    theme?: TTheme;
    timeout?: {
        start?: number;
    };
    title?: TTitle | '';
    version: string;
}
export type TBlockletName = string;
export interface TComponent {
    description?: TDescription;
    mountPoint?: TMountPoint;
    mountPoints?: {
        child: {
            interfaceName: string;
        };
        root: {
            interfaceName: string;
            prefix: string;
        };
        services?: TService[];
    }[];
    name: TBlockletName;
    resolved?: string | string;
    services?: TService[];
    source?: {
        url: string | string[];
    } | {
        name: TBlockletName;
        store?: string | string[];
        version?: 'latest' | string;
    };
    title?: TTitle;
}
export type TDescription = string;
export interface TDist {
    integrity: string;
    size?: number;
    tarball: string | string;
}
export interface TEndpoint {
    meta?: {
        params?: {
            description: string;
            name: string;
        }[];
        payable?: boolean;
        vcType?: string;
    };
    path: string;
    type: string;
}
export interface TEngine {
    args?: string[];
    interpreter?: 'binary' | 'node';
    platform?: 'aix' | 'darwin' | 'freebsd' | 'linux' | 'openbsd' | 'sunos' | 'win32';
    script: string;
}
export interface TEnvironment {
    default?: string;
    description: string;
    name: TEnvironmentName;
    required?: boolean;
    secure?: boolean;
    shared?: boolean;
    validation?: string;
}
export type TEnvironmentName = string;
export interface TInterface {
    endpoints?: TEndpoint[];
    name: string;
    path?: string;
    port?: string | {
        external: number;
        internal: string;
    };
    prefix?: string;
    protocol?: 'tcp' | 'udp' | 'http';
    services?: TService[];
    type: 'web' | 'service' | 'wellknown';
}
export type TLogo = string;
export type TMountPoint = string;
export type TNavigation = TNavigationItem[];
export interface TNavigationItem {
    component?: string;
    icon?: string;
    id?: string;
    items?: {
        component?: string;
        icon?: string;
        id?: string;
        link?: string | {
            /**
             * Unknown Property
             */
            [x: string]: string;
        };
        role?: string[];
        section?: string[];
        title: string | {
            /**
             * Unknown Property
             */
            [x: string]: string;
        };
        visible?: boolean;
    }[];
    link?: string | {
        /**
         * Unknown Property
         */
        [x: string]: string;
    };
    role?: string[];
    section?: string[];
    title: string | {
        /**
         * Unknown Property
         */
        [x: string]: string;
    };
    visible?: boolean;
}
export interface TPerson {
    email?: string;
    name: string;
    url?: string;
}
export interface TScripts {
    dev?: string;
    e2eDev?: string;
    postInstall?: string;
    postStart?: string;
    preConfig?: string;
    preInstall?: string;
    preStart?: string;
    preStop?: string;
    preUninstall?: string;
}
export interface TService {
    /**
     * Any Property
     */
    [x: string]: any;
    config?: object;
    name: string;
}
export interface TSignature {
    appended?: string[];
    created: string;
    delegatee?: string;
    delegateePk?: string;
    delegation?: string;
    excludes?: string[];
    name: string;
    pk: string;
    sig: string;
    signer: string;
    type: string;
}
export interface TStats {
    downloads?: number;
    purchases?: number;
    star?: number;
}
export interface TTheme {
    background?: string | {
        default?: string;
        footer?: string;
        header?: string;
    };
}
export type TTitle = string;
