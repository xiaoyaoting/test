import { TBlockletMeta, TComponent } from './types';
declare const validateUrl: (url: string, expectedHttpResTypes?: string[]) => Promise<boolean>;
declare const getBlockletMetaByUrl: (url: string) => Promise<TBlockletMeta>;
declare const getBlockletMetaFromUrl: (url: string, { validateFn, returnUrl, ensureTarball, logger, }?: {
    validateFn?: Function;
    returnUrl?: boolean;
    ensureTarball?: boolean;
    logger?: any;
}) => Promise<any>;
declare const getBlockletMetaFromUrls: (urls: string[], { validateFn, returnUrl, ensureTarball, logger, }?: {
    validateFn?: Function;
    returnUrl?: boolean;
    ensureTarball?: boolean;
    logger?: any;
}) => Promise<any>;
/**
 * @param {*} config defined in componentSchema in blocklet meta schema
 */
declare const getSourceUrlsFromConfig: (config: TComponent & any) => string[];
export { validateUrl };
export { getBlockletMetaByUrl };
export { getBlockletMetaFromUrl };
export { getBlockletMetaFromUrls };
export { getSourceUrlsFromConfig };
declare const _default: {
    validateUrl: (url: string, expectedHttpResTypes?: string[]) => Promise<boolean>;
    getBlockletMetaByUrl: (url: string) => Promise<TBlockletMeta>;
    getBlockletMetaFromUrl: (url: string, { validateFn, returnUrl, ensureTarball, logger, }?: {
        validateFn?: Function;
        returnUrl?: boolean;
        ensureTarball?: boolean;
        logger?: any;
    }) => Promise<any>;
    getBlockletMetaFromUrls: (urls: string[], { validateFn, returnUrl, ensureTarball, logger, }?: {
        validateFn?: Function;
        returnUrl?: boolean;
        ensureTarball?: boolean;
        logger?: any;
    }) => Promise<any>;
    getSourceUrlsFromConfig: (config: any) => string[];
};
export default _default;
