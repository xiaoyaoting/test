import { BlockletState, ComponentState } from '@abtnode/client';
import { Request } from 'express';
import { TBlockletMeta, TEnvironment } from './types';
type TConfig = TEnvironment & {
    key: string;
};
declare const getComponentId: (component?: {
    meta?: {
        did?: string;
    };
}, ancestors?: Array<{
    meta?: {
        did?: string;
    };
}>) => string;
declare const getComponentName: (component?: {
    meta?: {
        name?: string;
    };
}, ancestors?: Array<{
    meta?: {
        name?: string;
    };
}>) => string;
declare const getComponentBundleId: (component: {
    meta: {
        bundleName: string;
        version: string;
    };
}) => string;
/**
 * a => ''
 * @a/b => ''
 * a/b => a
 * @a/b/c => @a/b
 * a/@b/c => a
 * @a/b/@c/d => @a/b
 * @a/b/@c/d/e => @a/b/@c/d
 * @a/b/@c/d/@e/f => @a/b/@c/d
 */
declare const getParentComponentName: (name?: string) => string;
declare const forEachBlocklet: (blocklet: BlockletState | ComponentState, cb: Function, { parallel, concurrencyLimit, sync, params: inputParams, _parent, _root, _level, _tasks: inputTasks, _ancestors, _limit, }?: {
    parallel?: boolean;
    concurrencyLimit?: number;
    sync?: boolean;
    params?: any;
    _parent?: any;
    _root?: any;
    _level?: number;
    _tasks?: any;
    _ancestors?: any[];
    _limit?: (fn: () => void) => void;
}) => Promise<unknown>;
declare const forEachBlockletSync: (blocklet: any, cb: Function) => Promise<unknown>;
declare const forEachChild: (blocklet: any, cb: Function, params?: any) => Promise<any>;
declare const forEachChildSync: (blocklet: BlockletState, cb: Function) => Promise<any>;
declare const findComponentById: (blocklet: BlockletState | ComponentState, componentId: string | Array<string>, { _ancestors, returnAncestors, }?: {
    _ancestors?: any[];
    returnAncestors?: boolean;
}) => any;
declare const isEnvShareable: (env?: TConfig) => boolean;
declare const getSharedConfigObj: (component: BlockletState, ancestors?: any[]) => any;
declare const isPreferenceKey: (x: TConfig) => Boolean;
declare const getAppMissingConfigs: (blocklet?: any) => any[];
declare const getComponentMissingConfigs: (component?: any, ancestors?: any[]) => any[];
declare const isFreeBlocklet: (meta: TBlockletMeta) => boolean;
declare const isFreeComponent: (meta: TBlockletMeta) => boolean;
declare const isComponentBlocklet: (meta?: TBlockletMeta) => boolean;
declare const wipeSensitiveData: (blocklet?: BlockletState) => BlockletState;
declare const isDeletableBlocklet: (blocklet?: BlockletState) => boolean;
declare const hasRunnableComponent: (blocklet: BlockletState) => boolean;
/**
 * 获取 blocklet 的 name
 * @param {Object} blocklet 应用数据
 * @param {Boolean} onlyUseMeta 优先使用应用元数据的name
 * @returns blocklet display name
 */
declare const getDisplayName: (blocklet: BlockletState, onlyUseMeta?: boolean) => string;
declare const fixBlockletStatus: (blocklet?: BlockletState) => void;
declare const findWebInterface: (blocklet?: BlockletState | TBlockletMeta) => any;
declare const findServiceFromMeta: (meta?: TBlockletMeta, ServiceName?: string) => any;
declare const getWhoCanAccess: (blocklet?: BlockletState) => any;
declare const getConnectAppUrl: ({ request, baseUrl }: {
    request: Partial<Request>;
    baseUrl: string;
}) => string;
declare const replaceSlotToIp: (url?: string, ip?: string) => string;
declare const urlFriendly: (name: string) => string;
declare const getChainInfo: (env: Record<string, string>) => Record<string, string>;
declare const isExternalBlocklet: (blocklet?: BlockletState) => boolean;
declare const getRolesFromAuthConfig: (config: {
    whoCanAccess: string;
}) => Array<string>;
export { isFreeBlocklet };
export { isFreeComponent };
export { isComponentBlocklet };
export { forEachBlocklet };
export { forEachBlockletSync };
export { forEachChild };
export { forEachChildSync };
export { isDeletableBlocklet };
export { getSharedConfigObj };
export { getAppMissingConfigs };
export { getComponentMissingConfigs };
export { isEnvShareable };
export { wipeSensitiveData };
export { hasRunnableComponent };
export { getDisplayName };
export { fixBlockletStatus };
export { findWebInterface };
export { findServiceFromMeta };
export { getWhoCanAccess };
export { replaceSlotToIp };
export { urlFriendly };
export { getComponentId };
export { getComponentName };
export { getComponentBundleId };
export { findComponentById };
export { getParentComponentName };
export { getConnectAppUrl };
export { getChainInfo };
export { isExternalBlocklet };
export { isPreferenceKey };
export { getRolesFromAuthConfig };
declare const _default: {
    isFreeBlocklet: (meta: TBlockletMeta) => boolean;
    isFreeComponent: (meta: TBlockletMeta) => boolean;
    isComponentBlocklet: (meta?: TBlockletMeta) => boolean;
    forEachBlocklet: (blocklet: BlockletState | ComponentState, cb: Function, { parallel, concurrencyLimit, sync, params: inputParams, _parent, _root, _level, _tasks: inputTasks, _ancestors, _limit, }?: {
        parallel?: boolean;
        concurrencyLimit?: number;
        sync?: boolean;
        params?: any;
        _parent?: any;
        _root?: any;
        _level?: number;
        _tasks?: any;
        _ancestors?: any[];
        _limit?: (fn: () => void) => void;
    }) => Promise<unknown>;
    forEachBlockletSync: (blocklet: any, cb: Function) => Promise<unknown>;
    forEachChild: (blocklet: any, cb: Function, params?: any) => Promise<any>;
    forEachChildSync: (blocklet: BlockletState, cb: Function) => Promise<any>;
    isDeletableBlocklet: (blocklet?: BlockletState) => boolean;
    getSharedConfigObj: (component: BlockletState, ancestors?: any[]) => any;
    getAppMissingConfigs: (blocklet?: any) => any[];
    getComponentMissingConfigs: (component?: any, ancestors?: any[]) => any[];
    isEnvShareable: (env?: TConfig) => boolean;
    wipeSensitiveData: (blocklet?: BlockletState) => BlockletState;
    hasRunnableComponent: (blocklet: BlockletState) => boolean;
    getDisplayName: (blocklet: BlockletState, onlyUseMeta?: boolean) => string;
    fixBlockletStatus: (blocklet?: BlockletState) => void;
    findWebInterface: (blocklet?: TBlockletMeta | BlockletState) => any;
    findServiceFromMeta: (meta?: TBlockletMeta, ServiceName?: string) => any;
    getWhoCanAccess: (blocklet?: BlockletState) => any;
    replaceSlotToIp: (url?: string, ip?: string) => string;
    urlFriendly: (name: string) => string;
    getComponentId: (component?: {
        meta?: {
            did?: string;
        };
    }, ancestors?: {
        meta?: {
            did?: string;
        };
    }[]) => string;
    getComponentName: (component?: {
        meta?: {
            name?: string;
        };
    }, ancestors?: {
        meta?: {
            name?: string;
        };
    }[]) => string;
    getComponentBundleId: (component: {
        meta: {
            bundleName: string;
            version: string;
        };
    }) => string;
    findComponentById: (blocklet: BlockletState | ComponentState, componentId: string | string[], { _ancestors, returnAncestors, }?: {
        _ancestors?: any[];
        returnAncestors?: boolean;
    }) => any;
    getParentComponentName: (name?: string) => string;
    getConnectAppUrl: ({ request, baseUrl }: {
        request: Partial<Request<import("express-serve-static-core").ParamsDictionary, any, any, import("qs").ParsedQs, Record<string, any>>>;
        baseUrl: string;
    }) => string;
    getChainInfo: (env: Record<string, string>) => Record<string, string>;
    isExternalBlocklet: (blocklet?: BlockletState) => boolean;
    isPreferenceKey: (x: TConfig) => Boolean;
    getRolesFromAuthConfig: (config: {
        whoCanAccess: string;
    }) => string[];
};
export default _default;
