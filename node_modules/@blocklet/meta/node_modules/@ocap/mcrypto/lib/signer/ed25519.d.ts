import { BytesType, EncodingType, KeyPairType } from '@ocap/util';
import BaseSigner from '../protocols/signer';
/**
 * Signer implementation for ed25519, based on `tweetnacl`
 *
 * @class Ed25519Signer
 */
declare class Ed25519Signer extends BaseSigner {
    constructor();
    /**
     * @public
     * @typedefKeyPairType
     * @prop {string} publicKey - publicKey in hex format
     * @prop {string} secretKey - secretKey in hex format
     * @memberof Ed25519Signer
     */
    /**
     * Generate random secret/public key pair
     *
     * @param {Buffer|Uint8Array} [userSeed=undefined]
     * @param {string} [encoding='hex']
     * @returns {KeyPairType}
     * @memberof Ed25519Signer
     */
    genKeyPair(encoding?: EncodingType, userSeed?: BytesType): KeyPairType;
    /**
     * Get publicKey from secretKey
     *
     * @param {hex|buffer|base58|Uint8Array} sk - can be either a hex encoded string or a buffer
     * @returns {string} hex encoded publicKey
     */
    getPublicKey(sk: BytesType, encoding?: EncodingType): BytesType;
    /**
     * Sign a message and get the signature hex
     *
     * @param {hex|base58|buffer|Uint8Array} message
     * @param {hex|base58|buffer|Uint8Array} sk
     * @returns {string} hex encoded signature
     */
    sign(message: BytesType, sk: BytesType, encoding?: EncodingType): BytesType;
    /**
     * Verify if a signature is valid
     *
     * @param {string|buffer} message
     * @param {string|buffer} signature
     * @param {string|buffer} pk
     * @returns {bool}
     */
    verify(message: BytesType, signature: BytesType, pk: BytesType): boolean;
}
declare const _default: Ed25519Signer;
export default _default;
export { Ed25519Signer };
