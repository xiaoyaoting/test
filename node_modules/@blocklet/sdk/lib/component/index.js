"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParentWebEndpoint = exports.getChildWebEndpoint = exports.getComponentWebEndpoint = exports.getComponentMountPoint = exports.call = void 0;
const axios_1 = __importDefault(require("axios"));
const get_1 = __importDefault(require("lodash/get"));
const url_join_1 = __importDefault(require("url-join"));
const json_stable_stringify_1 = __importDefault(require("json-stable-stringify"));
const util_1 = require("@blocklet/meta/lib/util");
const wallet_1 = __importDefault(require("../wallet"));
const config_1 = require("../config");
const sign = (data) => {
    const wallet = (0, wallet_1.default)();
    const signData = typeof data === 'undefined' ? {} : data;
    return { 'x-component-sig': wallet.sign((0, json_stable_stringify_1.default)(signData)) };
};
const doCall = ({ url, data }) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const resp = yield axios_1.default.post(url, data, { headers: sign(data), timeout: 60000 });
        config_1.logger.info(`call ${url} api success`);
        return resp;
    }
    catch (error) {
        config_1.logger.error(`call ${url} api failed`, {
            url,
            responseStatus: (0, get_1.default)(error, 'response.status'),
            responseData: (0, get_1.default)(error, 'response.data'),
            error,
        });
        throw new Error(`call ${url} api failed`);
    }
});
const parsePorts = () => JSON.parse(process.env.BLOCKLET_WEB_PORTS);
const getWebEndpoint = (name) => {
    const ports = parsePorts();
    if (ports[name]) {
        return `http://127.0.0.1:${ports[name]}`;
    }
    return '';
};
const getChildWebEndpoint = (name) => {
    const fullName = `${process.env.BLOCKLET_REAL_NAME}/${name}`;
    return getWebEndpoint(fullName);
};
exports.getChildWebEndpoint = getChildWebEndpoint;
const getParentWebEndpoint = () => {
    const parentName = (0, util_1.getParentComponentName)(process.env.BLOCKLET_REAL_NAME);
    return getWebEndpoint(parentName);
};
exports.getParentWebEndpoint = getParentWebEndpoint;
const parseMountPoints = () => {
    const mountPoints = JSON.parse(process.env.BLOCKLET_MOUNT_POINTS) || [];
    mountPoints.forEach((x) => {
        if (x.port) {
            x.webEndpoint = `http://127.0.0.1:${x.port}`;
        }
    });
    return mountPoints;
};
const call = ({ name, path: _path, data }) => __awaiter(void 0, void 0, void 0, function* () {
    const baseURL = name ? getChildWebEndpoint(name) : getParentWebEndpoint();
    const url = (0, url_join_1.default)(baseURL, _path);
    return doCall({ url, data });
});
exports.call = call;
const getComponentMountPoint = (keyword) => {
    const mountPoints = parseMountPoints();
    const item = mountPoints.find((x) => [x.title, x.name, x.did].includes(keyword));
    return item ? item.mountPoint : '';
};
exports.getComponentMountPoint = getComponentMountPoint;
const getComponentWebEndpoint = (keyword) => {
    const mountPoints = parseMountPoints();
    const item = mountPoints.find((x) => [x.title, x.name, x.did].includes(keyword));
    return item ? item.webEndpoint : '';
};
exports.getComponentWebEndpoint = getComponentWebEndpoint;
exports.default = {
    call,
    getComponentMountPoint,
    getComponentWebEndpoint,
    getChildWebEndpoint,
    getParentWebEndpoint,
};
