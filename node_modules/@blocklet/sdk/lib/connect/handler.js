"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const get_1 = __importDefault(require("lodash/get"));
const handler_1 = require("@did-connect/handler");
const notification_1 = __importStar(require("../service/notification"));
const noop = () => ({});
// whether app web page is in mobile DID wallet
const inMobileWallet = (didwallet) => {
    return didwallet && ['ios', 'android'].includes(didwallet.os);
};
const consoleLogger = { info: noop, error: console.error, warn: console.warn, debug: noop };
const getConnectedDid = (session) => {
    if (session.autoConnect === false) {
        return '';
    }
    if (inMobileWallet(session.didwallet)) {
        return '';
    }
    return (0, get_1.default)(session, 'previousConnected.userDid', '');
};
const createConnectHandlers = ({ authenticator, storage, logger = consoleLogger, socketPathname, sendNotificationFn, }) => {
    const handlers = (0, handler_1.createHandlers)({
        storage,
        authenticator,
        logger,
        socketPathname,
    });
    const originCreateHandler = handlers.handleSessionCreate;
    handlers.handleSessionCreate = (context) => __awaiter(void 0, void 0, void 0, function* () {
        const session = yield originCreateHandler(context);
        const connectedDid = getConnectedDid(session);
        // send notification to wallet to trigger wallet to auto connect
        if (connectedDid) {
            // wallet use check url to check status of the session
            let checkUrl = '';
            try {
                // @ts-expect-error TS(2322) FIXME: Type 'URL' is not assignable to type 'string'.
                checkUrl = new URL(session.authUrl);
                checkUrl.pathname = checkUrl.pathname.replace(/\/auth/, '/session');
            }
            catch (e) {
                checkUrl = '';
                console.error(e);
            }
            const deepLink = new URL('https://abtwallet.io/i/');
            deepLink.searchParams.set('action', 'requestAuth');
            deepLink.searchParams.set('url', encodeURIComponent(session.authUrl));
            const message = {
                type: 'connect',
                url: deepLink.href,
            };
            if (checkUrl) {
                message.checkUrl = checkUrl.href;
            }
            // sendNotificationFn maybe custom function so we need params
            const sendFn = sendNotificationFn || notification_1.sendToUser.bind(notification_1.default);
            sendFn(connectedDid, message, Object.assign(Object.assign({}, context), { session })).catch((err) => {
                console.error(err);
            });
        }
        return session;
    });
    return handlers;
};
module.exports = createConnectHandlers;
