"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const core_1 = require("@nedb/core");
// FIXME: 实例创建时才去校验 process.env.BLOCKLET_DATA_DIR
// if (!process.env.BLOCKLET_DATA_DIR) {
//  throw new Error('Blocklet SDK must be used in blocklet runtime');
// }
// const DB_DIR = path.join(process.env.BLOCKLET_DATA_DIR, 'db');
// fs.ensureDirSync(DB_DIR);
class DataBase extends core_1.DataStore {
    constructor(name, options = {}) {
        if (!process.env.BLOCKLET_DATA_DIR) {
            throw new Error('Blocklet SDK must be used in blocklet runtime');
        }
        const DB_DIR = path_1.default.join(process.env.BLOCKLET_DATA_DIR, 'db');
        fs_extra_1.default.ensureDirSync(DB_DIR);
        const filename = options.filename || path_1.default.join(DB_DIR, `${name}.db`);
        super(Object.assign({ filename, autoload: true, timestampData: true, onload: (err) => {
                if (err) {
                    console.error(`failed to load disk database ${filename}`, err);
                }
            } }, options));
    }
    exists(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const doc = yield this.findOne(...args);
            return !!doc;
        });
    }
    paginate({ condition = {}, sort = {}, page = 1, size = 100, projection = {} }) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.cursor(condition)
                .sort(sort)
                .skip(Math.max(page * size - size, 0))
                .limit(Math.max(size, 1))
                .projection(projection)
                .exec();
        });
    }
}
module.exports = DataBase;
