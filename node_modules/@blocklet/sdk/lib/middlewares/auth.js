"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const lru_cache_1 = __importDefault(require("lru-cache"));
const auth_1 = __importDefault(require("../service/auth"));
const cachedPermissions = new lru_cache_1.default({
    max: 10,
    maxAge: 60 * 1000, // cache for 2min
});
const getPermissionsByRole = (client, role) => __awaiter(void 0, void 0, void 0, function* () {
    const cached = cachedPermissions.get(role);
    if (cached) {
        return cached;
    }
    const res = yield client.getPermissionsByRole(role);
    cachedPermissions.set(role, res);
    return res;
});
// FIXME: 名字待确认, 全局的名称 Auth 已经被用了
const AuthMiddleware = ({ roles, permissions, _AuthClient = auth_1.default } = {}) => {
    if (roles && !Array.isArray(roles)) {
        throw new Error('roles must be array');
    }
    if (permissions && !Array.isArray(permissions)) {
        throw new Error('permissions must be array');
    }
    const client = new _AuthClient();
    return (req, res, next) => __awaiter(void 0, void 0, void 0, function* () {
        if (!req.headers['x-user-did']) {
            res.status(401).json({ code: 'forbidden', error: 'not authorized' });
            return;
        }
        if (roles && !roles.includes(req.headers['x-user-role'])) {
            res.status(403).json({ code: 'forbidden', error: 'no permission' });
            return;
        }
        if (permissions) {
            const { permissions: list } = yield getPermissionsByRole(client, req.headers['x-user-role']);
            if (!permissions.some((x) => (list || []).some((y) => y.name === x))) {
                res.status(403).json({ code: 'forbidden', error: 'no permission' });
                return;
            }
        }
        next();
    });
};
module.exports = AuthMiddleware;
