import Client from '@abtnode/client';
type PartialDeep<T> = {
    [K in keyof T]?: T[K] extends object ? PartialDeep<T[K]> : T[K];
};
type OmitTeamDid<T> = PartialDeep<Omit<T, 'teamDid'>>;
declare class AuthService {
    constructor(httpEndpoint?: string);
}
interface AuthService {
    getUser(did: string): Promise<Client.ResponseUser>;
    getUsers(args?: OmitTeamDid<Client.RequestUsersInput>): Promise<Client.ResponseUsers>;
    getOwner(): Promise<Client.ResponseUser>;
    updateUserApproval(did: string, approved: boolean): Promise<Client.ResponseUser>;
    issuePassportToUser(args: OmitTeamDid<Client.RequestIssuePassportToUserInput>): Promise<Client.ResponseUser>;
    enableUserPassport(args: OmitTeamDid<Client.RequestRevokeUserPassportInput>): Promise<Client.ResponseUser>;
    revokeUserPassport(args: OmitTeamDid<Client.RequestRevokeUserPassportInput>): Promise<Client.ResponseUser>;
    getPermissionsByRole(role: string): Promise<Client.ResponsePermissions>;
    getRoles(): Promise<Client.ResponseRoles>;
    createRole(args: OmitTeamDid<Client.RequestCreateRoleInput>): Promise<Client.ResponseRole>;
    updateRole(name: string, updates: Pick<Client.RoleInput, 'title' | 'description'>): Promise<Client.ResponseRole>;
    deleteRole(name: string): Promise<Client.GeneralResponse>;
    grantPermissionForRole(role: string, permission: string): Promise<Client.GeneralResponse>;
    revokePermissionFromRole(role: string, permission: string): Promise<Client.GeneralResponse>;
    updatePermissionsForRole(role: string, permissions: string): Promise<Client.ResponseRole>;
    hasPermission(role: string, permission: string): Promise<ABTNodeClient.BooleanResponse>;
    getPermissions(): Promise<Client.ResponsePermissions>;
    createPermission(args: OmitTeamDid<Client.RequestCreatePermissionInput>): Promise<Client.ResponsePermission>;
    updatePermission(args: OmitTeamDid<Client.PermissionInput>): Promise<Client.ResponsePermission>;
    deletePermission(name: string): Promise<Client.GeneralResponse>;
}
export = AuthService;
