/// <reference types="node" />
import EventEmitter from 'events';
import { TNotificationInput, TSendOptions } from '../types/notification';
type $TSFixMe = any;
/**
 *
 * @param {Notification} notification
 * @param {{
 *   keepForOfflineUser: Boolean
 * }} options
 * @returns
 */
declare const doSendToUser: (receiver: string | string[], notification: TNotificationInput, options?: TSendOptions) => Promise<any>;
/**
 *
 * @param {Notification} notification
 * @param {{
 *   channel: String
 *   event: String
 *   socketId: String
 *   socketDid: String
 * }} options
 * @returns
 */
declare const broadcast: (notification: TNotificationInput, options?: TSendOptions) => Promise<any>;
export declare const on: (event: string, cb?: $TSFixMe) => EventEmitter;
export declare const off: any;
export declare const _message: {
    on: (event: string, cb: $TSFixMe) => EventEmitter;
    off: any;
};
export { doSendToUser as sendToUser };
export { broadcast };
declare const _default: {
    sendToUser: (receiver: string | string[], notification: TNotificationInput, options?: TSendOptions) => Promise<any>;
    broadcast: (notification: TNotificationInput, options?: TSendOptions) => Promise<any>;
    on: (event: string, cb?: any) => EventEmitter;
    off: any;
    _message: {
        on: (event: string, cb: any) => EventEmitter;
        off: any;
    };
};
export default _default;
