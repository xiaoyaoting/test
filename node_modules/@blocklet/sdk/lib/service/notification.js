"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.broadcast = exports.sendToUser = exports._message = exports.off = exports.on = void 0;
/* eslint-disable @typescript-eslint/naming-convention */
const Jwt = __importStar(require("@arcblock/jwt"));
const events_1 = __importDefault(require("events"));
const ws_1 = require("@arcblock/ws");
const channel_1 = require("@blocklet/meta/lib/channel");
const check_blocklet_env_1 = __importDefault(require("../util/check-blocklet-env"));
const send_notification_1 = require("../util/send-notification");
const constants_1 = require("../util/constants");
const wallet_1 = __importDefault(require("../wallet"));
const notification_1 = require("../validators/notification");
const getSender = () => ({
    appDid: process.env.BLOCKLET_APP_ID,
    appSk: process.env.BLOCKLET_APP_SK,
});
/**
 *
 * @param {Notification} notification
 * @param {{
 *   keepForOfflineUser: Boolean
 * }} options
 * @returns
 */
const doSendToUser = (receiver, notification, options) => __awaiter(void 0, void 0, void 0, function* () {
    (0, check_blocklet_env_1.default)();
    return (0, send_notification_1.sendToUser)(receiver, notification, getSender(), process.env.ABT_NODE_SERVICE_PORT, options);
});
exports.sendToUser = doSendToUser;
/**
 *
 * @param {Notification} notification
 * @param {{
 *   channel: String
 *   event: String
 *   socketId: String
 *   socketDid: String
 * }} options
 * @returns
 */
const broadcast = (notification, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    (0, check_blocklet_env_1.default)();
    const sender = getSender();
    const { channel = (0, channel_1.getAppPublicChannel)(sender.appDid) } = options;
    const { event = 'message' } = options;
    return (0, send_notification_1.sendToAppChannel)(channel, event, notification, sender, process.env.ABT_NODE_SERVICE_PORT, options);
});
exports.broadcast = broadcast;
const emitter = new events_1.default();
const messageEmitter = new events_1.default();
const emitError = (error) => {
    messageEmitter.emit('error', error);
    emitter.emit('error', error);
};
let client = null;
const initClient = () => {
    if (!client) {
        const wallet = (0, wallet_1.default)();
        const { address: did, publicKey: pk, secretKey: sk } = wallet;
        const url = `ws://127.0.0.1:${process.env.ABT_NODE_SERVICE_PORT}${constants_1.SERVICE_PREFIX}`;
        const token = () => Jwt.sign(did, sk, {});
        client = new ws_1.WsClient(url, {
            heartbeatIntervalMs: 10 * 1000,
            params: () => ({
                token: token(),
                pk,
            }),
        });
        client.connect();
        const messageChannel = client.channel(did, () => ({ token: token(), pk }));
        const appPublicChannel = client.channel((0, channel_1.getAppPublicChannel)(did), () => ({ token: token(), pk }));
        messageChannel
            .join()
            .receive('error', (err) => {
            const msg = `join channel error: ${err.message}`;
            console.error(msg);
            emitError({ message: msg });
        })
            .receive('timeout', () => {
            const msg = 'join channel timeout';
            console.error(msg);
            emitError({ message: msg });
        });
        messageChannel.on('message', ({ status, response } = {}) => {
            if (status === 'ok') {
                messageEmitter.emit(response.type, response);
                if (response.type === notification_1.NOTIFICATION_TYPES.HI) {
                    emitter.emit(response.type, response);
                }
            }
            else {
                emitError(response);
                console.error({
                    status,
                    response,
                });
            }
        });
        appPublicChannel
            .join()
            .receive('error', (err) => {
            const msg = `join channel error: ${err.message}`;
            console.error(msg);
            emitter.emit('error', { message: msg });
        })
            .receive('timeout', () => {
            const msg = 'join channel timeout';
            console.error(msg);
            emitter.emit('error', { message: msg });
        });
        appPublicChannel.on(notification_1.NOTIFICATION_TYPES.HI, ({ status, response } = {}) => {
            if (status === 'ok') {
                emitter.emit(notification_1.NOTIFICATION_TYPES.HI, response);
            }
            else {
                emitter.emit('error', response);
                console.error({
                    status,
                    response,
                });
            }
        });
    }
};
const ensureClient = () => {
    if (!client) {
        initClient();
    }
};
const on = (event, cb) => {
    ensureClient();
    return emitter.on(event, cb);
};
exports.on = on;
exports.off = emitter.off.bind(emitter);
exports._message = {
    on: (event, cb) => {
        ensureClient();
        return messageEmitter.on(event, cb);
    },
    off: messageEmitter.off.bind(messageEmitter),
};
exports.default = {
    sendToUser: doSendToUser,
    broadcast,
    on: exports.on,
    off: exports.off,
    _message: exports._message,
};
