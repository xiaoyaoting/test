export type TChannelEvent = string;
export interface TDataAsset {
    chainHost: string;
    did: unknown;
}
export interface TDataDapp {
    appDID: unknown;
    desc?: string;
    logo: string;
    title: string;
    url: string;
}
export interface TDataImage {
    alt?: string;
    url: string;
}
export interface TDataLink {
    description?: string;
    image?: string;
    title?: string;
    url: string;
}
export interface TDataText {
    color?: string;
    size?: 'small' | 'normal' | 'big';
    text: string;
    type: string;
}
export interface TDataToken {
    address?: unknown;
    amount: string;
    chainHost: string;
    decimal: number;
    senderDid: unknown;
    symbol: string;
}
export interface TDataTransaction {
    chainId: string;
    hash: string;
}
export interface TDataVC {
    credential: {
        /**
         * Unknown Property
         */
        [x: string]: unknown;
    };
    tag?: string;
}
export interface TMessage {
    /**
     * Any Property
     */
    [x: string]: any;
    createdAt: Date;
    id: string;
    receiver: {
        did: unknown;
    };
    type: string;
}
export type TNotification = TNotificationItem | TNotificationConnect | TNotificationFeed;
export interface TNotificationAction {
    bgColor?: string;
    color?: string;
    link?: string;
    name: string;
    title?: string;
}
export type TNotificationAttachment = {
    data: TDataAsset;
    type: 'asset';
} | {
    data: TDataVC;
    type: 'vc';
} | {
    data: TDataToken;
    type: 'token';
} | {
    data: TDataText;
    type: 'text';
} | {
    data: TDataImage;
    type: 'image';
} | {
    data: TDataTransaction;
    type: 'transaction';
} | {
    data: TDataDapp;
    type: 'dapp';
} | {
    data: TDataLink;
    type: 'link';
} | {
    fields?: {
        data: TDataText;
        type: 'text';
    }[];
    type: 'section';
} | {
    type: 'divider';
};
export interface TNotificationConnect {
    checkUrl?: string;
    type?: 'connect';
    url: string;
}
export interface TNotificationFeed {
    data: object;
    feedType: string;
    type?: 'feed';
}
export type TNotificationInput = TNotification[] | TNotification;
export interface TNotificationItem {
    actions?: TNotificationAction[];
    attachments?: TNotificationAttachment[];
    blocks?: TNotificationAttachment[];
    body?: string;
    severity?: 'normal' | 'success' | 'error' | 'warning';
    title?: string;
    type?: 'notification';
}
export interface TSendOptions {
    /**
     * Any Property
     */
    [x: string]: any;
    keepForOfflineUser?: boolean;
}
