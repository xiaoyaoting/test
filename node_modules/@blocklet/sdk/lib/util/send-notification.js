"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendToAppChannel = exports.sendToUser = void 0;
const axios_1 = __importDefault(require("axios"));
const pick_1 = __importDefault(require("lodash/pick"));
const JWT = __importStar(require("@arcblock/jwt"));
const constant_1 = __importDefault(require("@abtnode/constant"));
const index_1 = require("../validators/index");
const constants_1 = require("./constants");
const version_1 = require("../version");
const axios = axios_1.default.create({ proxy: false });
const { NODE_MODES } = constant_1.default;
const VERSION = version_1.version; // version of notification sdk
const SERVER_MODE = process.env.ABT_NODE_MODE;
const getRequestHeaders = () => ({ 'User-Agent': `BlockletSDK/${VERSION}` });
/**
 * @param {String|Array} receiver
 * @param {Object} notification
 * @param {{
 *   appDid: String
 *   appSk: String
 * }} sender
 * @param {String|Number} port port of abtnode service endpoint
 * @param {Object} options
 * @returns
 */
const sendToUser = (receiver, notification, { appDid, appSk }, port = process.env.ABT_NODE_SERVICE_PORT, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    yield (0, index_1.validateReceiver)(receiver);
    const opt = (0, pick_1.default)(options, ['keepForOfflineUser']);
    yield (0, index_1.validateOption)(opt);
    if (SERVER_MODE !== NODE_MODES.DEBUG) {
        yield (0, index_1.validateNotification)(notification);
    }
    try {
        const { data: res } = yield axios.post(`http://127.0.0.1:${port}${constants_1.SERVICE_PREFIX}/api/send-to-user`, {
            apiVersion: VERSION,
            data: {
                sender: { appDid, token: JWT.sign(appDid, appSk) },
                receiver,
                notification,
                options: opt,
            },
        }, {
            timeout: 60 * 1000,
            headers: getRequestHeaders(),
        });
        return res;
    }
    catch (err) {
        console.error(err.response ? err.response.data : err);
        throw new Error(err.response ? err.response.data : err.message);
    }
});
exports.sendToUser = sendToUser;
const sendToAppChannel = (channel, event, notification, { appDid, appSk }, port = process.env.ABT_NODE_SERVICE_PORT, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    if (!channel) {
        throw new Error('channel is required');
    }
    if (!event) {
        throw new Error('event is required');
    }
    yield (0, index_1.validateChannelEvent)(event);
    const opt = (0, pick_1.default)(options, ['socketId', 'userDid']);
    if (opt.userDid) {
        // @ts-expect-error TS(2551) FIXME: Property 'socketDid' does not exist on type 'Pick<... Remove this comment to see the full error message
        opt.socketDid = opt.userDid;
        delete opt.userDid;
    }
    if (SERVER_MODE !== NODE_MODES.DEBUG) {
        yield (0, index_1.validateNotification)(notification);
    }
    try {
        const { data: res } = yield axios.post(`http://127.0.0.1:${port}${constants_1.SERVICE_PREFIX}/api/send-to-app-channel`, {
            apiVersion: VERSION,
            data: {
                sender: { appDid, token: JWT.sign(appDid, appSk) },
                channel,
                event,
                notification,
                options: opt,
            },
        }, {
            timeout: 60 * 1000,
            headers: getRequestHeaders(),
        });
        return res;
    }
    catch (err) {
        console.error(err.response ? err.response.data : err);
        throw new Error(err.response ? err.response.data : err.message);
    }
});
exports.sendToAppChannel = sendToAppChannel;
exports.default = {
    sendToUser,
    sendToAppChannel,
};
