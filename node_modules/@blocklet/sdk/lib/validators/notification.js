"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.feedTypeSchema = exports.connectTypeSchema = exports.notificationTypeSchema = exports.inputNotificationSchema = exports.NOTIFICATION_TYPES = exports.channelEventSchema = exports.optionSchema = exports.messageSchema = exports.notificationSchema = exports.attachmentSchema = exports.dappSchema = exports.imageSchema = exports.linkSchema = exports.textSchema = exports.transactionSchema = exports.vcSchema = exports.assetSchema = exports.actionSchema = exports.tokenSchema = exports.validateOption = exports.validateChannelEvent = exports.validateMessage = exports.validateNotification = exports.validateReceiver = void 0;
const joi_1 = __importDefault(require("joi"));
const extension_1 = require("@blocklet/meta/lib/extension");
const Joi = joi_1.default.extend(extension_1.didExtension);
const TYPES = {
    NOTIFICATION: 'notification',
    CONNECT: 'connect',
    FEED: 'feed',
    HI: 'hi',
};
exports.NOTIFICATION_TYPES = TYPES;
const SEVERITIES = {
    NORMAL: 'normal',
    SUCCESS: 'success',
    ERROR: 'error',
    WARNING: 'warning',
};
const ATTACHMENT_TYPES = {
    ASSET: 'asset',
    VC: 'vc',
    TOKEN: 'token',
    TEXT: 'text',
    IMAGE: 'image',
    DIVIDER: 'divider',
    TRANSACTION: 'transaction',
    DAPP: 'dapp',
    LINK: 'link',
    SECTION: 'section',
};
const assetSchema = Joi.object({
    did: Joi.DID().trim().required(),
    chainHost: Joi.string().uri().required(),
})
    .required()
    .meta({ className: 'TDataAsset' });
exports.assetSchema = assetSchema;
const vcSchema = Joi.object({
    credential: Joi.object().required().unknown(true),
    tag: Joi.string(),
})
    .required()
    .meta({ className: 'TDataVC', unknownType: 'any' });
exports.vcSchema = vcSchema;
const tokenSchema = Joi.object({
    address: Joi.DID().trim().allow(''),
    amount: Joi.string().required(),
    symbol: Joi.string().required(),
    senderDid: Joi.DID().trim().required(),
    chainHost: Joi.string().uri().required(),
    decimal: Joi.number().integer().required(),
})
    .required()
    .meta({ className: 'TDataToken' });
exports.tokenSchema = tokenSchema;
const textSchema = Joi.object({
    type: Joi.string().required(),
    text: Joi.string().required(),
    color: Joi.string().min(0),
    size: Joi.string().valid('small', 'normal', 'big'),
})
    .required()
    .meta({ className: 'TDataText' });
exports.textSchema = textSchema;
const imageSchema = Joi.object({
    url: Joi.string().uri().required(),
    alt: Joi.string().min(0),
})
    .required()
    .meta({ className: 'TDataImage' });
exports.imageSchema = imageSchema;
const transactionSchema = Joi.object({
    hash: Joi.string().required(),
    chainId: Joi.string().required(),
})
    .required()
    .meta({ className: 'TDataTransaction' });
exports.transactionSchema = transactionSchema;
const dappSchema = Joi.object({
    url: Joi.string().uri().required(),
    appDID: Joi.DID().trim().required(),
    logo: Joi.string().uri().required(),
    title: Joi.string().required(),
    desc: Joi.string().min(0),
})
    .required()
    .meta({ className: 'TDataDapp' });
exports.dappSchema = dappSchema;
const linkSchema = Joi.object({
    url: Joi.string().uri().required(),
    description: Joi.string().min(0),
    title: Joi.string().min(0),
    image: Joi.string().uri().min(0),
})
    .required()
    .meta({ className: 'TDataLink' });
exports.linkSchema = linkSchema;
const actionSchema = Joi.object({
    name: Joi.string().required(),
    title: Joi.string(),
    color: Joi.string(),
    bgColor: Joi.string(),
    link: Joi.string().uri(),
}).meta({ className: 'TNotificationAction' });
exports.actionSchema = actionSchema;
const attachmentSchema = Joi.alternatives()
    .try(Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.ASSET).required(),
    data: assetSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.VC).required(),
    data: vcSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.TOKEN).required(),
    data: tokenSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.TEXT).required(),
    data: textSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.IMAGE).required(),
    data: imageSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.TRANSACTION).required(),
    data: transactionSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.DAPP).required(),
    data: dappSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.LINK).required(),
    data: linkSchema,
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.SECTION).required(),
    fields: Joi.array().items(Joi.object({
        type: Joi.string().valid(ATTACHMENT_TYPES.TEXT).required(),
        data: textSchema,
    })),
}), Joi.object({
    type: Joi.string().valid(ATTACHMENT_TYPES.DIVIDER).required(),
}))
    .required()
    .meta({ className: 'TNotificationAttachment' });
exports.attachmentSchema = attachmentSchema;
const notificationTypeSchema = Joi.object({
    type: Joi.string().valid(TYPES.NOTIFICATION),
    title: Joi.string(),
    body: Joi.string(),
    severity: Joi.string().valid(...Object.values(SEVERITIES)),
    blocks: Joi.array().items(attachmentSchema).default([]),
    attachments: Joi.array().items(attachmentSchema).default([]),
    actions: Joi.array().items(actionSchema).default([]),
})
    .required()
    .meta({ className: 'TNotificationItem' });
exports.notificationTypeSchema = notificationTypeSchema;
const connectTypeSchema = Joi.object({
    type: Joi.string().valid(TYPES.CONNECT),
    url: Joi.string().uri().required(),
    checkUrl: Joi.string().uri(),
})
    .required()
    .meta({ className: 'TNotificationConnect' });
exports.connectTypeSchema = connectTypeSchema;
const feedTypeSchema = Joi.object({
    type: Joi.string().valid(TYPES.FEED),
    feedType: Joi.string().required(),
    data: Joi.object().required(),
})
    .required()
    .meta({ className: 'TNotificationFeed' });
exports.feedTypeSchema = feedTypeSchema;
const notificationSchema = Joi.alternatives()
    .try(notificationTypeSchema, connectTypeSchema, feedTypeSchema)
    .required()
    .meta({ className: 'TNotification' });
exports.notificationSchema = notificationSchema;
const messageSchema = Joi.object({
    id: Joi.string().required(),
    createdAt: Joi.date().iso().required(),
    type: Joi.string().required(),
    receiver: Joi.object({
        did: Joi.DID().trim().required(),
    }).required(),
})
    .unknown()
    .required()
    .meta({ className: 'TMessage', unknownType: 'any' });
exports.messageSchema = messageSchema;
const receiverSchema = Joi.DID().trim().required().meta({ className: 'TReceiver' });
const inputNotificationSchema = Joi.alternatives()
    .try(Joi.array().items(notificationSchema), notificationSchema)
    .required()
    .meta({ className: 'TNotificationInput' });
exports.inputNotificationSchema = inputNotificationSchema;
const inputReceiverSchema = Joi.alternatives()
    .try(Joi.array().items(receiverSchema), receiverSchema)
    .required()
    .meta({ className: 'TReceiverInput' });
const optionSchema = Joi.object({
    keepForOfflineUser: Joi.boolean(),
})
    .unknown()
    .meta({ className: 'TSendOptions', unknownType: 'any' });
exports.optionSchema = optionSchema;
const channelEventSchema = Joi.string().required().meta({ className: 'TChannelEvent' });
exports.channelEventSchema = channelEventSchema;
exports.validateReceiver = inputReceiverSchema.validateAsync.bind(inputReceiverSchema);
exports.validateNotification = inputNotificationSchema.validateAsync.bind(inputNotificationSchema);
exports.validateMessage = messageSchema.validateAsync.bind(messageSchema);
exports.validateChannelEvent = channelEventSchema.validateAsync.bind(channelEventSchema);
exports.validateOption = optionSchema.validateAsync.bind(optionSchema);
exports.default = {
    validateReceiver: exports.validateReceiver,
    validateNotification: exports.validateNotification,
    validateMessage: exports.validateMessage,
    validateChannelEvent: exports.validateChannelEvent,
    validateOption: exports.validateOption,
    tokenSchema,
    actionSchema,
    assetSchema,
    vcSchema,
    transactionSchema,
    textSchema,
    linkSchema,
    imageSchema,
    dappSchema,
    attachmentSchema,
    notificationSchema,
    messageSchema,
    optionSchema,
    channelEventSchema,
    NOTIFICATION_TYPES: TYPES,
};
