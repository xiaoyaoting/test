"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const get_1 = __importDefault(require("lodash/get"));
const did_auth_1 = require("@arcblock/did-auth");
const notification_1 = __importStar(require("./service/notification"));
const noop = () => ({});
const CONNECTED_DID_KEY = 'headers[x-connected-did]';
// whether app web page is in mobile DID wallet
const inMobileWallet = (didwallet) => {
    return didwallet && ['ios', 'android'].includes(didwallet.os);
};
class WalletHandlers extends did_auth_1.WalletHandlers {
    /**
     * @param {boolean} autoConnect enable auto connect to wallet (wallet does not need to scan qr code)
     * @param {boolean} connectedDidOnly only current login did or connected did can connect
     * @param {function} sendNotificationFn use in a non-blocklet environment
     */
    constructor(_a) {
        var { autoConnect = true, connectedDidOnly = false, sendNotificationFn, options = {} } = _a, opts = __rest(_a, ["autoConnect", "connectedDidOnly", "sendNotificationFn", "options"]);
        // FIXME: wait check
        // if (autoConnect && connectedDidOnly) {
        //  options.sessionDidKey = CONNECTED_DID_KEY;
        // }
        super(Object.assign({ options: Object.assign(Object.assign({}, options), {
                sessionDidKey: autoConnect && connectedDidOnly ? CONNECTED_DID_KEY : options === null || options === void 0 ? void 0 : options.sessionDidKey,
            }) }, opts));
        this.getConnectedDid = ({ req, didwallet, extraParams }) => {
            if (extraParams && extraParams.autoConnect === 'false') {
                return null;
            }
            if (!this.enableConnect) {
                return null;
            }
            if (inMobileWallet(didwallet)) {
                return null;
            }
            return (0, get_1.default)(req, CONNECTED_DID_KEY);
        };
        this.enableConnect = !!autoConnect;
        this.sendNotificationFn = sendNotificationFn || notification_1.sendToUser.bind(notification_1.default);
    }
    attach(_a) {
        var { onStart = noop } = _a, opts = __rest(_a, ["onStart"]);
        const realOnStart = (params) => __awaiter(this, void 0, void 0, function* () {
            // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
            const extra = (yield onStart(params)) || {};
            const connectedDid = this.getConnectedDid(params);
            // fill extra
            extra.connectedDid = connectedDid || '';
            extra.saveConnect = this.enableConnect;
            // send notification to wallet to trigger wallet to auto connect
            if (connectedDid) {
                // wallet use check url to check status of the session
                let checkUrl = '';
                try {
                    // @ts-expect-error TS(2322) FIXME: Type 'URL' is not assignable to type 'string'.
                    checkUrl = new URL(decodeURIComponent(new URL(params.deepLink).searchParams.get('url')));
                    checkUrl.pathname = checkUrl.pathname.replace(/auth$/, 'status');
                }
                catch (e) {
                    checkUrl = '';
                    console.error(e);
                }
                const message = {
                    type: 'connect',
                    url: params.deepLink,
                };
                if (checkUrl) {
                    message.checkUrl = checkUrl.href;
                }
                // sendNotificationFn maybe custom function so we need params
                this.sendNotificationFn(connectedDid, message, params).catch((err) => {
                    console.error(err);
                    if (typeof opts.onError === 'function') {
                        opts.onError(err);
                    }
                });
            }
            return extra;
        });
        // @ts-expect-error TS(2345) FIXME: Argument of type '{ onStart: (params: any) => Prom... Remove this comment to see the full error message
        super.attach(Object.assign({ onStart: realOnStart }, opts));
    }
}
module.exports = WalletHandlers;
