'use strict';

const { createExtensionMethods } = require('./extension');
const GraphQLClientBase = require('./base');

/**
 * An http client that can read/write data to a forge powered blockchain node, can be used in both node.js and browser.
 *
 * Please note that, due to internal implementation of google-protobuf, all `repeated fields` names are suffixed with `List`
 *
 * @class
 * @example
 * const GraphQLClient = require('@ocap/client');
 *
 * const client = new GraphQLClient('https://beta.abtnetwork.io/api');
 *
 * const res = await client.getChainInfo();
 */
class GraphQLClient extends GraphQLClientBase {
  /**
   * Create an instance of GraphQLClient
   *
   * @constructor
   * @param {string} endpoint the graphql endpoint of the chain
   * @param {boolean} autoInit whether auto warmup context
   * @see GraphQLClient#getQueries
   * @see GraphQLClient#getMutations
   * @see GraphQLClient#getSubscriptions
   * @see GraphQLClient#getTxSendMethods
   * @see GraphQLClient#getTxEncodeMethods
   */
  constructor(endpoint, autoInit = true) {
    super(endpoint);
    createExtensionMethods(this);

    // warmup the context
    if (autoInit) {
      this.getContext().catch(err => {
        console.warn('failed to warmup context', err.message);
      });
    }
  }
}

module.exports = GraphQLClient;
//# sourceMappingURL=client.js.map