{"version":3,"sources":["../src/types.js"],"names":[],"mappings":";AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;AAaA;;;;;;;;;;AAUA;;;;;;;;;;;;;;AAcA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;AAQA;;;;;;;;;;;AAWA;;;;;;;;;;;AAWA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;AAWA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;AAcA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;;;;;;;;AAQA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;AAQA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;AAYA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;AAaA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;AAWA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;AAWA;;;;;;;;;;;;AAYA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;AAYA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;;;;AAcA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkEA;;;;;;;;;AASA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;AAUA;;;;;;;;AAQA;;;;;;;;;AASA;;;;;;;;;;;;;AAaA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;AAoBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;AAafile":"types.js","sourcesContent":["\n/**\n * List all query method names\n *\n * @name GraphQLClient#getQueries\n * @function\n * @memberof GraphQLClient\n * @returns {Array<string>} method name list\n * @example\n * const methods = client.getQueries();\n * // list of query methods\n * // [\n * //   getAccountState,\n * //   getAssetState,\n * //   getFactoryState,\n * //   getDelegateState,\n * //   getTokenState,\n * //   getEvidenceState,\n * //   getForgeState,\n * //   getTx,\n * //   getBlock,\n * //   getBlocks,\n * //   getUnconfirmedTxs,\n * //   getChainInfo,\n * //   getConfig,\n * //   getNetInfo,\n * //   getNodeInfo,\n * //   getValidatorsInfo,\n * //   getForgeStats,\n * //   listAssetTransactions,\n * //   listAssets,\n * //   listBlocks,\n * //   listTopAccounts,\n * //   listTransactions,\n * //   listTokens,\n * //   listFactories,\n * //   getAccountTokens,\n * //   getStakeState,\n * //   listStakes,\n * //   getRollupState,\n * //   listRollups,\n * //   getRollupBlock,\n * //   listRollupBlocks,\n * //   listRollupValidators,\n * //   search,\n * //   estimateGas,\n * // ]\n */\n\n/**\n * List all mutation method names\n *\n * @name GraphQLClient#getMutations\n * @function\n * @memberof GraphQLClient\n * @returns {Array<string>} method name list\n * @example\n * const methods = client.getMutations();\n * // list of mutation methods\n * // [\n * //   sendTx,\n * // ]\n */\n\n/**\n * List all subscription method names\n *\n * @name GraphQLClient#getSubscription\n * @function\n * @memberof GraphQLClient\n * @returns {Array<string>} method name list\n * @example\n * const methods = client.getSubscriptions();\n * // list of subscription methods\n * // [\n\n * // ]\n */\n\n/**\n * Send raw graphql query to forge graphql endpoint\n *\n * @name GraphQLClient#doRawQuery\n * @function\n * @memberof GraphQLClient\n * @param {string} query - graphql query string\n * @returns {Promise} usually axios response data\n * @example\n * const res = await client.doRawQuery('\n *   getChainInfo {\n *     code\n *     info {\n *       address\n *       blockHeight\n *     }\n *   }\n * ');\n *\n * // Then\n * // res.getChainInfo.code\n * // res.getChainInfo.info\n */\n\n/**\n * Send raw graphql subscription to forge graphql endpoint\n *\n * @name GraphQLClient#doRawSubscription\n * @function\n * @memberof GraphQLClient\n * @param {string} query - graphql query string\n * @returns {Promise} usually axios response data\n */\n\n/**\n * Structure of GraphQLClient.WalletObject\n *\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WalletObject\n * @property {string} publicKey\n * @property {string} secretKey\n * @property {GraphQLClient~WalletTypeObject} type\n */\n\n/**\n * Structure of GraphQLClient.WalletTypeObject\n *\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WalletTypeObject\n * @property {number} pk\n * @property {number} role\n * @property {number} hash\n * @property {number} address - defaults to base58btc\n */\n\n/**\n * Structure of GraphQLClient.TxEncodeOutput\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TxEncodeOutput\n * @property {object} object - the transaction object, human readable\n * @property {buffer} buffer - the transaction binary presentation, can be used to signing, encoding to other formats\n */\n\n\n/**\n * Structure of GraphQLClient.AccountFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountFilterInput\n * @property {Array<string>} accounts\n */\n\n/**\n * Structure of GraphQLClient.AddressFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AddressFilterInput\n * @property {string} sender\n * @property {string} receiver\n * @property {...GraphQLClient.Direction} direction\n */\n\n/**\n * Structure of GraphQLClient.AssetFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetFilterInput\n * @property {Array<string>} assets\n */\n\n/**\n * Structure of GraphQLClient.FactoryFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.FactoryFilterInput\n * @property {Array<string>} factories\n */\n\n/**\n * Structure of GraphQLClient.PageInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PageInput\n * @property {string} cursor\n * @property {number} size\n * @property {Array<...GraphQLClient.PageOrderInput>} order\n */\n\n/**\n * Structure of GraphQLClient.PageOrderInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PageOrderInput\n * @property {string} field\n * @property {string} type\n */\n\n/**\n * Structure of GraphQLClient.RangeFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RangeFilterInput\n * @property {string} from\n * @property {string} to\n */\n\n/**\n * Structure of GraphQLClient.RequestEstimateGasInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestEstimateGasInput\n * @property {string} typeUrl\n * @property {string} tx\n */\n\n/**\n * Structure of GraphQLClient.RequestGetAccountTokensInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetAccountTokensInput\n * @property {string} address\n * @property {string} token\n */\n\n/**\n * Structure of GraphQLClient.RequestGetBlockInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetBlockInput\n * @property {number} height\n */\n\n/**\n * Structure of GraphQLClient.RequestGetBlocksInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetBlocksInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {...GraphQLClient.RangeFilterInput} heightFilter\n * @property {boolean} emptyExcluded\n */\n\n/**\n * Structure of GraphQLClient.RequestGetConfigInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetConfigInput\n * @property {boolean} parsed\n */\n\n/**\n * Structure of GraphQLClient.RequestGetEvidenceStateInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetEvidenceStateInput\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.RequestGetRollupBlockInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetRollupBlockInput\n * @property {string} hash\n * @property {number} height\n * @property {string} rollupAddress\n */\n\n/**\n * Structure of GraphQLClient.RequestGetStateInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetStateInput\n * @property {string} address\n * @property {Array<string>} keys\n * @property {number} height\n */\n\n/**\n * Structure of GraphQLClient.RequestGetTxInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestGetTxInput\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.RequestListAssetTransactionsInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListAssetTransactionsInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.RequestListAssetsInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListAssetsInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} ownerAddress\n * @property {string} factoryAddress\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n */\n\n/**\n * Structure of GraphQLClient.RequestListBlocksInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListBlocksInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} proposer\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n * @property {...GraphQLClient.RangeFilterInput} heightFilter\n * @property {...GraphQLClient.RangeFilterInput} numTxsFilter\n * @property {...GraphQLClient.RangeFilterInput} numInvalidTxsFilter\n */\n\n/**\n * Structure of GraphQLClient.RequestListFactoriesInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListFactoriesInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} ownerAddress\n * @property {Array<string>} addressList\n */\n\n/**\n * Structure of GraphQLClient.RequestListRollupBlocksInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListRollupBlocksInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} rollupAddress\n * @property {string} tokenAddress\n * @property {string} proposer\n * @property {...GraphQLClient.ValidatorFilterInput} validatorFilter\n * @property {...GraphQLClient.TxFilterInput} txFilter\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n */\n\n/**\n * Structure of GraphQLClient.RequestListRollupValidatorsInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListRollupValidatorsInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} rollupAddress\n */\n\n/**\n * Structure of GraphQLClient.RequestListRollupsInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListRollupsInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} tokenAddress\n * @property {string} foreignTokenAddress\n */\n\n/**\n * Structure of GraphQLClient.RequestListStakesInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListStakesInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {...GraphQLClient.AddressFilterInput} addressFilter\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n * @property {...GraphQLClient.AssetFilterInput} assetFilter\n */\n\n/**\n * Structure of GraphQLClient.RequestListTokensInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListTokensInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} issuerAddress\n */\n\n/**\n * Structure of GraphQLClient.RequestListTopAccountsInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListTopAccountsInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} tokenAddress\n */\n\n/**\n * Structure of GraphQLClient.RequestListTransactionsInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestListTransactionsInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n * @property {...GraphQLClient.AddressFilterInput} addressFilter\n * @property {...GraphQLClient.TypeFilterInput} typeFilter\n * @property {...GraphQLClient.ValidityFilterInput} validityFilter\n * @property {...GraphQLClient.FactoryFilterInput} factoryFilter\n * @property {...GraphQLClient.TokenFilterInput} tokenFilter\n * @property {...GraphQLClient.AssetFilterInput} assetFilter\n * @property {...GraphQLClient.AccountFilterInput} accountFilter\n * @property {...GraphQLClient.TxFilterInput} txFilter\n * @property {...GraphQLClient.RollupFilterInput} rollupFilter\n * @property {...GraphQLClient.StakeFilterInput} stakeFilter\n */\n\n/**\n * Structure of GraphQLClient.RequestSearchInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestSearchInput\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} keyword\n */\n\n/**\n * Structure of GraphQLClient.RequestSendTxInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RequestSendTxInput\n * @property {string} tx\n * @property {...GraphQLClient.WalletInfoInput} wallet\n * @property {string} token\n * @property {boolean} commit\n */\n\n/**\n * Structure of GraphQLClient.RollupFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RollupFilterInput\n * @property {Array<string>} rollups\n */\n\n/**\n * Structure of GraphQLClient.StakeFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeFilterInput\n * @property {Array<string>} stakes\n */\n\n/**\n * Structure of GraphQLClient.TimeFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TimeFilterInput\n * @property {string} startDateTime\n * @property {string} endDateTime\n * @property {string} field\n */\n\n/**\n * Structure of GraphQLClient.TokenFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TokenFilterInput\n * @property {Array<string>} tokens\n */\n\n/**\n * Structure of GraphQLClient.TxFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TxFilterInput\n * @property {Array<string>} txs\n */\n\n/**\n * Structure of GraphQLClient.TypeFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TypeFilterInput\n * @property {Array<string>} types\n */\n\n/**\n * Structure of GraphQLClient.ValidatorFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidatorFilterInput\n * @property {Array<string>} validators\n */\n\n/**\n * Structure of GraphQLClient.ValidityFilterInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidityFilterInput\n * @property {...GraphQLClient.Validity} validity\n */\n\n/**\n * Structure of GraphQLClient.WalletInfoInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.WalletInfoInput\n * @property {...GraphQLClient.WalletTypeInput} type\n * @property {string} sk\n * @property {string} pk\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.WalletTypeInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.WalletTypeInput\n * @property {...GraphQLClient.KeyType} pk\n * @property {...GraphQLClient.HashType} hash\n * @property {...GraphQLClient.EncodingType} address\n * @property {...GraphQLClient.RoleType} role\n */\n\n/**\n * Structure of GraphQLClient.AccountConfig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountConfig\n * @property {string} address\n * @property {string} pk\n * @property {string} balance\n */\n\n/**\n * Structure of GraphQLClient.AccountMigrateTx \n *\n * Checkout the following snippet for the format of AccountMigrateTx:\n * ```json\n{\n  \"pk\": \"abc\",\n  \"type\": {\n    \"pk\": \"ED25519\",\n    \"hash\": \"KECCAK\",\n    \"address\": \"BASE16\",\n    \"role\": \"ROLE_ACCOUNT\"\n  },\n  \"address\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountMigrateTx\n * @property {string} pk\n * @property {...GraphQLClient.WalletType} type\n * @property {string} address\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.AccountState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountState\n * @property {string} balance\n * @property {string} nonce\n * @property {string} numTxs\n * @property {string} address\n * @property {string} pk\n * @property {...GraphQLClient.WalletType} type\n * @property {string} moniker\n * @property {...GraphQLClient.StateContext} context\n * @property {string} issuer\n * @property {string} gasBalance\n * @property {Array<string>} migratedTo\n * @property {Array<string>} migratedFrom\n * @property {string} numAssets\n * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.AccountToken \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AccountToken\n * @property {string} address\n * @property {string} symbol\n * @property {string} balance\n * @property {number} decimal\n */\n\n/**\n * Structure of GraphQLClient.AcquireAssetV2Tx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AcquireAssetV2Tx\n * @property {string} factory\n * @property {string} address\n * @property {Array<string>} assets\n * @property {Array<...GraphQLClient.VariableInput>} variables\n * @property {...GraphQLClient.NFTIssuer} issuer\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.AcquireAssetV3Tx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AcquireAssetV3Tx\n * @property {string} factory\n * @property {string} address\n * @property {Array<...GraphQLClient.TransactionInput>} inputs\n * @property {string} owner\n * @property {Array<...GraphQLClient.VariableInput>} variables\n * @property {...GraphQLClient.NFTIssuer} issuer\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.Any \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Any\n * @property {string} typeUrl\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.AssetFactoryHook \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetFactoryHook\n * @property {string} name\n * @property {string} type\n * @property {string} hook\n */\n\n/**\n * Structure of GraphQLClient.AssetFactoryInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetFactoryInput\n * @property {string} value\n * @property {Array<...GraphQLClient.TokenInput>} tokens\n * @property {Array<string>} assets\n * @property {Array<...GraphQLClient.VariableInput>} variables\n */\n\n/**\n * Structure of GraphQLClient.AssetFactoryState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetFactoryState\n * @property {string} address\n * @property {string} owner\n * @property {string} name\n * @property {string} description\n * @property {string} settlement\n * @property {number} limit\n * @property {Array<string>} trustedIssuers\n * @property {...GraphQLClient.IndexedFactoryInput} input\n * @property {...GraphQLClient.CreateAssetTx} output\n * @property {Array<...GraphQLClient.AssetFactoryHook>} hooks\n * @property {...GraphQLClient.Any} data\n * @property {...GraphQLClient.StateContext} context\n * @property {string} balance\n * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens\n * @property {number} numMinted\n * @property {...GraphQLClient.NFTDisplay} display\n * @property {string} lastSettlement\n */\n\n/**\n * Structure of GraphQLClient.AssetState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.AssetState\n * @property {string} address\n * @property {string} owner\n * @property {string} moniker\n * @property {boolean} readonly\n * @property {boolean} transferrable\n * @property {number} ttl\n * @property {string} consumedTime\n * @property {string} issuer\n * @property {string} parent\n * @property {...GraphQLClient.NFTEndpoint} endpoint\n * @property {...GraphQLClient.NFTDisplay} display\n * @property {Array<string>} tags\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.BlockID \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.BlockID\n * @property {string} hash\n * @property {...GraphQLClient.PartSetHeader} partsHeader\n */\n\n/**\n * Structure of GraphQLClient.BlockInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.BlockInfo\n * @property {string} height\n * @property {number} numTxs\n * @property {string} time\n * @property {string} appHash\n * @property {string} proposer\n * @property {Array<...GraphQLClient.TransactionInfo>} txs\n * @property {string} totalTxs\n * @property {Array<...GraphQLClient.TransactionInfo>} invalidTxs\n * @property {Array<string>} txsHashes\n * @property {Array<string>} invalidTxsHashes\n * @property {string} consensusHash\n * @property {string} dataHash\n * @property {string} evidenceHash\n * @property {string} lastCommitHash\n * @property {string} lastResultsHash\n * @property {string} nextValidatorsHash\n * @property {string} validatorsHash\n * @property {...GraphQLClient.Version} version\n * @property {...GraphQLClient.BlockID} lastBlockId\n */\n\n/**\n * Structure of GraphQLClient.BlockInfoSimple \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.BlockInfoSimple\n * @property {string} height\n * @property {number} numTxs\n * @property {string} time\n * @property {string} appHash\n * @property {string} proposer\n * @property {string} totalTxs\n * @property {Array<string>} txsHashes\n * @property {Array<string>} invalidTxsHashes\n * @property {string} consensusHash\n * @property {string} dataHash\n * @property {string} evidenceHash\n * @property {string} lastCommitHash\n * @property {string} lastResultsHash\n * @property {string} nextValidatorsHash\n * @property {string} validatorsHash\n * @property {...GraphQLClient.Version} version\n * @property {...GraphQLClient.BlockID} lastBlockId\n */\n\n/**\n * Structure of GraphQLClient.ChainInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ChainInfo\n * @property {string} id\n * @property {string} network\n * @property {string} moniker\n * @property {string} consensusVersion\n * @property {boolean} synced\n * @property {string} appHash\n * @property {string} blockHash\n * @property {string} blockHeight\n * @property {string} blockTime\n * @property {string} address\n * @property {string} votingPower\n * @property {string} totalTxs\n * @property {string} version\n * @property {Array<...GraphQLClient.ChainInfo_ForgeAppsVersionEntry>} forgeAppsVersion\n * @property {Array<string>} supportedTxs\n */\n\n/**\n * Structure of GraphQLClient.ChainInfo_ForgeAppsVersionEntry \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ChainInfo_ForgeAppsVersionEntry\n * @property {string} key\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.ClaimBlockRewardTx \n *\n * Checkout the following snippet for the format of ClaimBlockRewardTx:\n * ```json\n{\n  \"rollup\": \"abc\",\n  \"blockHeight\": 123,\n  \"blockHash\": \"abc\",\n  \"evidence\": {\n    \"hash\": \"abc\"\n  },\n  \"publisher\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ClaimBlockRewardTx\n * @property {string} rollup\n * @property {number} blockHeight\n * @property {string} blockHash\n * @property {...GraphQLClient.Evidence} evidence\n * @property {string} publisher\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.ClaimStakeTx \n *\n * Checkout the following snippet for the format of ClaimStakeTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"evidence\": {\n    \"hash\": \"abc\"\n  },\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ClaimStakeTx\n * @property {string} address\n * @property {...GraphQLClient.Evidence} evidence\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.CloseRollupTx \n *\n * Checkout the following snippet for the format of CloseRollupTx:\n * ```json\n{\n  \"rollup\": \"abc\",\n  \"message\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CloseRollupTx\n * @property {string} rollup\n * @property {string} message\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.ConsensusParams \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ConsensusParams\n * @property {string} maxBytes\n * @property {string} maxGas\n * @property {number} maxValidators\n * @property {number} maxCandidates\n * @property {Array<string>} pubKeyTypes\n * @property {Array<...GraphQLClient.Validator>} validators\n * @property {boolean} validatorChanged\n * @property {boolean} paramChanged\n */\n\n/**\n * Structure of GraphQLClient.CreateAssetTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CreateAssetTx\n * @property {string} moniker\n * @property {...GraphQLClient.Any} data\n * @property {boolean} readonly\n * @property {boolean} transferrable\n * @property {number} ttl\n * @property {string} parent\n * @property {string} address\n * @property {string} issuer\n * @property {...GraphQLClient.NFTEndpoint} endpoint\n * @property {...GraphQLClient.NFTDisplay} display\n * @property {Array<string>} tags\n */\n\n/**\n * Structure of GraphQLClient.CreateFactoryTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CreateFactoryTx\n * @property {string} name\n * @property {string} description\n * @property {string} settlement\n * @property {number} limit\n * @property {Array<string>} trustedIssuers\n * @property {...GraphQLClient.AssetFactoryInput} input\n * @property {...GraphQLClient.CreateAssetTx} output\n * @property {Array<...GraphQLClient.AssetFactoryHook>} hooks\n * @property {string} address\n * @property {...GraphQLClient.NFTDisplay} display\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.CreateRollupBlockTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CreateRollupBlockTx\n * @property {string} hash\n * @property {number} height\n * @property {string} merkleRoot\n * @property {string} previousHash\n * @property {string} txsHash\n * @property {Array<string>} txs\n * @property {string} proposer\n * @property {Array<...GraphQLClient.Multisig>} signatures\n * @property {string} rollup\n * @property {string} minReward\n * @property {boolean} governance\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.CreateRollupTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CreateRollupTx\n * @property {string} address\n * @property {string} tokenAddress\n * @property {string} vaultAddress\n * @property {string} contractAddress\n * @property {Array<...GraphQLClient.RollupValidator>} seedValidators\n * @property {string} minStakeAmount\n * @property {string} maxStakeAmount\n * @property {number} minSignerCount\n * @property {number} maxSignerCount\n * @property {number} minBlockSize\n * @property {number} maxBlockSize\n * @property {number} minBlockInterval\n * @property {number} minBlockConfirmation\n * @property {string} foreignChainType\n * @property {string} foreignChainId\n * @property {number} depositFeeRate\n * @property {number} withdrawFeeRate\n * @property {number} proposerFeeShare\n * @property {string} minDepositAmount\n * @property {string} minWithdrawAmount\n * @property {string} maxDepositAmount\n * @property {string} maxWithdrawAmount\n * @property {string} minDepositFee\n * @property {string} maxDepositFee\n * @property {string} minWithdrawFee\n * @property {string} maxWithdrawFee\n * @property {boolean} paused\n * @property {number} leaveWaitingPeriod\n * @property {number} publisherFeeShare\n * @property {number} publishWaitingPeriod\n * @property {number} publishSlashRate\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.CreateTokenTx \n *\n * Checkout the following snippet for the format of CreateTokenTx:\n * ```json\n{\n  \"name\": \"abc\",\n  \"description\": \"abc\",\n  \"symbol\": \"abc\",\n  \"unit\": \"abc\",\n  \"decimal\": 123,\n  \"icon\": \"abc\",\n  \"totalSupply\": \"abc\",\n  \"address\": \"abc\",\n  \"initialSupply\": \"abc\",\n  \"foreignToken\": {\n    \"type\": \"abc\",\n    \"contractAddress\": \"abc\",\n    \"chainType\": \"abc\",\n    \"chainName\": \"abc\",\n    \"chainId\": 123\n  },\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.CreateTokenTx\n * @property {string} name\n * @property {string} description\n * @property {string} symbol\n * @property {string} unit\n * @property {number} decimal\n * @property {string} icon\n * @property {string} totalSupply\n * @property {string} address\n * @property {string} initialSupply\n * @property {...GraphQLClient.ForeignToken} foreignToken\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.DeclareTx \n *\n * Checkout the following snippet for the format of DeclareTx:\n * ```json\n{\n  \"moniker\": \"abc\",\n  \"issuer\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DeclareTx\n * @property {string} moniker\n * @property {string} issuer\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.DelegateConfig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateConfig\n * @property {number} deltaInterval\n * @property {Array<string>} typeUrls\n */\n\n/**\n * Structure of GraphQLClient.DelegateOp \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateOp\n * @property {string} typeUrl\n * @property {Array<string>} rules\n */\n\n/**\n * Structure of GraphQLClient.DelegateOpState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateOpState\n * @property {string} rule\n * @property {number} numTxs\n * @property {number} numTxsDelta\n * @property {string} balance\n * @property {string} balanceDelta\n */\n\n/**\n * Structure of GraphQLClient.DelegateState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateState\n * @property {string} address\n * @property {Array<...GraphQLClient.DelegateState_OpsEntry>} ops\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.DelegateState_OpsEntry \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateState_OpsEntry\n * @property {string} key\n * @property {...GraphQLClient.DelegateOpState} value\n */\n\n/**\n * Structure of GraphQLClient.DelegateTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DelegateTx\n * @property {string} address\n * @property {string} to\n * @property {Array<...GraphQLClient.DelegateOp>} ops\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.DepositTokenV2Tx \n *\n * Checkout the following snippet for the format of DepositTokenV2Tx:\n * ```json\n{\n  \"token\": {\n    \"address\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"to\": \"abc\",\n  \"proposer\": \"abc\",\n  \"evidence\": {\n    \"hash\": \"abc\"\n  },\n  \"rollup\": \"abc\",\n  \"actualFee\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.DepositTokenV2Tx\n * @property {...GraphQLClient.TokenInput} token\n * @property {string} to\n * @property {string} proposer\n * @property {...GraphQLClient.Evidence} evidence\n * @property {string} rollup\n * @property {string} actualFee\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.Evidence \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Evidence\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.EvidenceState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.EvidenceState\n * @property {string} hash\n * @property {string} data\n * @property {...GraphQLClient.StateContext} context\n */\n\n/**\n * Structure of GraphQLClient.ExchangeInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeInfo\n * @property {string} value\n * @property {Array<string>} assets\n */\n\n/**\n * Structure of GraphQLClient.ExchangeInfoV2 \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeInfoV2\n * @property {string} value\n * @property {Array<string>} assets\n * @property {Array<...GraphQLClient.TokenInput>} tokens\n */\n\n/**\n * Structure of GraphQLClient.ExchangeTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeTx\n * @property {string} to\n * @property {...GraphQLClient.ExchangeInfo} sender\n * @property {...GraphQLClient.ExchangeInfo} receiver\n * @property {string} expiredAt\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.ExchangeV2Tx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ExchangeV2Tx\n * @property {string} to\n * @property {...GraphQLClient.ExchangeInfoV2} sender\n * @property {...GraphQLClient.ExchangeInfoV2} receiver\n * @property {string} expiredAt\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.ForeignToken \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForeignToken\n * @property {string} type\n * @property {string} contractAddress\n * @property {string} chainType\n * @property {string} chainName\n * @property {number} chainId\n */\n\n/**\n * Structure of GraphQLClient.ForgeState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeState\n * @property {string} address\n * @property {...GraphQLClient.ConsensusParams} consensus\n * @property {Array<...GraphQLClient.ForgeState_TasksEntry>} tasks\n * @property {string} version\n * @property {...GraphQLClient.ForgeToken} token\n * @property {...GraphQLClient.TransactionConfig} txConfig\n * @property {...GraphQLClient.UpgradeInfo} upgradeInfo\n * @property {Array<...GraphQLClient.AccountConfig>} accountConfig\n * @property {...GraphQLClient.VaultConfig} vaults\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.ForgeState_TasksEntry \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeState_TasksEntry\n * @property {number} key\n * @property {...GraphQLClient.UpgradeTasks} value\n */\n\n/**\n * Structure of GraphQLClient.ForgeStats \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeStats\n * @property {Array<string>} numBlocks\n * @property {Array<string>} numTxs\n * @property {Array<string>} numStakes\n * @property {Array<number>} numValidators\n * @property {Array<string>} numAccountMigrateTxs\n * @property {Array<string>} numCreateAssetTxs\n * @property {Array<number>} numConsensusUpgradeTxs\n * @property {Array<string>} numDeclareTxs\n * @property {Array<string>} numDeclareFileTxs\n * @property {Array<string>} numExchangeTxs\n * @property {Array<string>} numStakeTxs\n * @property {Array<number>} numSysUpgradeTxs\n * @property {Array<string>} numTransferTxs\n * @property {Array<string>} numUpdateAssetTxs\n * @property {Array<string>} numConsumeAssetTxs\n * @property {Array<number>} tps\n * @property {number} maxTps\n * @property {number} avgTps\n * @property {number} avgBlockTime\n */\n\n/**\n * Structure of GraphQLClient.ForgeToken \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ForgeToken\n * @property {string} name\n * @property {string} symbol\n * @property {string} unit\n * @property {string} description\n * @property {string} icon\n * @property {number} decimal\n * @property {string} initialSupply\n * @property {string} totalSupply\n * @property {number} inflationRate\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.GasEstimate \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GasEstimate\n * @property {string} max\n */\n\n/**\n * Structure of GraphQLClient.GeoInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GeoInfo\n * @property {string} city\n * @property {string} country\n * @property {number} latitude\n * @property {number} longitude\n */\n\n/**\n * Structure of GraphQLClient.IndexedAccountState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedAccountState\n * @property {string} address\n * @property {string} balance\n * @property {string} numAssets\n * @property {string} numTxs\n * @property {string} nonce\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {string} moniker\n * @property {string} migratedFrom\n * @property {string} migratedTo\n * @property {string} totalReceivedStakes\n * @property {string} totalStakes\n * @property {string} totalUnstakes\n * @property {Array<string>} recentNumTxs\n * @property {Array<...GraphQLClient.TokenInfo>} tokens\n */\n\n/**\n * Structure of GraphQLClient.IndexedAssetState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedAssetState\n * @property {string} address\n * @property {string} owner\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {string} moniker\n * @property {boolean} readonly\n * @property {string} consumedTime\n * @property {string} issuer\n * @property {string} parent\n * @property {boolean} transferrable\n * @property {string} ttl\n * @property {...GraphQLClient.NFTDisplay} display\n * @property {...GraphQLClient.NFTEndpoint} endpoint\n * @property {Array<string>} tags\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.IndexedBlock \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedBlock\n * @property {string} height\n * @property {string} time\n * @property {string} proposer\n * @property {string} numTxs\n * @property {string} numInvalidTxs\n */\n\n/**\n * Structure of GraphQLClient.IndexedFactoryInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedFactoryInput\n * @property {string} value\n * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens\n * @property {Array<string>} assets\n * @property {Array<...GraphQLClient.VariableInput>} variables\n */\n\n/**\n * Structure of GraphQLClient.IndexedFactoryState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedFactoryState\n * @property {string} address\n * @property {string} owner\n * @property {string} name\n * @property {string} description\n * @property {string} settlement\n * @property {string} limit\n * @property {Array<string>} trustedIssuers\n * @property {...GraphQLClient.IndexedFactoryInput} input\n * @property {...GraphQLClient.CreateAssetTx} output\n * @property {Array<...GraphQLClient.AssetFactoryHook>} hooks\n * @property {...GraphQLClient.Any} data\n * @property {string} balance\n * @property {Array<...GraphQLClient.TokenInfo>} tokens\n * @property {number} numMinted\n * @property {string} lastSettlement\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {...GraphQLClient.NFTDisplay} display\n */\n\n/**\n * Structure of GraphQLClient.IndexedRollupBlock \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedRollupBlock\n * @property {string} hash\n * @property {number} height\n * @property {string} merkleRoot\n * @property {string} previousHash\n * @property {string} txsHash\n * @property {Array<string>} txs\n * @property {string} proposer\n * @property {Array<...GraphQLClient.Multisig>} signatures\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {string} rollup\n * @property {string} mintedAmount\n * @property {string} burnedAmount\n * @property {string} rewardAmount\n * @property {boolean} governance\n * @property {...GraphQLClient.IndexedTokenInput} tokenInfo\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.IndexedRollupState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedRollupState\n * @property {string} address\n * @property {string} tokenAddress\n * @property {string} vaultAddress\n * @property {string} contractAddress\n * @property {Array<...GraphQLClient.RollupValidator>} seedValidators\n * @property {Array<...GraphQLClient.RollupValidator>} validators\n * @property {string} minStakeAmount\n * @property {string} maxStakeAmount\n * @property {number} minSignerCount\n * @property {number} maxSignerCount\n * @property {number} minBlockSize\n * @property {number} maxBlockSize\n * @property {number} minBlockInterval\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {...GraphQLClient.IndexedTokenInput} tokenInfo\n * @property {string} issuer\n * @property {number} depositFeeRate\n * @property {number} withdrawFeeRate\n * @property {number} proposerFeeShare\n * @property {string} minDepositAmount\n * @property {string} minWithdrawAmount\n * @property {number} blockHeight\n * @property {string} blockHash\n * @property {number} minBlockConfirmation\n * @property {string} totalDepositAmount\n * @property {string} totalWithdrawAmount\n * @property {string} maxDepositAmount\n * @property {string} maxWithdrawAmount\n * @property {string} minDepositFee\n * @property {string} maxDepositFee\n * @property {string} minWithdrawFee\n * @property {string} maxWithdrawFee\n * @property {boolean} paused\n * @property {...GraphQLClient.ForeignToken} foreignToken\n * @property {number} leaveWaitingPeriod\n * @property {number} publisherFeeShare\n * @property {number} publishWaitingPeriod\n * @property {number} publishSlashRate\n * @property {Array<string>} migrateHistory\n * @property {boolean} closed\n * @property {Array<string>} vaultHistory\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.IndexedRollupValidator \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedRollupValidator\n * @property {string} pk\n * @property {string} address\n * @property {string} moniker\n * @property {string} endpoint\n * @property {string} joinTime\n * @property {string} leaveTime\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {string} totalStake\n * @property {string} revokedStake\n * @property {string} availableStake\n * @property {string} totalGain\n * @property {number} proposedBlockCount\n * @property {number} verifiedBlockCount\n * @property {number} latestBlockHeight\n * @property {string} latestBlockHash\n * @property {string} rollup\n */\n\n/**\n * Structure of GraphQLClient.IndexedStakeState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedStakeState\n * @property {string} address\n * @property {string} sender\n * @property {string} receiver\n * @property {Array<...GraphQLClient.TokenInfo>} tokens\n * @property {Array<string>} assets\n * @property {boolean} revocable\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {string} message\n * @property {number} revokeWaitingPeriod\n * @property {Array<...GraphQLClient.TokenInfo>} revokedTokens\n * @property {Array<string>} revokedAssets\n * @property {Array<string>} slashers\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.IndexedTokenInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedTokenInput\n * @property {string} address\n * @property {string} value\n * @property {number} decimal\n * @property {string} unit\n * @property {string} symbol\n */\n\n/**\n * Structure of GraphQLClient.IndexedTokenState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedTokenState\n * @property {string} name\n * @property {string} description\n * @property {string} symbol\n * @property {string} unit\n * @property {number} decimal\n * @property {string} issuer\n * @property {string} icon\n * @property {string} totalSupply\n * @property {string} address\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n * @property {...GraphQLClient.ForeignToken} foreignToken\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.IndexedTransaction \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.IndexedTransaction\n * @property {string} hash\n * @property {string} sender\n * @property {string} receiver\n * @property {string} time\n * @property {string} type\n * @property {...GraphQLClient.Transaction} tx\n * @property {boolean} valid\n * @property {string} code\n * @property {Array<...GraphQLClient.TokenSymbol>} tokenSymbols\n * @property {Array<...GraphQLClient.TransactionReceipt>} receipts\n */\n\n/**\n * Structure of GraphQLClient.JoinRollupTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.JoinRollupTx\n * @property {string} rollup\n * @property {string} endpoint\n * @property {...GraphQLClient.Evidence} evidence\n * @property {Array<...GraphQLClient.Multisig>} signatures\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.KVPair \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.KVPair\n * @property {string} key\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.LeaveRollupTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.LeaveRollupTx\n * @property {string} rollup\n * @property {...GraphQLClient.Evidence} evidence\n * @property {Array<...GraphQLClient.Multisig>} signatures\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.MigrateRollupTx \n *\n * Checkout the following snippet for the format of MigrateRollupTx:\n * ```json\n{\n  \"rollup\": \"abc\",\n  \"to\": \"abc\",\n  \"type\": \"abc\",\n  \"message\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.MigrateRollupTx\n * @property {string} rollup\n * @property {string} to\n * @property {string} type\n * @property {string} message\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.MintAssetTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.MintAssetTx\n * @property {string} factory\n * @property {string} address\n * @property {Array<string>} assets\n * @property {Array<...GraphQLClient.VariableInput>} variables\n * @property {string} owner\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.Multisig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Multisig\n * @property {string} signer\n * @property {string} pk\n * @property {string} signature\n * @property {string} delegator\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.NFTDisplay \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NFTDisplay\n * @property {string} type\n * @property {string} content\n */\n\n/**\n * Structure of GraphQLClient.NFTEndpoint \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NFTEndpoint\n * @property {string} id\n * @property {string} scope\n */\n\n/**\n * Structure of GraphQLClient.NFTIssuer \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NFTIssuer\n * @property {string} id\n * @property {string} pk\n * @property {string} name\n */\n\n/**\n * Structure of GraphQLClient.NetInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NetInfo\n * @property {boolean} listening\n * @property {Array<string>} listeners\n * @property {number} nPeers\n * @property {Array<...GraphQLClient.PeerInfo>} peers\n */\n\n/**\n * Structure of GraphQLClient.NodeInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NodeInfo\n * @property {string} id\n * @property {string} network\n * @property {string} moniker\n * @property {string} consensusVersion\n * @property {boolean} synced\n * @property {string} appHash\n * @property {string} blockHash\n * @property {string} blockHeight\n * @property {string} blockTime\n * @property {string} address\n * @property {string} votingPower\n * @property {string} totalTxs\n * @property {string} version\n * @property {Array<...GraphQLClient.NodeInfo_ForgeAppsVersionEntry>} forgeAppsVersion\n * @property {Array<string>} supportedTxs\n * @property {string} ip\n * @property {...GraphQLClient.GeoInfo} geoInfo\n * @property {string} p2pAddress\n */\n\n/**\n * Structure of GraphQLClient.NodeInfo_ForgeAppsVersionEntry \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.NodeInfo_ForgeAppsVersionEntry\n * @property {string} key\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.PageInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PageInfo\n * @property {string} cursor\n * @property {boolean} next\n * @property {number} total\n */\n\n/**\n * Structure of GraphQLClient.PartSetHeader \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PartSetHeader\n * @property {number} total\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.PauseRollupTx \n *\n * Checkout the following snippet for the format of PauseRollupTx:\n * ```json\n{\n  \"rollup\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PauseRollupTx\n * @property {string} rollup\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.PeerInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PeerInfo\n * @property {string} id\n * @property {string} network\n * @property {string} consensusVersion\n * @property {string} moniker\n * @property {string} ip\n * @property {...GraphQLClient.GeoInfo} geoInfo\n */\n\n/**\n * Structure of GraphQLClient.PubKey \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.PubKey\n * @property {string} type\n * @property {string} data\n */\n\n/**\n * Structure of GraphQLClient.ReceiptChange \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ReceiptChange\n * @property {string} target\n * @property {string} action\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.ResponseEstimateGas \n *\n * Checkout the following snippet for the format of ResponseEstimateGas:\n * ```json\n{\n  \"code\": \"abc\",\n  \"estimate\": {\n    \"max\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseEstimateGas\n * @property {string} code\n * @property {...GraphQLClient.GasEstimate} estimate\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetAccountState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetAccountState\n * @property {string} code\n * @property {...GraphQLClient.AccountState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetAccountTokens \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetAccountTokens\n * @property {string} code\n * @property {Array<...GraphQLClient.AccountToken>} tokens\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetAssetState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetAssetState\n * @property {string} code\n * @property {...GraphQLClient.AssetState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetBlock \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetBlock\n * @property {string} code\n * @property {...GraphQLClient.BlockInfo} block\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetBlocks \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetBlocks\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.BlockInfoSimple>} blocks\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetChainInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetChainInfo\n * @property {string} code\n * @property {...GraphQLClient.ChainInfo} info\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetConfig \n *\n * Checkout the following snippet for the format of ResponseGetConfig:\n * ```json\n{\n  \"code\": \"abc\",\n  \"config\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetConfig\n * @property {string} code\n * @property {string} config\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetDelegateState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetDelegateState\n * @property {string} code\n * @property {...GraphQLClient.DelegateState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetEvidenceState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetEvidenceState\n * @property {string} code\n * @property {...GraphQLClient.EvidenceState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetFactoryState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetFactoryState\n * @property {string} code\n * @property {...GraphQLClient.AssetFactoryState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetForgeState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetForgeState\n * @property {string} code\n * @property {...GraphQLClient.ForgeState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetForgeStats \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetForgeStats\n * @property {string} code\n * @property {...GraphQLClient.ForgeStats} forgeStats\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetNetInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetNetInfo\n * @property {string} code\n * @property {...GraphQLClient.NetInfo} netInfo\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetNodeInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetNodeInfo\n * @property {string} code\n * @property {...GraphQLClient.NodeInfo} info\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetRollupBlock \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetRollupBlock\n * @property {string} code\n * @property {...GraphQLClient.RollupBlock} block\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetRollupState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetRollupState\n * @property {string} code\n * @property {...GraphQLClient.RollupState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetStakeState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetStakeState\n * @property {string} code\n * @property {...GraphQLClient.StakeState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetTokenState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetTokenState\n * @property {string} code\n * @property {...GraphQLClient.TokenState} state\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetTx\n * @property {string} code\n * @property {...GraphQLClient.TransactionInfo} info\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetUnconfirmedTxs \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetUnconfirmedTxs\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {...GraphQLClient.UnconfirmedTxs} unconfirmedTxs\n */\n\n/**\n * Structure of GraphQLClient.ResponseGetValidatorsInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseGetValidatorsInfo\n * @property {string} code\n * @property {...GraphQLClient.ValidatorsInfo} validatorsInfo\n */\n\n/**\n * Structure of GraphQLClient.ResponseListAssetTransactions \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListAssetTransactions\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedTransaction>} transactions\n */\n\n/**\n * Structure of GraphQLClient.ResponseListAssets \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListAssets\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedAssetState>} assets\n */\n\n/**\n * Structure of GraphQLClient.ResponseListBlocks \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListBlocks\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedBlock>} blocks\n */\n\n/**\n * Structure of GraphQLClient.ResponseListFactories \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListFactories\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedFactoryState>} factories\n */\n\n/**\n * Structure of GraphQLClient.ResponseListRollupBlocks \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListRollupBlocks\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedRollupBlock>} blocks\n */\n\n/**\n * Structure of GraphQLClient.ResponseListRollupValidators \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListRollupValidators\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedRollupValidator>} validators\n */\n\n/**\n * Structure of GraphQLClient.ResponseListRollups \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListRollups\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedRollupState>} rollups\n */\n\n/**\n * Structure of GraphQLClient.ResponseListStakes \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListStakes\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedStakeState>} stakes\n */\n\n/**\n * Structure of GraphQLClient.ResponseListTokens \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListTokens\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedTokenState>} tokens\n */\n\n/**\n * Structure of GraphQLClient.ResponseListTopAccounts \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListTopAccounts\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedAccountState>} accounts\n */\n\n/**\n * Structure of GraphQLClient.ResponseListTransactions \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseListTransactions\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.IndexedTransaction>} transactions\n */\n\n/**\n * Structure of GraphQLClient.ResponseSearch \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseSearch\n * @property {string} code\n * @property {...GraphQLClient.PageInfo} page\n * @property {Array<...GraphQLClient.SearchResult>} results\n */\n\n/**\n * Structure of GraphQLClient.ResponseSendTx \n *\n * Checkout the following snippet for the format of ResponseSendTx:\n * ```json\n{\n  \"code\": \"abc\",\n  \"hash\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResponseSendTx\n * @property {string} code\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.ResumeRollupTx \n *\n * Checkout the following snippet for the format of ResumeRollupTx:\n * ```json\n{\n  \"rollup\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ResumeRollupTx\n * @property {string} rollup\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.RevokeDelegateTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RevokeDelegateTx\n * @property {string} address\n * @property {string} to\n * @property {Array<string>} typeUrls\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.RevokeStakeTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RevokeStakeTx\n * @property {string} address\n * @property {Array<...GraphQLClient.TransactionInput>} outputs\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.RollupBlock \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RollupBlock\n * @property {string} hash\n * @property {number} height\n * @property {string} merkleRoot\n * @property {string} previousHash\n * @property {string} txsHash\n * @property {Array<string>} txs\n * @property {string} proposer\n * @property {Array<...GraphQLClient.Multisig>} signatures\n * @property {string} rollup\n * @property {string} mintedAmount\n * @property {string} burnedAmount\n * @property {string} rewardAmount\n * @property {string} minReward\n * @property {boolean} governance\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.RollupState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RollupState\n * @property {string} address\n * @property {string} tokenAddress\n * @property {string} vaultAddress\n * @property {string} contractAddress\n * @property {Array<...GraphQLClient.RollupValidator>} seedValidators\n * @property {Array<...GraphQLClient.RollupValidator>} validators\n * @property {string} minStakeAmount\n * @property {string} maxStakeAmount\n * @property {number} minSignerCount\n * @property {number} maxSignerCount\n * @property {number} minBlockSize\n * @property {number} maxBlockSize\n * @property {number} minBlockInterval\n * @property {number} minBlockConfirmation\n * @property {string} issuer\n * @property {number} depositFeeRate\n * @property {number} withdrawFeeRate\n * @property {number} proposerFeeShare\n * @property {number} publisherFeeShare\n * @property {string} minDepositAmount\n * @property {string} minWithdrawAmount\n * @property {number} blockHeight\n * @property {string} blockHash\n * @property {...GraphQLClient.IndexedTokenInput} tokenInfo\n * @property {string} totalDepositAmount\n * @property {string} totalWithdrawAmount\n * @property {string} maxDepositAmount\n * @property {string} maxWithdrawAmount\n * @property {string} minDepositFee\n * @property {string} maxDepositFee\n * @property {string} minWithdrawFee\n * @property {string} maxWithdrawFee\n * @property {boolean} paused\n * @property {...GraphQLClient.ForeignToken} foreignToken\n * @property {number} leaveWaitingPeriod\n * @property {number} publishWaitingPeriod\n * @property {number} publishSlashRate\n * @property {Array<string>} migrateHistory\n * @property {boolean} closed\n * @property {Array<string>} vaultHistory\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.RollupValidator \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.RollupValidator\n * @property {string} pk\n * @property {string} address\n * @property {string} endpoint\n */\n\n/**\n * Structure of GraphQLClient.SearchResult \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SearchResult\n * @property {string} type\n * @property {string} id\n */\n\n/**\n * Structure of GraphQLClient.SlashStakeTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SlashStakeTx\n * @property {string} address\n * @property {Array<...GraphQLClient.TransactionInput>} outputs\n * @property {string} message\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.StakeState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeState\n * @property {string} address\n * @property {string} sender\n * @property {string} receiver\n * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens\n * @property {Array<string>} assets\n * @property {boolean} revocable\n * @property {string} message\n * @property {number} revokeWaitingPeriod\n * @property {Array<...GraphQLClient.IndexedTokenInput>} revokedTokens\n * @property {Array<string>} revokedAssets\n * @property {Array<string>} slashers\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.StakeTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StakeTx\n * @property {string} address\n * @property {string} receiver\n * @property {Array<...GraphQLClient.TransactionInput>} inputs\n * @property {boolean} locked\n * @property {string} message\n * @property {number} revokeWaitingPeriod\n * @property {Array<string>} slashers\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.StateContext \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.StateContext\n * @property {...GraphQLClient.TransactionInfo} genesisTx\n * @property {...GraphQLClient.TransactionInfo} renaissanceTx\n * @property {string} genesisTime\n * @property {string} renaissanceTime\n */\n\n/**\n * Structure of GraphQLClient.TokenInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TokenInfo\n * @property {string} address\n * @property {string} balance\n * @property {number} decimal\n * @property {string} unit\n * @property {string} symbol\n */\n\n/**\n * Structure of GraphQLClient.TokenInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TokenInput\n * @property {string} address\n * @property {string} value\n */\n\n/**\n * Structure of GraphQLClient.TokenState \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TokenState\n * @property {string} address\n * @property {string} issuer\n * @property {string} name\n * @property {string} description\n * @property {string} symbol\n * @property {string} unit\n * @property {number} decimal\n * @property {string} icon\n * @property {string} totalSupply\n * @property {...GraphQLClient.ForeignToken} foreignToken\n * @property {...GraphQLClient.StateContext} context\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.TokenSymbol \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TokenSymbol\n * @property {string} address\n * @property {string} symbol\n * @property {number} decimal\n * @property {string} unit\n */\n\n/**\n * Structure of GraphQLClient.Transaction \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Transaction\n * @property {string} from\n * @property {string} delegator\n * @property {string} nonce\n * @property {string} chainId\n * @property {string} pk\n * @property {string} signature\n * @property {Array<...GraphQLClient.Multisig>} signatures\n * @property {undefined} itxJson\n * @property {string} sender\n * @property {string} receiver\n * @property {string} serviceFee\n * @property {string} gasFee\n * @property {string} gasPaid\n */\n\n/**\n * Structure of GraphQLClient.TransactionConfig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransactionConfig\n * @property {number} maxAssetSize\n * @property {number} maxListSize\n * @property {number} maxMultisig\n * @property {...GraphQLClient.DelegateConfig} delegate\n * @property {Array<...GraphQLClient.TxFeeConfig>} txFee\n * @property {...GraphQLClient.TxGasConfig} txGas\n */\n\n/**\n * Structure of GraphQLClient.TransactionInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransactionInfo\n * @property {...GraphQLClient.Transaction} tx\n * @property {string} height\n * @property {number} index\n * @property {string} hash\n * @property {Array<...GraphQLClient.KVPair>} tags\n * @property {string} code\n * @property {string} time\n * @property {Array<...GraphQLClient.TransactionReceipt>} receipts\n * @property {string} sender\n * @property {string} receiver\n * @property {Array<...GraphQLClient.TokenSymbol>} tokenSymbols\n */\n\n/**\n * Structure of GraphQLClient.TransactionInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransactionInput\n * @property {string} owner\n * @property {Array<...GraphQLClient.TokenInput>} tokens\n * @property {Array<string>} assets\n */\n\n/**\n * Structure of GraphQLClient.TransactionReceipt \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransactionReceipt\n * @property {string} address\n * @property {Array<...GraphQLClient.ReceiptChange>} changes\n */\n\n/**\n * Structure of GraphQLClient.TransferTx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransferTx\n * @property {string} to\n * @property {string} value\n * @property {Array<string>} assets\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.TransferV2Tx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransferV2Tx\n * @property {string} to\n * @property {string} value\n * @property {Array<string>} assets\n * @property {Array<...GraphQLClient.TokenInput>} tokens\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.TransferV3Tx \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TransferV3Tx\n * @property {Array<...GraphQLClient.TransactionInput>} inputs\n * @property {Array<...GraphQLClient.TransactionInput>} outputs\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.TxFeeConfig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TxFeeConfig\n * @property {string} typeUrl\n * @property {string} fee\n */\n\n/**\n * Structure of GraphQLClient.TxGasConfig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.TxGasConfig\n * @property {number} price\n * @property {number} createState\n * @property {number} updateState\n * @property {number} dataStorage\n * @property {string} minStake\n * @property {string} maxStake\n * @property {number} stakeLockPeriod\n */\n\n/**\n * Structure of GraphQLClient.UnconfirmedTxs \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UnconfirmedTxs\n * @property {number} nTxs\n * @property {Array<...GraphQLClient.Transaction>} txs\n */\n\n/**\n * Structure of GraphQLClient.UpdateAssetTx \n *\n * Checkout the following snippet for the format of UpdateAssetTx:\n * ```json\n{\n  \"address\": \"abc\",\n  \"moniker\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpdateAssetTx\n * @property {string} address\n * @property {string} moniker\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.UpdateRollupTx \n *\n * Checkout the following snippet for the format of UpdateRollupTx:\n * ```json\n{\n  \"minStakeAmount\": \"abc\",\n  \"maxStakeAmount\": \"abc\",\n  \"minSignerCount\": 123,\n  \"maxSignerCount\": 123,\n  \"minBlockSize\": 123,\n  \"maxBlockSize\": 123,\n  \"minBlockInterval\": 123,\n  \"minBlockConfirmation\": 123,\n  \"depositFeeRate\": 123,\n  \"withdrawFeeRate\": 123,\n  \"proposerFeeShare\": 123,\n  \"minDepositAmount\": \"abc\",\n  \"minWithdrawAmount\": \"abc\",\n  \"maxDepositAmount\": \"abc\",\n  \"maxWithdrawAmount\": \"abc\",\n  \"minDepositFee\": \"abc\",\n  \"maxDepositFee\": \"abc\",\n  \"minWithdrawFee\": \"abc\",\n  \"maxWithdrawFee\": \"abc\",\n  \"publisherFeeShare\": 123,\n  \"leaveWaitingPeriod\": 123,\n  \"publishWaitingPeriod\": 123,\n  \"publishSlashRate\": 123,\n  \"rollup\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpdateRollupTx\n * @property {string} minStakeAmount\n * @property {string} maxStakeAmount\n * @property {number} minSignerCount\n * @property {number} maxSignerCount\n * @property {number} minBlockSize\n * @property {number} maxBlockSize\n * @property {number} minBlockInterval\n * @property {number} minBlockConfirmation\n * @property {number} depositFeeRate\n * @property {number} withdrawFeeRate\n * @property {number} proposerFeeShare\n * @property {string} minDepositAmount\n * @property {string} minWithdrawAmount\n * @property {string} maxDepositAmount\n * @property {string} maxWithdrawAmount\n * @property {string} minDepositFee\n * @property {string} maxDepositFee\n * @property {string} minWithdrawFee\n * @property {string} maxWithdrawFee\n * @property {number} publisherFeeShare\n * @property {number} leaveWaitingPeriod\n * @property {number} publishWaitingPeriod\n * @property {number} publishSlashRate\n * @property {string} rollup\n * @property {...GraphQLClient.Any} data\n */\n\n/**\n * Structure of GraphQLClient.UpgradeInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeInfo\n * @property {string} height\n * @property {string} version\n */\n\n/**\n * Structure of GraphQLClient.UpgradeNodeTx \n *\n * Checkout the following snippet for the format of UpgradeNodeTx:\n * ```json\n{\n  \"height\": 123,\n  \"version\": \"abc\",\n  \"override\": true\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeNodeTx\n * @property {number} height\n * @property {string} version\n * @property {boolean} override\n */\n\n/**\n * Structure of GraphQLClient.UpgradeTask \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeTask\n * @property {...GraphQLClient.UpgradeType} type\n * @property {string} dataHash\n * @property {Array<...GraphQLClient.UpgradeAction>} actions\n */\n\n/**\n * Structure of GraphQLClient.UpgradeTasks \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.UpgradeTasks\n * @property {Array<...GraphQLClient.UpgradeTask>} item\n */\n\n/**\n * Structure of GraphQLClient.Validator \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Validator\n * @property {string} address\n * @property {string} power\n */\n\n/**\n * Structure of GraphQLClient.ValidatorInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidatorInfo\n * @property {string} address\n * @property {...GraphQLClient.PubKey} pubKey\n * @property {string} votingPower\n * @property {string} proposerPriority\n * @property {string} name\n * @property {...GraphQLClient.GeoInfo} geoInfo\n */\n\n/**\n * Structure of GraphQLClient.ValidatorsInfo \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ValidatorsInfo\n * @property {string} blockHeight\n * @property {Array<...GraphQLClient.ValidatorInfo>} validators\n */\n\n/**\n * Structure of GraphQLClient.VariableInput \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.VariableInput\n * @property {string} name\n * @property {string} value\n * @property {string} description\n * @property {boolean} required\n */\n\n/**\n * Structure of GraphQLClient.VaultConfig \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.VaultConfig\n * @property {string} slashedStake\n * @property {string} txFee\n * @property {Array<string>} txGas\n */\n\n/**\n * Structure of GraphQLClient.Version \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.Version\n * @property {number} block\n * @property {number} app\n */\n\n/**\n * Structure of GraphQLClient.WalletType \n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.WalletType\n * @property {...GraphQLClient.KeyType} pk\n * @property {...GraphQLClient.HashType} hash\n * @property {...GraphQLClient.EncodingType} address\n * @property {...GraphQLClient.RoleType} role\n */\n\n/**\n * Structure of GraphQLClient.WithdrawTokenV2Tx \n *\n * Checkout the following snippet for the format of WithdrawTokenV2Tx:\n * ```json\n{\n  \"token\": {\n    \"address\": \"abc\",\n    \"value\": \"abc\"\n  },\n  \"to\": \"abc\",\n  \"rollup\": \"abc\",\n  \"proposer\": \"abc\",\n  \"maxFee\": \"abc\",\n  \"actualFee\": \"abc\",\n  \"data\": {\n    \"typeUrl\": \"abc\",\n    \"value\": \"abc\"\n  }\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.WithdrawTokenV2Tx\n * @property {...GraphQLClient.TokenInput} token\n * @property {string} to\n * @property {string} rollup\n * @property {string} proposer\n * @property {string} maxFee\n * @property {string} actualFee\n * @property {...GraphQLClient.Any} data\n */\n\n\n/**\n * Structure of GraphQLClient.GetAccountStateParams \n *\n * Checkout the following snippet for the format of GetAccountStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetAccountStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetAssetStateParams \n *\n * Checkout the following snippet for the format of GetAssetStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetAssetStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetFactoryStateParams \n *\n * Checkout the following snippet for the format of GetFactoryStateParams:\n * ```json\n{\n  \"address\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetFactoryStateParams\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.GetDelegateStateParams \n *\n * Checkout the following snippet for the format of GetDelegateStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetDelegateStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetTokenStateParams \n *\n * Checkout the following snippet for the format of GetTokenStateParams:\n * ```json\n{\n  \"address\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetTokenStateParams\n * @property {string} address\n */\n\n/**\n * Structure of GraphQLClient.GetEvidenceStateParams \n *\n * Checkout the following snippet for the format of GetEvidenceStateParams:\n * ```json\n{\n  \"hash\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetEvidenceStateParams\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.GetForgeStateParams \n *\n * Checkout the following snippet for the format of GetForgeStateParams:\n * ```json\n{\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetForgeStateParams\n * @property {string} height\n * @property {Array<string>} keys\n */\n\n/**\n * Structure of GraphQLClient.GetTxParams \n *\n * Checkout the following snippet for the format of GetTxParams:\n * ```json\n{\n  \"hash\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetTxParams\n * @property {string} hash\n */\n\n/**\n * Structure of GraphQLClient.GetBlockParams \n *\n * Checkout the following snippet for the format of GetBlockParams:\n * ```json\n{\n  \"height\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetBlockParams\n * @property {string} height\n */\n\n/**\n * Structure of GraphQLClient.GetBlocksParams \n *\n * Checkout the following snippet for the format of GetBlocksParams:\n * ```json\n{\n  \"emptyExcluded\": true\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetBlocksParams\n * @property {boolean} emptyExcluded\n * @property {...GraphQLClient.RangeFilterInput} heightFilter\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.GetUnconfirmedTxsParams \n *\n * Checkout the following snippet for the format of GetUnconfirmedTxsParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetUnconfirmedTxsParams\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.GetConfigParams \n *\n * Checkout the following snippet for the format of GetConfigParams:\n * ```json\n{\n  \"parsed\": true\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetConfigParams\n * @property {boolean} parsed\n */\n\n/**\n * Structure of GraphQLClient.ListAssetTransactionsParams \n *\n * Checkout the following snippet for the format of ListAssetTransactionsParams:\n * ```json\n{\n  \"address\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListAssetTransactionsParams\n * @property {string} address\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListAssetsParams \n *\n * Checkout the following snippet for the format of ListAssetsParams:\n * ```json\n{\n  \"ownerAddress\": \"abc\",\n  \"factoryAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListAssetsParams\n * @property {string} ownerAddress\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} factoryAddress\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n */\n\n/**\n * Structure of GraphQLClient.ListBlocksParams \n *\n * Checkout the following snippet for the format of ListBlocksParams:\n * ```json\n{\n  \"proposer\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListBlocksParams\n * @property {...GraphQLClient.RangeFilterInput} heightFilter\n * @property {...GraphQLClient.RangeFilterInput} numInvalidTxsFilter\n * @property {...GraphQLClient.RangeFilterInput} numTxsFilter\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} proposer\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n */\n\n/**\n * Structure of GraphQLClient.ListTopAccountsParams \n *\n * Checkout the following snippet for the format of ListTopAccountsParams:\n * ```json\n{\n  \"tokenAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListTopAccountsParams\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} tokenAddress\n */\n\n/**\n * Structure of GraphQLClient.ListTransactionsParams \n *\n * Checkout the following snippet for the format of ListTransactionsParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListTransactionsParams\n * @property {...GraphQLClient.AddressFilterInput} addressFilter\n * @property {...GraphQLClient.PageInput} paging\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n * @property {...GraphQLClient.TypeFilterInput} typeFilter\n * @property {...GraphQLClient.ValidityFilterInput} validityFilter\n * @property {...GraphQLClient.FactoryFilterInput} factoryFilter\n * @property {...GraphQLClient.TokenFilterInput} tokenFilter\n * @property {...GraphQLClient.AssetFilterInput} assetFilter\n * @property {...GraphQLClient.AccountFilterInput} accountFilter\n * @property {...GraphQLClient.TxFilterInput} txFilter\n * @property {...GraphQLClient.RollupFilterInput} rollupFilter\n * @property {...GraphQLClient.StakeFilterInput} stakeFilter\n */\n\n/**\n * Structure of GraphQLClient.ListTokensParams \n *\n * Checkout the following snippet for the format of ListTokensParams:\n * ```json\n{\n  \"issuerAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListTokensParams\n * @property {string} issuerAddress\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.ListFactoriesParams \n *\n * Checkout the following snippet for the format of ListFactoriesParams:\n * ```json\n{\n  \"ownerAddress\": \"abc\",\n  \"addressList\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListFactoriesParams\n * @property {string} ownerAddress\n * @property {Array<string>} addressList\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.GetAccountTokensParams \n *\n * Checkout the following snippet for the format of GetAccountTokensParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"token\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetAccountTokensParams\n * @property {string} address\n * @property {string} token\n */\n\n/**\n * Structure of GraphQLClient.GetStakeStateParams \n *\n * Checkout the following snippet for the format of GetStakeStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetStakeStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<string>} keys\n */\n\n/**\n * Structure of GraphQLClient.ListStakesParams \n *\n * Checkout the following snippet for the format of ListStakesParams:\n * ```json\n{}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListStakesParams\n * @property {...GraphQLClient.AddressFilterInput} addressFilter\n * @property {...GraphQLClient.AssetFilterInput} assetFilter\n * @property {...GraphQLClient.TimeFilterInput} timeFilter\n * @property {...GraphQLClient.PageInput} paging\n */\n\n/**\n * Structure of GraphQLClient.GetRollupStateParams \n *\n * Checkout the following snippet for the format of GetRollupStateParams:\n * ```json\n{\n  \"address\": \"abc\",\n  \"height\": \"abc\",\n  \"keys\": [\n    \"abc\"\n  ]\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetRollupStateParams\n * @property {string} address\n * @property {string} height\n * @property {Array<string>} keys\n */\n\n/**\n * Structure of GraphQLClient.ListRollupsParams \n *\n * Checkout the following snippet for the format of ListRollupsParams:\n * ```json\n{\n  \"tokenAddress\": \"abc\",\n  \"erc20TokenAddress\": \"abc\",\n  \"foreignTokenAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListRollupsParams\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} tokenAddress\n * @property {string} erc20TokenAddress\n * @property {string} foreignTokenAddress\n */\n\n/**\n * Structure of GraphQLClient.GetRollupBlockParams \n *\n * Checkout the following snippet for the format of GetRollupBlockParams:\n * ```json\n{\n  \"hash\": \"abc\",\n  \"height\": \"abc\",\n  \"rollupAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.GetRollupBlockParams\n * @property {string} hash\n * @property {string} height\n * @property {string} rollupAddress\n */\n\n/**\n * Structure of GraphQLClient.ListRollupBlocksParams \n *\n * Checkout the following snippet for the format of ListRollupBlocksParams:\n * ```json\n{\n  \"rollupAddress\": \"abc\",\n  \"tokenAddress\": \"abc\",\n  \"proposer\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListRollupBlocksParams\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} rollupAddress\n * @property {string} tokenAddress\n * @property {string} proposer\n * @property {...GraphQLClient.ValidatorFilterInput} validatorFilter\n * @property {...GraphQLClient.TxFilterInput} txFilter\n */\n\n/**\n * Structure of GraphQLClient.ListRollupValidatorsParams \n *\n * Checkout the following snippet for the format of ListRollupValidatorsParams:\n * ```json\n{\n  \"rollupAddress\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.ListRollupValidatorsParams\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} rollupAddress\n */\n\n/**\n * Structure of GraphQLClient.SearchParams \n *\n * Checkout the following snippet for the format of SearchParams:\n * ```json\n{\n  \"keyword\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SearchParams\n * @property {...GraphQLClient.PageInput} paging\n * @property {string} keyword\n */\n\n/**\n * Structure of GraphQLClient.EstimateGasParams \n *\n * Checkout the following snippet for the format of EstimateGasParams:\n * ```json\n{\n  \"typeUrl\": \"abc\",\n  \"tx\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.EstimateGasParams\n * @property {string} typeUrl\n * @property {string} tx\n */\n\n/**\n * Structure of GraphQLClient.SendTxParams \n *\n * Checkout the following snippet for the format of SendTxParams:\n * ```json\n{\n  \"commit\": true,\n  \"token\": \"abc\",\n  \"tx\": \"abc\",\n  \"wallet\": \"abc\"\n}\n * ```\n *\n * @memberof GraphQLClient\n * @typedef {object} GraphQLClient.SendTxParams\n * @property {boolean} commit\n * @property {string} token\n * @property {string} tx\n * @property {string} wallet\n */\n\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.AccountMigrateTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.AccountMigrateTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send AccountMigrateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendAccountMigrateTx\n * @param {GraphQLClient.AccountMigrateTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.AcquireAssetV2TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.AcquireAssetV2Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send AcquireAssetV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendAcquireAssetV2Tx\n * @param {GraphQLClient.AcquireAssetV2TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.AcquireAssetV3TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.AcquireAssetV3Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send AcquireAssetV3Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendAcquireAssetV3Tx\n * @param {GraphQLClient.AcquireAssetV3TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ClaimBlockRewardTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ClaimBlockRewardTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ClaimBlockRewardTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendClaimBlockRewardTx\n * @param {GraphQLClient.ClaimBlockRewardTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ClaimStakeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ClaimStakeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ClaimStakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendClaimStakeTx\n * @param {GraphQLClient.ClaimStakeTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CloseRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CloseRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CloseRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCloseRollupTx\n * @param {GraphQLClient.CloseRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CreateAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CreateAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CreateAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCreateAssetTx\n * @param {GraphQLClient.CreateAssetTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CreateFactoryTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CreateFactoryTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CreateFactoryTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCreateFactoryTx\n * @param {GraphQLClient.CreateFactoryTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CreateRollupBlockTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CreateRollupBlockTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CreateRollupBlockTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCreateRollupBlockTx\n * @param {GraphQLClient.CreateRollupBlockTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CreateRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CreateRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CreateRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCreateRollupTx\n * @param {GraphQLClient.CreateRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.CreateTokenTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.CreateTokenTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send CreateTokenTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendCreateTokenTx\n * @param {GraphQLClient.CreateTokenTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DeclareTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DeclareTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DeclareTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDeclareTx\n * @param {GraphQLClient.DeclareTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DelegateTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DelegateTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DelegateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDelegateTx\n * @param {GraphQLClient.DelegateTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.DepositTokenV2TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.DepositTokenV2Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send DepositTokenV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendDepositTokenV2Tx\n * @param {GraphQLClient.DepositTokenV2TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ExchangeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ExchangeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ExchangeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendExchangeTx\n * @param {GraphQLClient.ExchangeTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ExchangeV2TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ExchangeV2Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ExchangeV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendExchangeV2Tx\n * @param {GraphQLClient.ExchangeV2TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.JoinRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.JoinRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send JoinRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendJoinRollupTx\n * @param {GraphQLClient.JoinRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.LeaveRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.LeaveRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send LeaveRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendLeaveRollupTx\n * @param {GraphQLClient.LeaveRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.MigrateRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.MigrateRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send MigrateRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendMigrateRollupTx\n * @param {GraphQLClient.MigrateRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.MintAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.MintAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send MintAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendMintAssetTx\n * @param {GraphQLClient.MintAssetTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.PauseRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.PauseRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send PauseRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendPauseRollupTx\n * @param {GraphQLClient.PauseRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.ResumeRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.ResumeRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send ResumeRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendResumeRollupTx\n * @param {GraphQLClient.ResumeRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.RevokeDelegateTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.RevokeDelegateTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send RevokeDelegateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendRevokeDelegateTx\n * @param {GraphQLClient.RevokeDelegateTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.RevokeStakeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.RevokeStakeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send RevokeStakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendRevokeStakeTx\n * @param {GraphQLClient.RevokeStakeTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.SlashStakeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.SlashStakeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send SlashStakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendSlashStakeTx\n * @param {GraphQLClient.SlashStakeTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.StakeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.StakeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send StakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendStakeTx\n * @param {GraphQLClient.StakeTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.TransferTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.TransferTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send TransferTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendTransferTx\n * @param {GraphQLClient.TransferTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.TransferV2TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.TransferV2Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send TransferV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendTransferV2Tx\n * @param {GraphQLClient.TransferV2TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.TransferV3TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.TransferV3Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send TransferV3Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendTransferV3Tx\n * @param {GraphQLClient.TransferV3TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.UpdateAssetTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.UpdateAssetTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send UpdateAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendUpdateAssetTx\n * @param {GraphQLClient.UpdateAssetTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.UpdateRollupTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.UpdateRollupTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send UpdateRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendUpdateRollupTx\n * @param {GraphQLClient.UpdateRollupTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.UpgradeNodeTxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.UpgradeNodeTx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send UpgradeNodeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendUpgradeNodeTx\n * @param {GraphQLClient.UpgradeNodeTxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n/**\n * @memberof GraphQLClient\n * @typedef {Object} GraphQLClient.WithdrawTokenV2TxInput\n * @prop {object} input\n * @prop {object} input.tx - data of the transaction\n * @prop {GraphQLClient.WithdrawTokenV2Tx} input.tx.itx - the actual transaction object\n * @prop {string} [input.tx.pk] - the sender pk\n * @prop {string} [input.tx.from] - the sender address, can be derived from wallet\n * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set\n * @prop {string} [input.tx.chainId] - the chainId\n * @prop {string} [input.tx.signature] - transaction signature\n * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction\n * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet\n * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction\n */\n\n/**\n * Send WithdrawTokenV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#sendWithdrawTokenV2Tx\n * @param {GraphQLClient.WithdrawTokenV2TxInput} params\n * @param {object} extra\n * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown\n */\n\n\n\n/**\n * Encode a AccountMigrateTx transaction for later use\n *\n * @name GraphQLClient#encodeAccountMigrateTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.AccountMigrateTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a AcquireAssetV2Tx transaction for later use\n *\n * @name GraphQLClient#encodeAcquireAssetV2Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.AcquireAssetV2TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a AcquireAssetV3Tx transaction for later use\n *\n * @name GraphQLClient#encodeAcquireAssetV3Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.AcquireAssetV3TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a ClaimBlockRewardTx transaction for later use\n *\n * @name GraphQLClient#encodeClaimBlockRewardTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ClaimBlockRewardTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a ClaimStakeTx transaction for later use\n *\n * @name GraphQLClient#encodeClaimStakeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ClaimStakeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a CloseRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeCloseRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CloseRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a CreateAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeCreateAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CreateAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a CreateFactoryTx transaction for later use\n *\n * @name GraphQLClient#encodeCreateFactoryTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CreateFactoryTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a CreateRollupBlockTx transaction for later use\n *\n * @name GraphQLClient#encodeCreateRollupBlockTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CreateRollupBlockTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a CreateRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeCreateRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CreateRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a CreateTokenTx transaction for later use\n *\n * @name GraphQLClient#encodeCreateTokenTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.CreateTokenTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a DeclareTx transaction for later use\n *\n * @name GraphQLClient#encodeDeclareTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DeclareTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a DelegateTx transaction for later use\n *\n * @name GraphQLClient#encodeDelegateTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DelegateTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a DepositTokenV2Tx transaction for later use\n *\n * @name GraphQLClient#encodeDepositTokenV2Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.DepositTokenV2TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a ExchangeTx transaction for later use\n *\n * @name GraphQLClient#encodeExchangeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ExchangeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a ExchangeV2Tx transaction for later use\n *\n * @name GraphQLClient#encodeExchangeV2Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ExchangeV2TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a JoinRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeJoinRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.JoinRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a LeaveRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeLeaveRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.LeaveRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a MigrateRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeMigrateRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.MigrateRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a MintAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeMintAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.MintAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a PauseRollupTx transaction for later use\n *\n * @name GraphQLClient#encodePauseRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.PauseRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a ResumeRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeResumeRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.ResumeRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a RevokeDelegateTx transaction for later use\n *\n * @name GraphQLClient#encodeRevokeDelegateTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.RevokeDelegateTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a RevokeStakeTx transaction for later use\n *\n * @name GraphQLClient#encodeRevokeStakeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.RevokeStakeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a SlashStakeTx transaction for later use\n *\n * @name GraphQLClient#encodeSlashStakeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.SlashStakeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a StakeTx transaction for later use\n *\n * @name GraphQLClient#encodeStakeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.StakeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a TransferTx transaction for later use\n *\n * @name GraphQLClient#encodeTransferTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.TransferTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a TransferV2Tx transaction for later use\n *\n * @name GraphQLClient#encodeTransferV2Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.TransferV2TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a TransferV3Tx transaction for later use\n *\n * @name GraphQLClient#encodeTransferV3Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.TransferV3TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a UpdateAssetTx transaction for later use\n *\n * @name GraphQLClient#encodeUpdateAssetTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.UpdateAssetTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a UpdateRollupTx transaction for later use\n *\n * @name GraphQLClient#encodeUpdateRollupTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.UpdateRollupTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a UpgradeNodeTx transaction for later use\n *\n * @name GraphQLClient#encodeUpgradeNodeTx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.UpgradeNodeTxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n/**\n * Encode a WithdrawTokenV2Tx transaction for later use\n *\n * @name GraphQLClient#encodeWithdrawTokenV2Tx\n * @function\n * @memberof GraphQLClient\n * @param {GraphQLClient.WithdrawTokenV2TxInput} params\n * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object\n */\n\n\n\n/**\n * getAccountState\n *\n * @name GraphQLClient#getAccountState\n * @param {GraphQLClient.GetAccountStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetAccountState>} Checkout {@link GraphQLClient.ResponseGetAccountState} for resolved data format\n */\n\n\n/**\n * getAssetState\n *\n * @name GraphQLClient#getAssetState\n * @param {GraphQLClient.GetAssetStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetAssetState>} Checkout {@link GraphQLClient.ResponseGetAssetState} for resolved data format\n */\n\n\n/**\n * getFactoryState\n *\n * @name GraphQLClient#getFactoryState\n * @param {GraphQLClient.GetFactoryStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetFactoryState>} Checkout {@link GraphQLClient.ResponseGetFactoryState} for resolved data format\n */\n\n\n/**\n * getDelegateState\n *\n * @name GraphQLClient#getDelegateState\n * @param {GraphQLClient.GetDelegateStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetDelegateState>} Checkout {@link GraphQLClient.ResponseGetDelegateState} for resolved data format\n */\n\n\n/**\n * getTokenState\n *\n * @name GraphQLClient#getTokenState\n * @param {GraphQLClient.GetTokenStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetTokenState>} Checkout {@link GraphQLClient.ResponseGetTokenState} for resolved data format\n */\n\n\n/**\n * getEvidenceState\n *\n * @name GraphQLClient#getEvidenceState\n * @param {GraphQLClient.GetEvidenceStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetEvidenceState>} Checkout {@link GraphQLClient.ResponseGetEvidenceState} for resolved data format\n */\n\n\n/**\n * getForgeState\n *\n * @name GraphQLClient#getForgeState\n * @param {GraphQLClient.GetForgeStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetForgeState>} Checkout {@link GraphQLClient.ResponseGetForgeState} for resolved data format\n */\n\n\n/**\n * getTx\n *\n * @name GraphQLClient#getTx\n * @param {GraphQLClient.GetTxParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetTx>} Checkout {@link GraphQLClient.ResponseGetTx} for resolved data format\n */\n\n\n/**\n * getBlock\n *\n * @name GraphQLClient#getBlock\n * @param {GraphQLClient.GetBlockParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetBlock>} Checkout {@link GraphQLClient.ResponseGetBlock} for resolved data format\n */\n\n\n/**\n * getBlocks\n *\n * @name GraphQLClient#getBlocks\n * @param {GraphQLClient.GetBlocksParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetBlocks>} Checkout {@link GraphQLClient.ResponseGetBlocks} for resolved data format\n */\n\n\n/**\n * getUnconfirmedTxs\n *\n * @name GraphQLClient#getUnconfirmedTxs\n * @param {GraphQLClient.GetUnconfirmedTxsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetUnconfirmedTxs>} Checkout {@link GraphQLClient.ResponseGetUnconfirmedTxs} for resolved data format\n */\n\n\n/**\n * getChainInfo\n *\n * @name GraphQLClient#getChainInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetChainInfo>} Checkout {@link GraphQLClient.ResponseGetChainInfo} for resolved data format\n */\n\n\n/**\n * getConfig\n *\n * @name GraphQLClient#getConfig\n * @param {GraphQLClient.GetConfigParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetConfig>} Checkout {@link GraphQLClient.ResponseGetConfig} for resolved data format\n */\n\n\n/**\n * getNetInfo\n *\n * @name GraphQLClient#getNetInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetNetInfo>} Checkout {@link GraphQLClient.ResponseGetNetInfo} for resolved data format\n */\n\n\n/**\n * getNodeInfo\n *\n * @name GraphQLClient#getNodeInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetNodeInfo>} Checkout {@link GraphQLClient.ResponseGetNodeInfo} for resolved data format\n */\n\n\n/**\n * getValidatorsInfo\n *\n * @name GraphQLClient#getValidatorsInfo\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetValidatorsInfo>} Checkout {@link GraphQLClient.ResponseGetValidatorsInfo} for resolved data format\n */\n\n\n/**\n * getForgeStats\n *\n * @name GraphQLClient#getForgeStats\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetForgeStats>} Checkout {@link GraphQLClient.ResponseGetForgeStats} for resolved data format\n */\n\n\n/**\n * listAssetTransactions\n *\n * @name GraphQLClient#listAssetTransactions\n * @param {GraphQLClient.ListAssetTransactionsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListAssetTransactions>} Checkout {@link GraphQLClient.ResponseListAssetTransactions} for resolved data format\n */\n\n\n/**\n * listAssets\n *\n * @name GraphQLClient#listAssets\n * @param {GraphQLClient.ListAssetsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListAssets>} Checkout {@link GraphQLClient.ResponseListAssets} for resolved data format\n */\n\n\n/**\n * listBlocks\n *\n * @name GraphQLClient#listBlocks\n * @param {GraphQLClient.ListBlocksParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListBlocks>} Checkout {@link GraphQLClient.ResponseListBlocks} for resolved data format\n */\n\n\n/**\n * listTopAccounts\n *\n * @name GraphQLClient#listTopAccounts\n * @param {GraphQLClient.ListTopAccountsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListTopAccounts>} Checkout {@link GraphQLClient.ResponseListTopAccounts} for resolved data format\n */\n\n\n/**\n * listTransactions\n *\n * @name GraphQLClient#listTransactions\n * @param {GraphQLClient.ListTransactionsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListTransactions>} Checkout {@link GraphQLClient.ResponseListTransactions} for resolved data format\n */\n\n\n/**\n * listTokens\n *\n * @name GraphQLClient#listTokens\n * @param {GraphQLClient.ListTokensParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListTokens>} Checkout {@link GraphQLClient.ResponseListTokens} for resolved data format\n */\n\n\n/**\n * listFactories\n *\n * @name GraphQLClient#listFactories\n * @param {GraphQLClient.ListFactoriesParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListFactories>} Checkout {@link GraphQLClient.ResponseListFactories} for resolved data format\n */\n\n\n/**\n * getAccountTokens\n *\n * @name GraphQLClient#getAccountTokens\n * @param {GraphQLClient.GetAccountTokensParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetAccountTokens>} Checkout {@link GraphQLClient.ResponseGetAccountTokens} for resolved data format\n */\n\n\n/**\n * getStakeState\n *\n * @name GraphQLClient#getStakeState\n * @param {GraphQLClient.GetStakeStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetStakeState>} Checkout {@link GraphQLClient.ResponseGetStakeState} for resolved data format\n */\n\n\n/**\n * listStakes\n *\n * @name GraphQLClient#listStakes\n * @param {GraphQLClient.ListStakesParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListStakes>} Checkout {@link GraphQLClient.ResponseListStakes} for resolved data format\n */\n\n\n/**\n * getRollupState\n *\n * @name GraphQLClient#getRollupState\n * @param {GraphQLClient.GetRollupStateParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetRollupState>} Checkout {@link GraphQLClient.ResponseGetRollupState} for resolved data format\n */\n\n\n/**\n * listRollups\n *\n * @name GraphQLClient#listRollups\n * @param {GraphQLClient.ListRollupsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListRollups>} Checkout {@link GraphQLClient.ResponseListRollups} for resolved data format\n */\n\n\n/**\n * getRollupBlock\n *\n * @name GraphQLClient#getRollupBlock\n * @param {GraphQLClient.GetRollupBlockParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseGetRollupBlock>} Checkout {@link GraphQLClient.ResponseGetRollupBlock} for resolved data format\n */\n\n\n/**\n * listRollupBlocks\n *\n * @name GraphQLClient#listRollupBlocks\n * @param {GraphQLClient.ListRollupBlocksParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListRollupBlocks>} Checkout {@link GraphQLClient.ResponseListRollupBlocks} for resolved data format\n */\n\n\n/**\n * listRollupValidators\n *\n * @name GraphQLClient#listRollupValidators\n * @param {GraphQLClient.ListRollupValidatorsParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseListRollupValidators>} Checkout {@link GraphQLClient.ResponseListRollupValidators} for resolved data format\n */\n\n\n/**\n * search\n *\n * @name GraphQLClient#search\n * @param {GraphQLClient.SearchParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseSearch>} Checkout {@link GraphQLClient.ResponseSearch} for resolved data format\n */\n\n\n/**\n * estimateGas\n *\n * @name GraphQLClient#estimateGas\n * @param {GraphQLClient.EstimateGasParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseEstimateGas>} Checkout {@link GraphQLClient.ResponseEstimateGas} for resolved data format\n */\n\n\n/**\n * sendTx\n *\n * @name GraphQLClient#sendTx\n * @param {GraphQLClient.SendTxParams} params\n * @function\n * @memberof GraphQLClient\n * @returns {Promise<GraphQLClient.ResponseSendTx>} Checkout {@link GraphQLClient.ResponseSendTx} for resolved data format\n */\n\n\n"]}