/// <reference types="node" />
import { EventEmitter } from 'events';
import { TSession } from '@did-connect/types';
export declare type SessionStorageOptions = {
    ttl?: number;
};
export interface SessionStorage {
    create(sessionId: string, attributes: Partial<TSession>): Promise<TSession>;
    read(sessionId: string): Promise<TSession>;
    update(sessionId: string, updates: Partial<TSession>): Promise<TSession>;
    delete(sessionId: string): Promise<number>;
    clear(): Promise<void>;
    isFinalized(status: string): boolean;
    deleteFinalized(sessionId: string): Promise<boolean>;
}
/**
 * Defines the interface of DID Connect Session Storage
 * Which is used to persist state during the DID Connect process between dApp and wallet
 *
 * @class BaseStorage
 * @see @did-connect/storage-memory
 * @see @did-connect/storage-mongo
 * @see @did-connect/storage-nedb
 * @extends {EventEmitter}
 */
export declare class BaseStorage extends EventEmitter implements SessionStorage {
    readonly options: SessionStorageOptions;
    constructor(options?: SessionStorageOptions);
    create(sessionId: string, attributes: Partial<TSession>): Promise<TSession>;
    read(sessionId: string): Promise<TSession>;
    update(sessionId: string, updates: Partial<TSession>): Promise<TSession>;
    delete(sessionId: string): Promise<number>;
    clear(): Promise<void>;
    isFinalized(status: string): boolean;
    deleteFinalized(sessionId: string): Promise<boolean>;
}
