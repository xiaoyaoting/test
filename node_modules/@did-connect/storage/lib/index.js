"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseStorage = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars */
const events_1 = require("events");
/**
 * Defines the interface of DID Connect Session Storage
 * Which is used to persist state during the DID Connect process between dApp and wallet
 *
 * @class BaseStorage
 * @see @did-connect/storage-memory
 * @see @did-connect/storage-mongo
 * @see @did-connect/storage-nedb
 * @extends {EventEmitter}
 */
class BaseStorage extends events_1.EventEmitter {
    constructor(options = {}) {
        super();
        this.options = options || {};
    }
    create(sessionId, attributes) {
        throw new Error('create must be implemented in child class');
    }
    read(sessionId) {
        throw new Error('read must be implemented in child class');
    }
    update(sessionId, updates) {
        throw new Error('update must be implemented in child class');
    }
    delete(sessionId) {
        throw new Error('delete must be implemented in child class');
    }
    clear() {
        throw new Error('clear must be implemented in child class');
    }
    isFinalized(status) {
        return ['error', 'timeout', 'canceled', 'rejected', 'completed'].includes(status);
    }
    deleteFinalized(sessionId) {
        const { ttl = 8 * 1000 } = this.options;
        return new Promise((resolve) => {
            setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                if (process.env.NODE_ENV !== 'test') {
                    // eslint-disable-next-line no-console
                    console.info('delete finalized session', sessionId);
                }
                try {
                    yield this.delete(sessionId);
                    resolve(true);
                }
                catch (_a) {
                    resolve(false);
                }
            }), ttl);
        });
    }
}
exports.BaseStorage = BaseStorage;
