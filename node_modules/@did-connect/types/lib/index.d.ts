import { LiteralUnion } from 'type-fest';
import { TAppInfo, TChainInfo, TWalletInfo, TSession, TContext, TAnyResponse, TAnyRequest } from './types';
export * from './schemas';
export * from './types';
export declare type TI18nMessages = {
    [key: string]: {
        [key: string]: string;
    };
};
export declare type TAnyObject = {
    [key: string]: any;
};
export declare type TAppResponse = Partial<{
    response: any;
    error: string;
    errorMessage: string;
    successMessage: string;
    nextWorkflow: string;
    [key: string]: any;
}>;
export declare type TAuthResponse = TAppResponse & {
    status: LiteralUnion<'ok' | 'error', string>;
    action: LiteralUnion<'responseAuth' | 'declineAuth', string>;
    challenge: string;
    appInfo: TAppInfo;
    chainInfo?: TChainInfo;
    requestedClaims: TAnyRequest[];
    url: string;
};
export declare type TAuthContext = TContext & {
    baseUrl?: string;
    request: TAnyObject;
};
export interface TEvent extends Omit<TSession, 'responseClaims'> {
    type: string;
    data: any;
    responseClaims: TAnyResponse[];
    didwallet?: TWalletInfo;
    source?: string;
}
export declare class CustomError extends Error {
    code: string;
    constructor(code: string, message: string);
}
export declare const SessionTimeout: {
    readonly app: number;
    readonly relay: number;
    readonly wallet: number;
};
export declare function isUrl(str: any): boolean;
export declare function isRequestList(claims: TAnyRequest[][]): {
    code: string;
    error: string;
};
export declare function t(template: string, data: TAnyObject): string;
