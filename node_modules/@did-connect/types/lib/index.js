"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.t = exports.isRequestList = exports.isUrl = exports.SessionTimeout = exports.CustomError = void 0;
/* eslint-disable @typescript-eslint/indent */
const validator_1 = require("@arcblock/validator");
const schemas_1 = require("./schemas");
__exportStar(require("./schemas"), exports);
__exportStar(require("./types"), exports);
class CustomError extends Error {
    constructor(code, message) {
        super(message);
        // @ts-ignore
        if (typeof Error.captureStackTrace === 'function') {
            // @ts-ignore
            Error.captureStackTrace(this, CustomError);
        }
        this.code = code;
    }
}
exports.CustomError = CustomError;
exports.SessionTimeout = {
    app: 10 * 1000,
    relay: 10 * 1000,
    wallet: 60 * 1000,
};
const urlSchema = validator_1.Joi.string().uri({ scheme: ['http', 'https'] }).required(); // prettier-ignore
function isUrl(str) {
    if (typeof str !== 'string') {
        return false;
    }
    return !urlSchema.validate(str).error;
}
exports.isUrl = isUrl;
function isRequestList(claims) {
    const validators = {
        agreement: schemas_1.AgreementRequest,
        asset: schemas_1.AssetRequest,
        authPrincipal: schemas_1.AuthPrincipalRequest,
        prepareTx: schemas_1.PrepareTxRequest,
        profile: schemas_1.ProfileRequest,
        signature: schemas_1.SignatureRequest,
        verifiableCredential: schemas_1.VerifiableCredentialRequest,
    };
    for (const group of claims) {
        if (!Array.isArray(group)) {
            return {
                error: 'Invalid request group: each group must be an array',
                code: 'REQUEST_INVALID',
            };
        }
        for (const claim of group) {
            if (!validators[claim.type]) {
                return {
                    error: `Invalid ${claim.type} request: supported request types are ${Object.keys(validators)}`,
                    code: 'REQUEST_UNSUPPORTED',
                };
            }
            const { error } = validators[claim.type].validate(claim);
            if (error) {
                return {
                    error: `Invalid ${claim.type} request: ${error.details.map((x) => x.message).join(', ')}`,
                    code: 'REQUEST_INVALID',
                };
            }
        }
    }
    return { error: '', code: 'OK' };
}
exports.isRequestList = isRequestList;
function t(template, data) {
    // eslint-disable-next-line no-prototype-builtins
    return template.replace(/{(\w*)}/g, (_, key) => (data.hasOwnProperty(key) ? data[key] : ''));
}
exports.t = t;
