import { ObjectSchema } from 'joi';
import type { LiteralUnion } from 'type-fest';
declare type TLocaleCode = LiteralUnion<'en' | 'zh', string>;
declare type TSessionStatus = LiteralUnion<'start' | 'created' | 'walletScanned' | 'walletConnected' | 'appConnected' | 'walletApproved' | 'appApproved' | 'error' | 'timeout' | 'rejected' | 'canceled' | 'completed', string>;
declare const ChainInfo: ObjectSchema;
declare const AppInfo: ObjectSchema;
declare const DIDWalletInfo: ObjectSchema<any>;
declare type TRequest = LiteralUnion<'authPrincipal' | 'profile' | 'signature' | 'prepareTx' | 'agreement' | 'verifiableCredential' | 'asset', string>;
declare type TSignature = LiteralUnion<'fg:g:transaction' | 'eth:transaction' | 'eth:standard-data' | 'eth:personal-data' | 'eth:typed-data' | 'eth:legacy-data' | 'mime:text/html' | 'mime:text/plain', string>;
declare const AuthPrincipalRequest: ObjectSchema<any>, AuthPrincipalResponse: ObjectSchema<any>;
declare const ProfileRequest: ObjectSchema<any>, ProfileResponse: ObjectSchema<any>;
declare const SignatureRequest: ObjectSchema<any>, SignatureResponse: ObjectSchema<any>;
declare const PrepareTxRequest: ObjectSchema<any>, PrepareTxResponse: ObjectSchema<any>;
declare const AgreementRequest: ObjectSchema<any>, AgreementResponse: ObjectSchema<any>;
declare const VerifiableCredentialRequest: ObjectSchema<any>, VerifiableCredentialResponse: ObjectSchema<any>;
declare const AssetRequest: ObjectSchema<any>, AssetResponse: ObjectSchema<any>;
declare const AnyRequest: import("joi").AlternativesSchema<any>;
declare const AnyResponse: import("joi").AlternativesSchema<any>;
declare const Session: ObjectSchema;
declare const Context: ObjectSchema;
export { AppInfo, ChainInfo, DIDWalletInfo, Context, Session, AgreementRequest, AgreementResponse, AssetRequest, AssetResponse, AuthPrincipalRequest, AuthPrincipalResponse, PrepareTxRequest, PrepareTxResponse, ProfileRequest, ProfileResponse, SignatureRequest, SignatureResponse, VerifiableCredentialRequest, VerifiableCredentialResponse, AnyRequest, AnyResponse, TLocaleCode, TSessionStatus, TRequest, TSignature, };
