import { CallbackWithResult, FilterQuery, ProjectionQuery, SortQuery, Row, AnyObject } from './types';
export declare class Cursor<T = AnyObject> {
    private db;
    private execFn;
    private _query;
    private _sort;
    private _projection;
    private _limit;
    private _skip;
    /**
     * Create a new cursor for this collection
     * @param {DataStore} db - The datastore this cursor is bound to
     * @param {Query} query - The query this cursor will operate on
     * @param {Function} execFn - Handler to be executed after cursor has found the results and before the callback passed to find/findOne/update/remove
     */
    constructor(db: any, query: FilterQuery<T>, execFn?: Function);
    /**
     * Set a query to filter results
     */
    query(query: FilterQuery<T>): Cursor<T>;
    /**
     * Set a limit to the number of results
     */
    limit(limit: number): Cursor<T>;
    /**
     * Skip a the number of results
     */
    skip(skip: number): Cursor<T>;
    /**
     * Sort results of the query
     * @param {SortQuery} sortQuery - SortQuery is { field: order }, field can use the dot-notation, order is 1 for ascending and -1 for descending
     */
    sort(sortQuery: SortQuery<T>): Cursor<T>;
    /**
     * Add the use of a projection
     * @param {Object} projection - MongoDB-style projection. {} means take all fields. Then it's { key1: 1, key2: 1 } to take only key1 and key2
     *                              { key1: 0, key2: 0 } to omit only key1 and key2. Except _id, you can't mix takes and omits
     */
    projection(projection: ProjectionQuery<T>): Cursor<T>;
    /**
     * Apply the projection
     */
    private _project;
    /**
     * Get all matching elements
     * Will return pointers to matched elements (shallow copies), returning full copies is the role of find or findOne
     * This is an internal function, use exec which uses the executor
     *
     * @param {Function} callback - Signature: err, results
     */
    private _exec;
    exec(cb?: CallbackWithResult<Row<T>[]>): PromiseLike<Row<T>[]>;
    private _promiseAsCallback;
}
