"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBackup = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
// @ts-ignore
const lodash_omit_1 = __importDefault(require("lodash.omit"));
const utils_1 = require("./utils");
function createBackup(dataDir) {
    if (!dataDir) {
        return { recover: () => Promise.resolve({}), load: () => null, close: () => null };
    }
    if (fs_extra_1.default.existsSync(dataDir) === false) {
        fs_extra_1.default.mkdirpSync(dataDir);
    }
    const backupFile = path_1.default.join(dataDir, 'nedb-multi-backup.json');
    console.info('Using backup file', backupFile);
    const recover = () => fs_extra_1.default.readJsonSync(backupFile);
    const load = (dbPath, options) => fs_extra_1.default.writeJsonSync(backupFile, Object.assign(Object.assign({}, recover()), { [(0, utils_1.md5)(dbPath)]: options })); // prettier-ignore
    const close = (dbPath) => fs_extra_1.default.writeJsonSync(backupFile, (0, lodash_omit_1.default)(recover(), [(0, utils_1.md5)(dbPath)]));
    // make sure backup file exist
    if (fs_extra_1.default.existsSync(backupFile) === false) {
        fs_extra_1.default.writeJsonSync(backupFile, {});
    }
    else {
        // make sure backup file is valid json
        try {
            fs_extra_1.default.readJsonSync(backupFile);
        }
        catch (err) {
            console.error('Reset backup file', err);
            fs_extra_1.default.writeJsonSync(backupFile, {});
        }
    }
    return {
        recover,
        load,
        close,
    };
}
exports.createBackup = createBackup;
