"use strict";
/* eslint-disable unicorn/filename-case */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/lines-between-class-members */
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDataStore = void 0;
const rpc_1 = require("./rpc");
const cursor_1 = require("./cursor");
const persistenceProxy_1 = require("./persistenceProxy");
function createDataStore(socket) {
    class DataStore {
        constructor(options = {}) {
            const opts = Object.assign({ serialized: true }, options);
            this.options = opts;
            this.persistence = new persistenceProxy_1.PersistenceProxy(socket, opts);
        }
        loadDatabase() {
            return (0, rpc_1.doRpc)(socket, this.options, 'loadDatabase', Array.prototype.slice.call(arguments));
        }
        closeDatabase() {
            return (0, rpc_1.doRpc)(socket, this.options, 'closeDatabase', Array.prototype.slice.call(arguments));
        }
        ensureIndex(options, cb) {
            return (0, rpc_1.doRpc)(socket, this.options, 'ensureIndex', Array.prototype.slice.call(arguments));
        }
        removeIndex(fieldName, cb) {
            return (0, rpc_1.doRpc)(socket, this.options, 'removeIndex', Array.prototype.slice.call(arguments));
        }
        insert() {
            return (0, rpc_1.doRpc)(socket, this.options, 'insert', Array.prototype.slice.call(arguments));
        }
        cursor(query) {
            return new cursor_1.Cursor(socket, this.options, Array.prototype.slice.call(arguments));
        }
        count() {
            return (0, rpc_1.doRpc)(socket, this.options, 'count', Array.prototype.slice.call(arguments));
        }
        find() {
            return (0, rpc_1.doRpc)(socket, this.options, 'find', Array.prototype.slice.call(arguments));
        }
        findOne() {
            return (0, rpc_1.doRpc)(socket, this.options, 'findOne', Array.prototype.slice.call(arguments));
        }
        update() {
            return (0, rpc_1.doRpc)(socket, this.options, 'update', Array.prototype.slice.call(arguments));
        }
        remove() {
            return (0, rpc_1.doRpc)(socket, this.options, 'remove', Array.prototype.slice.call(arguments));
        }
    }
    return DataStore;
}
exports.createDataStore = createDataStore;
