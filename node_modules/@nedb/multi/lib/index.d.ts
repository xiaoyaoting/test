export declare function createDataStore(port: number): {
    new <T = import("@nedb/core").AnyObject>(options?: any): {
        readonly options: import("@nedb/core").DataStoreOptions;
        readonly persistence: any;
        loadDatabase(): PromiseLike<void>;
        loadDatabase(cb: import("@nedb/core").CallbackOptionalError): void;
        closeDatabase(): PromiseLike<void>;
        closeDatabase(cb: import("@nedb/core").CallbackOptionalError): void;
        ensureIndex(options: import("@nedb/core").IndexOptions, cb?: import("@nedb/core").CallbackOptionalError): PromiseLike<void>;
        removeIndex(fieldName: string, cb?: import("@nedb/core").CallbackOptionalError): PromiseLike<void>;
        insert(doc: T): PromiseLike<import("@nedb/core").Row<T>>;
        insert(doc: T[]): PromiseLike<import("@nedb/core").Row<T>[]>;
        insert(doc: T, cb: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>>): void;
        insert(doc: T[], cb: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>[]>): void;
        cursor(query?: import("@nedb/core").FilterQuery<T>): import("./cursor").Cursor<T>;
        count(query?: import("@nedb/core").FilterQuery<T>): PromiseLike<number>;
        count(query: import("@nedb/core").FilterQuery<T>, callback: import("@nedb/core").CallbackWithResult<number>): void;
        count(callback: import("@nedb/core").CallbackWithResult<number>): void;
        find(query?: import("@nedb/core").FilterQuery<T>): PromiseLike<import("@nedb/core").Row<T>[]>;
        find(query: import("@nedb/core").FilterQuery<T>, projection: import("@nedb/core").ProjectionQuery<T>): PromiseLike<import("@nedb/core").Row<T>[]>;
        find(callback: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>[]>): void;
        find(query: import("@nedb/core").FilterQuery<T>, callback: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>[]>): void;
        find(query: import("@nedb/core").FilterQuery<T>, projection: import("@nedb/core").ProjectionQuery<T>, callback: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>[]>): void;
        findOne(query?: import("@nedb/core").FilterQuery<T>): PromiseLike<import("@nedb/core").Row<T>>;
        findOne(query: import("@nedb/core").FilterQuery<T>, projection?: import("@nedb/core").ProjectionQuery<T>): PromiseLike<import("@nedb/core").Row<T>>;
        findOne(query: import("@nedb/core").FilterQuery<T>, callback?: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>>): void;
        findOne(query: import("@nedb/core").FilterQuery<T>, projection: import("@nedb/core").ProjectionQuery<T>, callback: import("@nedb/core").CallbackWithResult<import("@nedb/core").Row<T>>): void;
        update(query: import("@nedb/core").FilterQuery<T>, updateQuery: import("@nedb/core").UpdateQuery<T>): PromiseLike<import("@nedb/core").UpdateResult<T>>;
        update(query: import("@nedb/core").FilterQuery<T>, updateQuery: import("@nedb/core").UpdateQuery<T>, cb: import("@nedb/core").CallbackWithResult<any>): void;
        update(query: import("@nedb/core").FilterQuery<T>, updateQuery: import("@nedb/core").UpdateQuery<T>, options: import("@nedb/core").UpdateOptions): PromiseLike<import("@nedb/core").UpdateResult<T>>;
        update(query: import("@nedb/core").FilterQuery<T>, updateQuery: import("@nedb/core").UpdateQuery<T>, options: import("@nedb/core").UpdateOptions, cb: import("@nedb/core").CallbackWithResult<any>): void;
        remove(query: import("@nedb/core").FilterQuery<T>): PromiseLike<number>;
        remove(query: import("@nedb/core").FilterQuery<T>, options: import("@nedb/core").RemoveOptions): PromiseLike<number>;
        remove(query: import("@nedb/core").FilterQuery<T>, cb: import("@nedb/core").CallbackWithResult<number>): void;
        remove(query: import("@nedb/core").FilterQuery<T>, options: import("@nedb/core").RemoveOptions, cb: import("@nedb/core").CallbackWithResult<number>): void;
    };
};
