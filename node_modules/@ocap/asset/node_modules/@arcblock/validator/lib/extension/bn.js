"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BNExtension = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
function BNExtension(root) {
    return {
        type: 'BN',
        base: root.any(),
        messages: {
            'bn.nan': '{{#label}} is not a big number',
            'bn.max': '{{#label}} needs to be less than or equal to "{{#threshold}}"',
            'bn.min': '{{#label}} needs to be greater than or equal to "{{#threshold}}"',
            'bn.less': '{{#label}} needs to be less than "{{#threshold}}"',
            'bn.greater': '{{#label}} needs to be greater than "{{#threshold}}"',
            'bn.positive': '{{#label}} needs to be positive',
            'bn.negative': '{{#label}} needs to be negative',
        },
        prepare(value, helpers) {
            try {
                return { value: new bn_js_1.default(value) };
            }
            catch (err) {
                return { errors: helpers.error('bn.nan') };
            }
        },
        coerce(value) {
            return { value: value.toString(10) };
        },
        validate(value) {
            return { value };
        },
        rules: {
            gt: {
                args: [
                    {
                        name: 'threshold',
                        ref: true,
                        assert: (v) => bn_js_1.default.isBN(v),
                        message: 'must be a big number',
                        normalize: (v) => new bn_js_1.default(v),
                    },
                    {
                        name: 'equal',
                        assert: (v) => typeof v === 'boolean',
                        message: 'must be a boolean',
                    },
                ],
                // The rule return structure is different from the root
                // eslint-disable-next-line consistent-return
                validate(value, helpers, args) {
                    const v = new bn_js_1.default(value);
                    if (args.equal && v.lt(args.threshold)) {
                        return helpers.error('bn.min', args);
                    }
                    if (!args.equal && v.lte(args.threshold)) {
                        return helpers.error('bn.greater', args);
                    }
                    // must return value when valid
                    return value;
                },
            },
            lt: {
                args: [
                    {
                        name: 'threshold',
                        ref: true,
                        assert: (v) => bn_js_1.default.isBN(v),
                        message: 'must be a big number',
                        normalize: (v) => new bn_js_1.default(v),
                    },
                    {
                        name: 'equal',
                        assert: (v) => typeof v === 'boolean',
                        message: 'must be a boolean',
                    },
                ],
                // The rule return structure is different from the root
                // eslint-disable-next-line consistent-return
                validate(value, helpers, args) {
                    const v = new bn_js_1.default(value);
                    if (args.equal && v.gt(args.threshold)) {
                        return helpers.error('bn.max', args);
                    }
                    if (!args.equal && v.gte(args.threshold)) {
                        return helpers.error('bn.less', args);
                    }
                    // must return value when valid
                    return value;
                },
            },
            min: {
                alias: 'gte',
                method(threshold) {
                    // @ts-ignore
                    return this.$_addRule({ name: 'gt', args: { threshold, equal: true } });
                },
            },
            max: {
                alias: 'lte',
                method(threshold) {
                    // @ts-ignore
                    return this.$_addRule({ name: 'lt', args: { threshold, equal: true } });
                },
            },
            greater: {
                alias: 'gt',
                method(threshold) {
                    // @ts-ignore
                    return this.$_addRule({ name: 'gt', args: { threshold, equal: false } });
                },
            },
            less: {
                alias: 'lt',
                method(threshold) {
                    // @ts-ignore
                    return this.$_addRule({ name: 'lt', args: { threshold, equal: false } });
                },
            },
            positive: {
                method() {
                    // @ts-ignore
                    return this.$_addRule({ name: 'gt', args: { threshold: 0, equal: false } });
                },
            },
            negative: {
                method() {
                    // @ts-ignore
                    return this.$_addRule({ name: 'lt', args: { threshold: 0, equal: false } });
                },
            },
        },
    };
}
exports.BNExtension = BNExtension;
