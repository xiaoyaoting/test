
/**
 * List all query method names
 *
 * @name GraphQLClient#getQueries
 * @function
 * @memberof GraphQLClient
 * @returns {Array<string>} method name list
 * @example
 * const methods = client.getQueries();
 * // list of query methods
 * // [
 * //   getAccountState,
 * //   getAssetState,
 * //   getFactoryState,
 * //   getDelegateState,
 * //   getTokenState,
 * //   getEvidenceState,
 * //   getForgeState,
 * //   getTx,
 * //   getBlock,
 * //   getBlocks,
 * //   getUnconfirmedTxs,
 * //   getChainInfo,
 * //   getConfig,
 * //   getNetInfo,
 * //   getNodeInfo,
 * //   getValidatorsInfo,
 * //   getForgeStats,
 * //   listAssetTransactions,
 * //   listAssets,
 * //   listBlocks,
 * //   listTopAccounts,
 * //   listTransactions,
 * //   listTokens,
 * //   listFactories,
 * //   getAccountTokens,
 * //   getStakeState,
 * //   listStakes,
 * //   getRollupState,
 * //   listRollups,
 * //   getRollupBlock,
 * //   listRollupBlocks,
 * //   listRollupValidators,
 * //   search,
 * //   estimateGas,
 * // ]
 */

/**
 * List all mutation method names
 *
 * @name GraphQLClient#getMutations
 * @function
 * @memberof GraphQLClient
 * @returns {Array<string>} method name list
 * @example
 * const methods = client.getMutations();
 * // list of mutation methods
 * // [
 * //   sendTx,
 * // ]
 */

/**
 * List all subscription method names
 *
 * @name GraphQLClient#getSubscription
 * @function
 * @memberof GraphQLClient
 * @returns {Array<string>} method name list
 * @example
 * const methods = client.getSubscriptions();
 * // list of subscription methods
 * // [

 * // ]
 */

/**
 * Send raw graphql query to forge graphql endpoint
 *
 * @name GraphQLClient#doRawQuery
 * @function
 * @memberof GraphQLClient
 * @param {string} query - graphql query string
 * @returns {Promise} usually axios response data
 * @example
 * const res = await client.doRawQuery('
 *   getChainInfo {
 *     code
 *     info {
 *       address
 *       blockHeight
 *     }
 *   }
 * ');
 *
 * // Then
 * // res.getChainInfo.code
 * // res.getChainInfo.info
 */

/**
 * Send raw graphql subscription to forge graphql endpoint
 *
 * @name GraphQLClient#doRawSubscription
 * @function
 * @memberof GraphQLClient
 * @param {string} query - graphql query string
 * @returns {Promise} usually axios response data
 */

/**
 * Structure of GraphQLClient.WalletObject
 *
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.WalletObject
 * @property {string} publicKey
 * @property {string} secretKey
 * @property {GraphQLClient~WalletTypeObject} type
 */

/**
 * Structure of GraphQLClient.WalletTypeObject
 *
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.WalletTypeObject
 * @property {number} pk
 * @property {number} role
 * @property {number} hash
 * @property {number} address - defaults to base58btc
 */

/**
 * Structure of GraphQLClient.TxEncodeOutput
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TxEncodeOutput
 * @property {object} object - the transaction object, human readable
 * @property {buffer} buffer - the transaction binary presentation, can be used to signing, encoding to other formats
 */

/**
 * Structure of GraphQLClient.AccountFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AccountFilterInput
 * @property {Array<string>} accounts
 */

/**
 * Structure of GraphQLClient.AddressFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AddressFilterInput
 * @property {string} sender
 * @property {string} receiver
 * @property {...GraphQLClient.Direction} direction
 */

/**
 * Structure of GraphQLClient.AssetFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AssetFilterInput
 * @property {Array<string>} assets
 */

/**
 * Structure of GraphQLClient.FactoryFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.FactoryFilterInput
 * @property {Array<string>} factories
 */

/**
 * Structure of GraphQLClient.PageInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PageInput
 * @property {string} cursor
 * @property {number} size
 * @property {Array<...GraphQLClient.PageOrderInput>} order
 */

/**
 * Structure of GraphQLClient.PageOrderInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PageOrderInput
 * @property {string} field
 * @property {string} type
 */

/**
 * Structure of GraphQLClient.RangeFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RangeFilterInput
 * @property {string} from
 * @property {string} to
 */

/**
 * Structure of GraphQLClient.RequestEstimateGasInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestEstimateGasInput
 * @property {string} typeUrl
 * @property {string} tx
 */

/**
 * Structure of GraphQLClient.RequestGetAccountTokensInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetAccountTokensInput
 * @property {string} address
 * @property {string} token
 */

/**
 * Structure of GraphQLClient.RequestGetBlockInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetBlockInput
 * @property {number} height
 */

/**
 * Structure of GraphQLClient.RequestGetBlocksInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetBlocksInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {...GraphQLClient.RangeFilterInput} heightFilter
 * @property {boolean} emptyExcluded
 */

/**
 * Structure of GraphQLClient.RequestGetConfigInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetConfigInput
 * @property {boolean} parsed
 */

/**
 * Structure of GraphQLClient.RequestGetEvidenceStateInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetEvidenceStateInput
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.RequestGetRollupBlockInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetRollupBlockInput
 * @property {string} hash
 * @property {number} height
 * @property {string} rollupAddress
 */

/**
 * Structure of GraphQLClient.RequestGetStateInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetStateInput
 * @property {string} address
 * @property {Array<string>} keys
 * @property {number} height
 */

/**
 * Structure of GraphQLClient.RequestGetTxInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestGetTxInput
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.RequestListAssetTransactionsInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListAssetTransactionsInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} address
 */

/**
 * Structure of GraphQLClient.RequestListAssetsInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListAssetsInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} ownerAddress
 * @property {string} factoryAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.RequestListBlocksInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListBlocksInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} proposer
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 * @property {...GraphQLClient.RangeFilterInput} heightFilter
 * @property {...GraphQLClient.RangeFilterInput} numTxsFilter
 * @property {...GraphQLClient.RangeFilterInput} numInvalidTxsFilter
 */

/**
 * Structure of GraphQLClient.RequestListFactoriesInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListFactoriesInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} ownerAddress
 * @property {Array<string>} addressList
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.RequestListRollupBlocksInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListRollupBlocksInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} rollupAddress
 * @property {string} tokenAddress
 * @property {string} proposer
 * @property {...GraphQLClient.ValidatorFilterInput} validatorFilter
 * @property {...GraphQLClient.TxFilterInput} txFilter
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.RequestListRollupValidatorsInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListRollupValidatorsInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} rollupAddress
 */

/**
 * Structure of GraphQLClient.RequestListRollupsInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListRollupsInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} tokenAddress
 * @property {string} foreignTokenAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.RequestListStakesInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListStakesInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {...GraphQLClient.AddressFilterInput} addressFilter
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 * @property {...GraphQLClient.AssetFilterInput} assetFilter
 */

/**
 * Structure of GraphQLClient.RequestListTokensInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListTokensInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} issuerAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.RequestListTopAccountsInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListTopAccountsInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} tokenAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.RequestListTransactionsInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestListTransactionsInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 * @property {...GraphQLClient.AddressFilterInput} addressFilter
 * @property {...GraphQLClient.TypeFilterInput} typeFilter
 * @property {...GraphQLClient.ValidityFilterInput} validityFilter
 * @property {...GraphQLClient.FactoryFilterInput} factoryFilter
 * @property {...GraphQLClient.TokenFilterInput} tokenFilter
 * @property {...GraphQLClient.AssetFilterInput} assetFilter
 * @property {...GraphQLClient.AccountFilterInput} accountFilter
 * @property {...GraphQLClient.TxFilterInput} txFilter
 * @property {...GraphQLClient.RollupFilterInput} rollupFilter
 * @property {...GraphQLClient.StakeFilterInput} stakeFilter
 */

/**
 * Structure of GraphQLClient.RequestSearchInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestSearchInput
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} keyword
 */

/**
 * Structure of GraphQLClient.RequestSendTxInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RequestSendTxInput
 * @property {string} tx
 * @property {...GraphQLClient.WalletInfoInput} wallet
 * @property {string} token
 * @property {boolean} commit
 */

/**
 * Structure of GraphQLClient.RollupFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RollupFilterInput
 * @property {Array<string>} rollups
 */

/**
 * Structure of GraphQLClient.StakeFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.StakeFilterInput
 * @property {Array<string>} stakes
 */

/**
 * Structure of GraphQLClient.TimeFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TimeFilterInput
 * @property {string} startDateTime
 * @property {string} endDateTime
 * @property {string} field
 */

/**
 * Structure of GraphQLClient.TokenFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TokenFilterInput
 * @property {Array<string>} tokens
 */

/**
 * Structure of GraphQLClient.TxFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TxFilterInput
 * @property {Array<string>} txs
 */

/**
 * Structure of GraphQLClient.TypeFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TypeFilterInput
 * @property {Array<string>} types
 */

/**
 * Structure of GraphQLClient.ValidatorFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ValidatorFilterInput
 * @property {Array<string>} validators
 */

/**
 * Structure of GraphQLClient.ValidityFilterInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ValidityFilterInput
 * @property {...GraphQLClient.Validity} validity
 */

/**
 * Structure of GraphQLClient.WalletInfoInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.WalletInfoInput
 * @property {...GraphQLClient.WalletTypeInput} type
 * @property {string} sk
 * @property {string} pk
 * @property {string} address
 */

/**
 * Structure of GraphQLClient.WalletTypeInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.WalletTypeInput
 * @property {...GraphQLClient.KeyType} pk
 * @property {...GraphQLClient.HashType} hash
 * @property {...GraphQLClient.EncodingType} address
 * @property {...GraphQLClient.RoleType} role
 */

/**
 * Structure of GraphQLClient.AccountConfig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AccountConfig
 * @property {string} address
 * @property {string} pk
 * @property {string} balance
 */

/**
 * Structure of GraphQLClient.AccountMigrateTx 
 *
 * Checkout the following snippet for the format of AccountMigrateTx:
 * ```json
{
  "pk": "abc",
  "type": {
    "pk": "ED25519",
    "hash": "KECCAK",
    "address": "BASE16",
    "role": "ROLE_ACCOUNT"
  },
  "address": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AccountMigrateTx
 * @property {string} pk
 * @property {...GraphQLClient.WalletType} type
 * @property {string} address
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.AccountState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AccountState
 * @property {string} balance
 * @property {string} nonce
 * @property {string} numTxs
 * @property {string} address
 * @property {string} pk
 * @property {...GraphQLClient.WalletType} type
 * @property {string} moniker
 * @property {...GraphQLClient.StateContext} context
 * @property {string} issuer
 * @property {string} gasBalance
 * @property {Array<string>} migratedTo
 * @property {Array<string>} migratedFrom
 * @property {string} numAssets
 * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.AccountToken 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AccountToken
 * @property {string} address
 * @property {string} symbol
 * @property {string} balance
 * @property {number} decimal
 */

/**
 * Structure of GraphQLClient.AcquireAssetV2Tx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AcquireAssetV2Tx
 * @property {string} factory
 * @property {string} address
 * @property {Array<string>} assets
 * @property {Array<...GraphQLClient.VariableInput>} variables
 * @property {...GraphQLClient.NFTIssuer} issuer
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.AcquireAssetV3Tx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AcquireAssetV3Tx
 * @property {string} factory
 * @property {string} address
 * @property {Array<...GraphQLClient.TransactionInput>} inputs
 * @property {string} owner
 * @property {Array<...GraphQLClient.VariableInput>} variables
 * @property {...GraphQLClient.NFTIssuer} issuer
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.Any 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.Any
 * @property {string} typeUrl
 * @property {string} value
 */

/**
 * Structure of GraphQLClient.AssetFactoryHook 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AssetFactoryHook
 * @property {string} name
 * @property {string} type
 * @property {string} hook
 */

/**
 * Structure of GraphQLClient.AssetFactoryInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AssetFactoryInput
 * @property {string} value
 * @property {Array<...GraphQLClient.TokenInput>} tokens
 * @property {Array<string>} assets
 * @property {Array<...GraphQLClient.VariableInput>} variables
 */

/**
 * Structure of GraphQLClient.AssetFactoryState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AssetFactoryState
 * @property {string} address
 * @property {string} owner
 * @property {string} name
 * @property {string} description
 * @property {string} settlement
 * @property {number} limit
 * @property {Array<string>} trustedIssuers
 * @property {...GraphQLClient.IndexedFactoryInput} input
 * @property {...GraphQLClient.CreateAssetTx} output
 * @property {Array<...GraphQLClient.AssetFactoryHook>} hooks
 * @property {...GraphQLClient.Any} data
 * @property {...GraphQLClient.StateContext} context
 * @property {string} balance
 * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens
 * @property {number} numMinted
 * @property {...GraphQLClient.NFTDisplay} display
 * @property {string} lastSettlement
 */

/**
 * Structure of GraphQLClient.AssetState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.AssetState
 * @property {string} address
 * @property {string} owner
 * @property {string} moniker
 * @property {boolean} readonly
 * @property {boolean} transferrable
 * @property {number} ttl
 * @property {string} consumedTime
 * @property {string} issuer
 * @property {string} parent
 * @property {...GraphQLClient.NFTEndpoint} endpoint
 * @property {...GraphQLClient.NFTDisplay} display
 * @property {Array<string>} tags
 * @property {...GraphQLClient.StateContext} context
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.BlockID 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.BlockID
 * @property {string} hash
 * @property {...GraphQLClient.PartSetHeader} partsHeader
 */

/**
 * Structure of GraphQLClient.BlockInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.BlockInfo
 * @property {string} height
 * @property {number} numTxs
 * @property {string} time
 * @property {string} appHash
 * @property {string} proposer
 * @property {Array<...GraphQLClient.TransactionInfo>} txs
 * @property {string} totalTxs
 * @property {Array<...GraphQLClient.TransactionInfo>} invalidTxs
 * @property {Array<string>} txsHashes
 * @property {Array<string>} invalidTxsHashes
 * @property {string} consensusHash
 * @property {string} dataHash
 * @property {string} evidenceHash
 * @property {string} lastCommitHash
 * @property {string} lastResultsHash
 * @property {string} nextValidatorsHash
 * @property {string} validatorsHash
 * @property {...GraphQLClient.Version} version
 * @property {...GraphQLClient.BlockID} lastBlockId
 */

/**
 * Structure of GraphQLClient.BlockInfoSimple 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.BlockInfoSimple
 * @property {string} height
 * @property {number} numTxs
 * @property {string} time
 * @property {string} appHash
 * @property {string} proposer
 * @property {string} totalTxs
 * @property {Array<string>} txsHashes
 * @property {Array<string>} invalidTxsHashes
 * @property {string} consensusHash
 * @property {string} dataHash
 * @property {string} evidenceHash
 * @property {string} lastCommitHash
 * @property {string} lastResultsHash
 * @property {string} nextValidatorsHash
 * @property {string} validatorsHash
 * @property {...GraphQLClient.Version} version
 * @property {...GraphQLClient.BlockID} lastBlockId
 */

/**
 * Structure of GraphQLClient.ChainInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ChainInfo
 * @property {string} id
 * @property {string} network
 * @property {string} moniker
 * @property {string} consensusVersion
 * @property {boolean} synced
 * @property {string} appHash
 * @property {string} blockHash
 * @property {string} blockHeight
 * @property {string} blockTime
 * @property {string} address
 * @property {string} votingPower
 * @property {string} totalTxs
 * @property {string} version
 * @property {Array<...GraphQLClient.ChainInfo_ForgeAppsVersionEntry>} forgeAppsVersion
 * @property {Array<string>} supportedTxs
 */

/**
 * Structure of GraphQLClient.ChainInfo_ForgeAppsVersionEntry 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ChainInfo_ForgeAppsVersionEntry
 * @property {string} key
 * @property {string} value
 */

/**
 * Structure of GraphQLClient.ClaimBlockRewardTx 
 *
 * Checkout the following snippet for the format of ClaimBlockRewardTx:
 * ```json
{
  "rollup": "abc",
  "blockHeight": 123,
  "blockHash": "abc",
  "evidence": {
    "hash": "abc"
  },
  "publisher": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ClaimBlockRewardTx
 * @property {string} rollup
 * @property {number} blockHeight
 * @property {string} blockHash
 * @property {...GraphQLClient.Evidence} evidence
 * @property {string} publisher
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.ClaimStakeTx 
 *
 * Checkout the following snippet for the format of ClaimStakeTx:
 * ```json
{
  "address": "abc",
  "evidence": {
    "hash": "abc"
  },
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ClaimStakeTx
 * @property {string} address
 * @property {...GraphQLClient.Evidence} evidence
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.CloseRollupTx 
 *
 * Checkout the following snippet for the format of CloseRollupTx:
 * ```json
{
  "rollup": "abc",
  "message": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.CloseRollupTx
 * @property {string} rollup
 * @property {string} message
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.ConsensusParams 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ConsensusParams
 * @property {string} maxBytes
 * @property {string} maxGas
 * @property {number} maxValidators
 * @property {number} maxCandidates
 * @property {Array<string>} pubKeyTypes
 * @property {Array<...GraphQLClient.Validator>} validators
 * @property {boolean} validatorChanged
 * @property {boolean} paramChanged
 */

/**
 * Structure of GraphQLClient.CreateAssetTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.CreateAssetTx
 * @property {string} moniker
 * @property {...GraphQLClient.Any} data
 * @property {boolean} readonly
 * @property {boolean} transferrable
 * @property {number} ttl
 * @property {string} parent
 * @property {string} address
 * @property {string} issuer
 * @property {...GraphQLClient.NFTEndpoint} endpoint
 * @property {...GraphQLClient.NFTDisplay} display
 * @property {Array<string>} tags
 */

/**
 * Structure of GraphQLClient.CreateFactoryTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.CreateFactoryTx
 * @property {string} name
 * @property {string} description
 * @property {string} settlement
 * @property {number} limit
 * @property {Array<string>} trustedIssuers
 * @property {...GraphQLClient.AssetFactoryInput} input
 * @property {...GraphQLClient.CreateAssetTx} output
 * @property {Array<...GraphQLClient.AssetFactoryHook>} hooks
 * @property {string} address
 * @property {...GraphQLClient.NFTDisplay} display
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.CreateRollupBlockTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.CreateRollupBlockTx
 * @property {string} hash
 * @property {number} height
 * @property {string} merkleRoot
 * @property {string} previousHash
 * @property {string} txsHash
 * @property {Array<string>} txs
 * @property {string} proposer
 * @property {Array<...GraphQLClient.Multisig>} signatures
 * @property {string} rollup
 * @property {string} minReward
 * @property {boolean} governance
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.CreateRollupTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.CreateRollupTx
 * @property {string} address
 * @property {string} tokenAddress
 * @property {string} vaultAddress
 * @property {string} contractAddress
 * @property {Array<...GraphQLClient.RollupValidator>} seedValidators
 * @property {string} minStakeAmount
 * @property {string} maxStakeAmount
 * @property {number} minSignerCount
 * @property {number} maxSignerCount
 * @property {number} minBlockSize
 * @property {number} maxBlockSize
 * @property {number} minBlockInterval
 * @property {number} minBlockConfirmation
 * @property {string} foreignChainType
 * @property {string} foreignChainId
 * @property {number} depositFeeRate
 * @property {number} withdrawFeeRate
 * @property {number} proposerFeeShare
 * @property {string} minDepositAmount
 * @property {string} minWithdrawAmount
 * @property {string} maxDepositAmount
 * @property {string} maxWithdrawAmount
 * @property {string} minDepositFee
 * @property {string} maxDepositFee
 * @property {string} minWithdrawFee
 * @property {string} maxWithdrawFee
 * @property {boolean} paused
 * @property {number} leaveWaitingPeriod
 * @property {number} publisherFeeShare
 * @property {number} publishWaitingPeriod
 * @property {number} publishSlashRate
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.CreateTokenTx 
 *
 * Checkout the following snippet for the format of CreateTokenTx:
 * ```json
{
  "name": "abc",
  "description": "abc",
  "symbol": "abc",
  "unit": "abc",
  "decimal": 123,
  "icon": "abc",
  "totalSupply": "abc",
  "address": "abc",
  "initialSupply": "abc",
  "foreignToken": {
    "type": "abc",
    "contractAddress": "abc",
    "chainType": "abc",
    "chainName": "abc",
    "chainId": 123
  },
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.CreateTokenTx
 * @property {string} name
 * @property {string} description
 * @property {string} symbol
 * @property {string} unit
 * @property {number} decimal
 * @property {string} icon
 * @property {string} totalSupply
 * @property {string} address
 * @property {string} initialSupply
 * @property {...GraphQLClient.ForeignToken} foreignToken
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.DeclareTx 
 *
 * Checkout the following snippet for the format of DeclareTx:
 * ```json
{
  "moniker": "abc",
  "issuer": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DeclareTx
 * @property {string} moniker
 * @property {string} issuer
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.DelegateConfig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DelegateConfig
 * @property {number} deltaInterval
 * @property {Array<string>} typeUrls
 */

/**
 * Structure of GraphQLClient.DelegateOp 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DelegateOp
 * @property {string} typeUrl
 * @property {Array<string>} rules
 */

/**
 * Structure of GraphQLClient.DelegateOpState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DelegateOpState
 * @property {string} rule
 * @property {number} numTxs
 * @property {number} numTxsDelta
 * @property {string} balance
 * @property {string} balanceDelta
 */

/**
 * Structure of GraphQLClient.DelegateState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DelegateState
 * @property {string} address
 * @property {Array<...GraphQLClient.DelegateState_OpsEntry>} ops
 * @property {...GraphQLClient.StateContext} context
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.DelegateState_OpsEntry 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DelegateState_OpsEntry
 * @property {string} key
 * @property {...GraphQLClient.DelegateOpState} value
 */

/**
 * Structure of GraphQLClient.DelegateTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DelegateTx
 * @property {string} address
 * @property {string} to
 * @property {Array<...GraphQLClient.DelegateOp>} ops
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.DepositTokenV2Tx 
 *
 * Checkout the following snippet for the format of DepositTokenV2Tx:
 * ```json
{
  "token": {
    "address": "abc",
    "value": "abc"
  },
  "to": "abc",
  "proposer": "abc",
  "evidence": {
    "hash": "abc"
  },
  "rollup": "abc",
  "actualFee": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.DepositTokenV2Tx
 * @property {...GraphQLClient.TokenInput} token
 * @property {string} to
 * @property {string} proposer
 * @property {...GraphQLClient.Evidence} evidence
 * @property {string} rollup
 * @property {string} actualFee
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.Evidence 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.Evidence
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.EvidenceState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.EvidenceState
 * @property {string} hash
 * @property {string} data
 * @property {...GraphQLClient.StateContext} context
 */

/**
 * Structure of GraphQLClient.ExchangeInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ExchangeInfo
 * @property {string} value
 * @property {Array<string>} assets
 */

/**
 * Structure of GraphQLClient.ExchangeInfoV2 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ExchangeInfoV2
 * @property {string} value
 * @property {Array<string>} assets
 * @property {Array<...GraphQLClient.TokenInput>} tokens
 */

/**
 * Structure of GraphQLClient.ExchangeTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ExchangeTx
 * @property {string} to
 * @property {...GraphQLClient.ExchangeInfo} sender
 * @property {...GraphQLClient.ExchangeInfo} receiver
 * @property {string} expiredAt
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.ExchangeV2Tx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ExchangeV2Tx
 * @property {string} to
 * @property {...GraphQLClient.ExchangeInfoV2} sender
 * @property {...GraphQLClient.ExchangeInfoV2} receiver
 * @property {string} expiredAt
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.ForeignToken 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ForeignToken
 * @property {string} type
 * @property {string} contractAddress
 * @property {string} chainType
 * @property {string} chainName
 * @property {number} chainId
 */

/**
 * Structure of GraphQLClient.ForgeState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ForgeState
 * @property {string} address
 * @property {...GraphQLClient.ConsensusParams} consensus
 * @property {Array<...GraphQLClient.ForgeState_TasksEntry>} tasks
 * @property {string} version
 * @property {...GraphQLClient.ForgeToken} token
 * @property {...GraphQLClient.TransactionConfig} txConfig
 * @property {...GraphQLClient.UpgradeInfo} upgradeInfo
 * @property {Array<...GraphQLClient.AccountConfig>} accountConfig
 * @property {...GraphQLClient.VaultConfig} vaults
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.ForgeState_TasksEntry 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ForgeState_TasksEntry
 * @property {number} key
 * @property {...GraphQLClient.UpgradeTasks} value
 */

/**
 * Structure of GraphQLClient.ForgeStats 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ForgeStats
 * @property {Array<string>} numBlocks
 * @property {Array<string>} numTxs
 * @property {Array<string>} numStakes
 * @property {Array<number>} numValidators
 * @property {Array<string>} numAccountMigrateTxs
 * @property {Array<string>} numCreateAssetTxs
 * @property {Array<number>} numConsensusUpgradeTxs
 * @property {Array<string>} numDeclareTxs
 * @property {Array<string>} numDeclareFileTxs
 * @property {Array<string>} numExchangeTxs
 * @property {Array<string>} numStakeTxs
 * @property {Array<number>} numSysUpgradeTxs
 * @property {Array<string>} numTransferTxs
 * @property {Array<string>} numUpdateAssetTxs
 * @property {Array<string>} numConsumeAssetTxs
 * @property {Array<number>} tps
 * @property {number} maxTps
 * @property {number} avgTps
 * @property {number} avgBlockTime
 */

/**
 * Structure of GraphQLClient.ForgeToken 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ForgeToken
 * @property {string} name
 * @property {string} symbol
 * @property {string} unit
 * @property {string} description
 * @property {string} icon
 * @property {number} decimal
 * @property {string} initialSupply
 * @property {string} totalSupply
 * @property {number} inflationRate
 * @property {string} address
 */

/**
 * Structure of GraphQLClient.GasEstimate 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GasEstimate
 * @property {string} max
 */

/**
 * Structure of GraphQLClient.GeoInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GeoInfo
 * @property {string} city
 * @property {string} country
 * @property {number} latitude
 * @property {number} longitude
 */

/**
 * Structure of GraphQLClient.IndexedAccountState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedAccountState
 * @property {string} address
 * @property {string} balance
 * @property {string} numAssets
 * @property {string} numTxs
 * @property {string} nonce
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {string} moniker
 * @property {string} migratedFrom
 * @property {string} migratedTo
 * @property {string} totalReceivedStakes
 * @property {string} totalStakes
 * @property {string} totalUnstakes
 * @property {Array<string>} recentNumTxs
 * @property {Array<...GraphQLClient.TokenInfo>} tokens
 */

/**
 * Structure of GraphQLClient.IndexedAssetState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedAssetState
 * @property {string} address
 * @property {string} owner
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {string} moniker
 * @property {boolean} readonly
 * @property {string} consumedTime
 * @property {string} issuer
 * @property {string} parent
 * @property {boolean} transferrable
 * @property {string} ttl
 * @property {...GraphQLClient.NFTDisplay} display
 * @property {...GraphQLClient.NFTEndpoint} endpoint
 * @property {Array<string>} tags
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.IndexedBlock 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedBlock
 * @property {string} height
 * @property {string} time
 * @property {string} proposer
 * @property {string} numTxs
 * @property {string} numInvalidTxs
 */

/**
 * Structure of GraphQLClient.IndexedFactoryInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedFactoryInput
 * @property {string} value
 * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens
 * @property {Array<string>} assets
 * @property {Array<...GraphQLClient.VariableInput>} variables
 */

/**
 * Structure of GraphQLClient.IndexedFactoryState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedFactoryState
 * @property {string} address
 * @property {string} owner
 * @property {string} name
 * @property {string} description
 * @property {string} settlement
 * @property {string} limit
 * @property {Array<string>} trustedIssuers
 * @property {...GraphQLClient.IndexedFactoryInput} input
 * @property {...GraphQLClient.CreateAssetTx} output
 * @property {Array<...GraphQLClient.AssetFactoryHook>} hooks
 * @property {...GraphQLClient.Any} data
 * @property {string} balance
 * @property {Array<...GraphQLClient.TokenInfo>} tokens
 * @property {number} numMinted
 * @property {string} lastSettlement
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {...GraphQLClient.NFTDisplay} display
 */

/**
 * Structure of GraphQLClient.IndexedRollupBlock 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedRollupBlock
 * @property {string} hash
 * @property {number} height
 * @property {string} merkleRoot
 * @property {string} previousHash
 * @property {string} txsHash
 * @property {Array<string>} txs
 * @property {string} proposer
 * @property {Array<...GraphQLClient.Multisig>} signatures
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {string} rollup
 * @property {string} mintedAmount
 * @property {string} burnedAmount
 * @property {string} rewardAmount
 * @property {boolean} governance
 * @property {...GraphQLClient.IndexedTokenInput} tokenInfo
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.IndexedRollupState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedRollupState
 * @property {string} address
 * @property {string} tokenAddress
 * @property {string} vaultAddress
 * @property {string} contractAddress
 * @property {Array<...GraphQLClient.RollupValidator>} seedValidators
 * @property {Array<...GraphQLClient.RollupValidator>} validators
 * @property {string} minStakeAmount
 * @property {string} maxStakeAmount
 * @property {number} minSignerCount
 * @property {number} maxSignerCount
 * @property {number} minBlockSize
 * @property {number} maxBlockSize
 * @property {number} minBlockInterval
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {...GraphQLClient.IndexedTokenInput} tokenInfo
 * @property {string} issuer
 * @property {number} depositFeeRate
 * @property {number} withdrawFeeRate
 * @property {number} proposerFeeShare
 * @property {string} minDepositAmount
 * @property {string} minWithdrawAmount
 * @property {number} blockHeight
 * @property {string} blockHash
 * @property {number} minBlockConfirmation
 * @property {string} totalDepositAmount
 * @property {string} totalWithdrawAmount
 * @property {string} maxDepositAmount
 * @property {string} maxWithdrawAmount
 * @property {string} minDepositFee
 * @property {string} maxDepositFee
 * @property {string} minWithdrawFee
 * @property {string} maxWithdrawFee
 * @property {boolean} paused
 * @property {...GraphQLClient.ForeignToken} foreignToken
 * @property {number} leaveWaitingPeriod
 * @property {number} publisherFeeShare
 * @property {number} publishWaitingPeriod
 * @property {number} publishSlashRate
 * @property {Array<string>} migrateHistory
 * @property {boolean} closed
 * @property {Array<string>} vaultHistory
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.IndexedRollupValidator 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedRollupValidator
 * @property {string} pk
 * @property {string} address
 * @property {string} moniker
 * @property {string} endpoint
 * @property {string} joinTime
 * @property {string} leaveTime
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {string} totalStake
 * @property {string} revokedStake
 * @property {string} availableStake
 * @property {string} totalGain
 * @property {number} proposedBlockCount
 * @property {number} verifiedBlockCount
 * @property {number} latestBlockHeight
 * @property {string} latestBlockHash
 * @property {string} rollup
 */

/**
 * Structure of GraphQLClient.IndexedStakeState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedStakeState
 * @property {string} address
 * @property {string} sender
 * @property {string} receiver
 * @property {Array<...GraphQLClient.TokenInfo>} tokens
 * @property {Array<string>} assets
 * @property {boolean} revocable
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {string} message
 * @property {number} revokeWaitingPeriod
 * @property {Array<...GraphQLClient.TokenInfo>} revokedTokens
 * @property {Array<string>} revokedAssets
 * @property {Array<string>} slashers
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.IndexedTokenInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedTokenInput
 * @property {string} address
 * @property {string} value
 * @property {number} decimal
 * @property {string} unit
 * @property {string} symbol
 */

/**
 * Structure of GraphQLClient.IndexedTokenState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedTokenState
 * @property {string} name
 * @property {string} description
 * @property {string} symbol
 * @property {string} unit
 * @property {number} decimal
 * @property {string} issuer
 * @property {string} icon
 * @property {string} totalSupply
 * @property {string} address
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 * @property {...GraphQLClient.ForeignToken} foreignToken
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.IndexedTransaction 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.IndexedTransaction
 * @property {string} hash
 * @property {string} sender
 * @property {string} receiver
 * @property {string} time
 * @property {string} type
 * @property {...GraphQLClient.Transaction} tx
 * @property {boolean} valid
 * @property {string} code
 * @property {Array<...GraphQLClient.TokenSymbol>} tokenSymbols
 * @property {Array<...GraphQLClient.TransactionReceipt>} receipts
 */

/**
 * Structure of GraphQLClient.JoinRollupTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.JoinRollupTx
 * @property {string} rollup
 * @property {string} endpoint
 * @property {...GraphQLClient.Evidence} evidence
 * @property {Array<...GraphQLClient.Multisig>} signatures
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.KVPair 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.KVPair
 * @property {string} key
 * @property {string} value
 */

/**
 * Structure of GraphQLClient.LeaveRollupTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.LeaveRollupTx
 * @property {string} rollup
 * @property {...GraphQLClient.Evidence} evidence
 * @property {Array<...GraphQLClient.Multisig>} signatures
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.MigrateRollupTx 
 *
 * Checkout the following snippet for the format of MigrateRollupTx:
 * ```json
{
  "rollup": "abc",
  "to": "abc",
  "type": "abc",
  "message": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.MigrateRollupTx
 * @property {string} rollup
 * @property {string} to
 * @property {string} type
 * @property {string} message
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.MintAssetTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.MintAssetTx
 * @property {string} factory
 * @property {string} address
 * @property {Array<string>} assets
 * @property {Array<...GraphQLClient.VariableInput>} variables
 * @property {string} owner
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.Multisig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.Multisig
 * @property {string} signer
 * @property {string} pk
 * @property {string} signature
 * @property {string} delegator
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.NFTDisplay 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.NFTDisplay
 * @property {string} type
 * @property {string} content
 */

/**
 * Structure of GraphQLClient.NFTEndpoint 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.NFTEndpoint
 * @property {string} id
 * @property {string} scope
 */

/**
 * Structure of GraphQLClient.NFTIssuer 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.NFTIssuer
 * @property {string} id
 * @property {string} pk
 * @property {string} name
 */

/**
 * Structure of GraphQLClient.NetInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.NetInfo
 * @property {boolean} listening
 * @property {Array<string>} listeners
 * @property {number} nPeers
 * @property {Array<...GraphQLClient.PeerInfo>} peers
 */

/**
 * Structure of GraphQLClient.NodeInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.NodeInfo
 * @property {string} id
 * @property {string} network
 * @property {string} moniker
 * @property {string} consensusVersion
 * @property {boolean} synced
 * @property {string} appHash
 * @property {string} blockHash
 * @property {string} blockHeight
 * @property {string} blockTime
 * @property {string} address
 * @property {string} votingPower
 * @property {string} totalTxs
 * @property {string} version
 * @property {Array<...GraphQLClient.NodeInfo_ForgeAppsVersionEntry>} forgeAppsVersion
 * @property {Array<string>} supportedTxs
 * @property {string} ip
 * @property {...GraphQLClient.GeoInfo} geoInfo
 * @property {string} p2pAddress
 */

/**
 * Structure of GraphQLClient.NodeInfo_ForgeAppsVersionEntry 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.NodeInfo_ForgeAppsVersionEntry
 * @property {string} key
 * @property {string} value
 */

/**
 * Structure of GraphQLClient.PageInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PageInfo
 * @property {string} cursor
 * @property {boolean} next
 * @property {number} total
 */

/**
 * Structure of GraphQLClient.PartSetHeader 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PartSetHeader
 * @property {number} total
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.PauseRollupTx 
 *
 * Checkout the following snippet for the format of PauseRollupTx:
 * ```json
{
  "rollup": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PauseRollupTx
 * @property {string} rollup
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.PeerInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PeerInfo
 * @property {string} id
 * @property {string} network
 * @property {string} consensusVersion
 * @property {string} moniker
 * @property {string} ip
 * @property {...GraphQLClient.GeoInfo} geoInfo
 */

/**
 * Structure of GraphQLClient.PubKey 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.PubKey
 * @property {string} type
 * @property {string} data
 */

/**
 * Structure of GraphQLClient.ReceiptChange 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ReceiptChange
 * @property {string} target
 * @property {string} action
 * @property {string} value
 */

/**
 * Structure of GraphQLClient.ResponseEstimateGas 
 *
 * Checkout the following snippet for the format of ResponseEstimateGas:
 * ```json
{
  "code": "abc",
  "estimate": {
    "max": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseEstimateGas
 * @property {string} code
 * @property {...GraphQLClient.GasEstimate} estimate
 */

/**
 * Structure of GraphQLClient.ResponseGetAccountState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetAccountState
 * @property {string} code
 * @property {...GraphQLClient.AccountState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetAccountTokens 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetAccountTokens
 * @property {string} code
 * @property {Array<...GraphQLClient.AccountToken>} tokens
 */

/**
 * Structure of GraphQLClient.ResponseGetAssetState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetAssetState
 * @property {string} code
 * @property {...GraphQLClient.AssetState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetBlock 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetBlock
 * @property {string} code
 * @property {...GraphQLClient.BlockInfo} block
 */

/**
 * Structure of GraphQLClient.ResponseGetBlocks 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetBlocks
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.BlockInfoSimple>} blocks
 */

/**
 * Structure of GraphQLClient.ResponseGetChainInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetChainInfo
 * @property {string} code
 * @property {...GraphQLClient.ChainInfo} info
 */

/**
 * Structure of GraphQLClient.ResponseGetConfig 
 *
 * Checkout the following snippet for the format of ResponseGetConfig:
 * ```json
{
  "code": "abc",
  "config": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetConfig
 * @property {string} code
 * @property {string} config
 */

/**
 * Structure of GraphQLClient.ResponseGetDelegateState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetDelegateState
 * @property {string} code
 * @property {...GraphQLClient.DelegateState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetEvidenceState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetEvidenceState
 * @property {string} code
 * @property {...GraphQLClient.EvidenceState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetFactoryState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetFactoryState
 * @property {string} code
 * @property {...GraphQLClient.AssetFactoryState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetForgeState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetForgeState
 * @property {string} code
 * @property {...GraphQLClient.ForgeState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetForgeStats 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetForgeStats
 * @property {string} code
 * @property {...GraphQLClient.ForgeStats} forgeStats
 */

/**
 * Structure of GraphQLClient.ResponseGetNetInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetNetInfo
 * @property {string} code
 * @property {...GraphQLClient.NetInfo} netInfo
 */

/**
 * Structure of GraphQLClient.ResponseGetNodeInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetNodeInfo
 * @property {string} code
 * @property {...GraphQLClient.NodeInfo} info
 */

/**
 * Structure of GraphQLClient.ResponseGetRollupBlock 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetRollupBlock
 * @property {string} code
 * @property {...GraphQLClient.RollupBlock} block
 */

/**
 * Structure of GraphQLClient.ResponseGetRollupState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetRollupState
 * @property {string} code
 * @property {...GraphQLClient.RollupState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetStakeState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetStakeState
 * @property {string} code
 * @property {...GraphQLClient.StakeState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetTokenState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetTokenState
 * @property {string} code
 * @property {...GraphQLClient.TokenState} state
 */

/**
 * Structure of GraphQLClient.ResponseGetTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetTx
 * @property {string} code
 * @property {...GraphQLClient.TransactionInfo} info
 */

/**
 * Structure of GraphQLClient.ResponseGetUnconfirmedTxs 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetUnconfirmedTxs
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {...GraphQLClient.UnconfirmedTxs} unconfirmedTxs
 */

/**
 * Structure of GraphQLClient.ResponseGetValidatorsInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseGetValidatorsInfo
 * @property {string} code
 * @property {...GraphQLClient.ValidatorsInfo} validatorsInfo
 */

/**
 * Structure of GraphQLClient.ResponseListAssetTransactions 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListAssetTransactions
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedTransaction>} transactions
 */

/**
 * Structure of GraphQLClient.ResponseListAssets 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListAssets
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedAssetState>} assets
 */

/**
 * Structure of GraphQLClient.ResponseListBlocks 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListBlocks
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedBlock>} blocks
 */

/**
 * Structure of GraphQLClient.ResponseListFactories 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListFactories
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedFactoryState>} factories
 */

/**
 * Structure of GraphQLClient.ResponseListRollupBlocks 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListRollupBlocks
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedRollupBlock>} blocks
 */

/**
 * Structure of GraphQLClient.ResponseListRollupValidators 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListRollupValidators
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedRollupValidator>} validators
 */

/**
 * Structure of GraphQLClient.ResponseListRollups 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListRollups
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedRollupState>} rollups
 */

/**
 * Structure of GraphQLClient.ResponseListStakes 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListStakes
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedStakeState>} stakes
 */

/**
 * Structure of GraphQLClient.ResponseListTokens 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListTokens
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedTokenState>} tokens
 */

/**
 * Structure of GraphQLClient.ResponseListTopAccounts 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListTopAccounts
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedAccountState>} accounts
 */

/**
 * Structure of GraphQLClient.ResponseListTransactions 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseListTransactions
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.IndexedTransaction>} transactions
 */

/**
 * Structure of GraphQLClient.ResponseSearch 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseSearch
 * @property {string} code
 * @property {...GraphQLClient.PageInfo} page
 * @property {Array<...GraphQLClient.SearchResult>} results
 */

/**
 * Structure of GraphQLClient.ResponseSendTx 
 *
 * Checkout the following snippet for the format of ResponseSendTx:
 * ```json
{
  "code": "abc",
  "hash": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResponseSendTx
 * @property {string} code
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.ResumeRollupTx 
 *
 * Checkout the following snippet for the format of ResumeRollupTx:
 * ```json
{
  "rollup": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ResumeRollupTx
 * @property {string} rollup
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.RevokeDelegateTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RevokeDelegateTx
 * @property {string} address
 * @property {string} to
 * @property {Array<string>} typeUrls
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.RevokeStakeTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RevokeStakeTx
 * @property {string} address
 * @property {Array<...GraphQLClient.TransactionInput>} outputs
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.RollupBlock 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RollupBlock
 * @property {string} hash
 * @property {number} height
 * @property {string} merkleRoot
 * @property {string} previousHash
 * @property {string} txsHash
 * @property {Array<string>} txs
 * @property {string} proposer
 * @property {Array<...GraphQLClient.Multisig>} signatures
 * @property {string} rollup
 * @property {string} mintedAmount
 * @property {string} burnedAmount
 * @property {string} rewardAmount
 * @property {string} minReward
 * @property {boolean} governance
 * @property {...GraphQLClient.StateContext} context
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.RollupState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RollupState
 * @property {string} address
 * @property {string} tokenAddress
 * @property {string} vaultAddress
 * @property {string} contractAddress
 * @property {Array<...GraphQLClient.RollupValidator>} seedValidators
 * @property {Array<...GraphQLClient.RollupValidator>} validators
 * @property {string} minStakeAmount
 * @property {string} maxStakeAmount
 * @property {number} minSignerCount
 * @property {number} maxSignerCount
 * @property {number} minBlockSize
 * @property {number} maxBlockSize
 * @property {number} minBlockInterval
 * @property {number} minBlockConfirmation
 * @property {string} issuer
 * @property {number} depositFeeRate
 * @property {number} withdrawFeeRate
 * @property {number} proposerFeeShare
 * @property {number} publisherFeeShare
 * @property {string} minDepositAmount
 * @property {string} minWithdrawAmount
 * @property {number} blockHeight
 * @property {string} blockHash
 * @property {...GraphQLClient.IndexedTokenInput} tokenInfo
 * @property {string} totalDepositAmount
 * @property {string} totalWithdrawAmount
 * @property {string} maxDepositAmount
 * @property {string} maxWithdrawAmount
 * @property {string} minDepositFee
 * @property {string} maxDepositFee
 * @property {string} minWithdrawFee
 * @property {string} maxWithdrawFee
 * @property {boolean} paused
 * @property {...GraphQLClient.ForeignToken} foreignToken
 * @property {number} leaveWaitingPeriod
 * @property {number} publishWaitingPeriod
 * @property {number} publishSlashRate
 * @property {Array<string>} migrateHistory
 * @property {boolean} closed
 * @property {Array<string>} vaultHistory
 * @property {...GraphQLClient.StateContext} context
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.RollupValidator 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.RollupValidator
 * @property {string} pk
 * @property {string} address
 * @property {string} endpoint
 */

/**
 * Structure of GraphQLClient.SearchResult 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.SearchResult
 * @property {string} type
 * @property {string} id
 */

/**
 * Structure of GraphQLClient.SlashStakeTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.SlashStakeTx
 * @property {string} address
 * @property {Array<...GraphQLClient.TransactionInput>} outputs
 * @property {string} message
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.StakeState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.StakeState
 * @property {string} address
 * @property {string} sender
 * @property {string} receiver
 * @property {Array<...GraphQLClient.IndexedTokenInput>} tokens
 * @property {Array<string>} assets
 * @property {boolean} revocable
 * @property {string} message
 * @property {number} revokeWaitingPeriod
 * @property {Array<...GraphQLClient.IndexedTokenInput>} revokedTokens
 * @property {Array<string>} revokedAssets
 * @property {Array<string>} slashers
 * @property {...GraphQLClient.StateContext} context
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.StakeTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.StakeTx
 * @property {string} address
 * @property {string} receiver
 * @property {Array<...GraphQLClient.TransactionInput>} inputs
 * @property {boolean} locked
 * @property {string} message
 * @property {number} revokeWaitingPeriod
 * @property {Array<string>} slashers
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.StateContext 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.StateContext
 * @property {...GraphQLClient.TransactionInfo} genesisTx
 * @property {...GraphQLClient.TransactionInfo} renaissanceTx
 * @property {string} genesisTime
 * @property {string} renaissanceTime
 */

/**
 * Structure of GraphQLClient.TokenInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TokenInfo
 * @property {string} address
 * @property {string} balance
 * @property {number} decimal
 * @property {string} unit
 * @property {string} symbol
 */

/**
 * Structure of GraphQLClient.TokenInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TokenInput
 * @property {string} address
 * @property {string} value
 */

/**
 * Structure of GraphQLClient.TokenState 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TokenState
 * @property {string} address
 * @property {string} issuer
 * @property {string} name
 * @property {string} description
 * @property {string} symbol
 * @property {string} unit
 * @property {number} decimal
 * @property {string} icon
 * @property {string} totalSupply
 * @property {...GraphQLClient.ForeignToken} foreignToken
 * @property {...GraphQLClient.StateContext} context
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.TokenSymbol 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TokenSymbol
 * @property {string} address
 * @property {string} symbol
 * @property {number} decimal
 * @property {string} unit
 */

/**
 * Structure of GraphQLClient.Transaction 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.Transaction
 * @property {string} from
 * @property {string} delegator
 * @property {string} nonce
 * @property {string} chainId
 * @property {string} pk
 * @property {string} signature
 * @property {Array<...GraphQLClient.Multisig>} signatures
 * @property {undefined} itxJson
 * @property {string} sender
 * @property {string} receiver
 * @property {string} serviceFee
 * @property {string} gasFee
 * @property {string} gasPaid
 */

/**
 * Structure of GraphQLClient.TransactionConfig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransactionConfig
 * @property {number} maxAssetSize
 * @property {number} maxListSize
 * @property {number} maxMultisig
 * @property {...GraphQLClient.DelegateConfig} delegate
 * @property {Array<...GraphQLClient.TxFeeConfig>} txFee
 * @property {...GraphQLClient.TxGasConfig} txGas
 */

/**
 * Structure of GraphQLClient.TransactionInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransactionInfo
 * @property {...GraphQLClient.Transaction} tx
 * @property {string} height
 * @property {number} index
 * @property {string} hash
 * @property {Array<...GraphQLClient.KVPair>} tags
 * @property {string} code
 * @property {string} time
 * @property {Array<...GraphQLClient.TransactionReceipt>} receipts
 * @property {string} sender
 * @property {string} receiver
 * @property {Array<...GraphQLClient.TokenSymbol>} tokenSymbols
 */

/**
 * Structure of GraphQLClient.TransactionInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransactionInput
 * @property {string} owner
 * @property {Array<...GraphQLClient.TokenInput>} tokens
 * @property {Array<string>} assets
 */

/**
 * Structure of GraphQLClient.TransactionReceipt 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransactionReceipt
 * @property {string} address
 * @property {Array<...GraphQLClient.ReceiptChange>} changes
 */

/**
 * Structure of GraphQLClient.TransferTx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransferTx
 * @property {string} to
 * @property {string} value
 * @property {Array<string>} assets
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.TransferV2Tx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransferV2Tx
 * @property {string} to
 * @property {string} value
 * @property {Array<string>} assets
 * @property {Array<...GraphQLClient.TokenInput>} tokens
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.TransferV3Tx 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TransferV3Tx
 * @property {Array<...GraphQLClient.TransactionInput>} inputs
 * @property {Array<...GraphQLClient.TransactionInput>} outputs
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.TxFeeConfig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TxFeeConfig
 * @property {string} typeUrl
 * @property {string} fee
 */

/**
 * Structure of GraphQLClient.TxGasConfig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.TxGasConfig
 * @property {number} price
 * @property {number} createState
 * @property {number} updateState
 * @property {number} dataStorage
 * @property {string} minStake
 * @property {string} maxStake
 * @property {number} stakeLockPeriod
 */

/**
 * Structure of GraphQLClient.UnconfirmedTxs 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UnconfirmedTxs
 * @property {number} nTxs
 * @property {Array<...GraphQLClient.Transaction>} txs
 */

/**
 * Structure of GraphQLClient.UpdateAssetTx 
 *
 * Checkout the following snippet for the format of UpdateAssetTx:
 * ```json
{
  "address": "abc",
  "moniker": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UpdateAssetTx
 * @property {string} address
 * @property {string} moniker
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.UpdateRollupTx 
 *
 * Checkout the following snippet for the format of UpdateRollupTx:
 * ```json
{
  "minStakeAmount": "abc",
  "maxStakeAmount": "abc",
  "minSignerCount": 123,
  "maxSignerCount": 123,
  "minBlockSize": 123,
  "maxBlockSize": 123,
  "minBlockInterval": 123,
  "minBlockConfirmation": 123,
  "depositFeeRate": 123,
  "withdrawFeeRate": 123,
  "proposerFeeShare": 123,
  "minDepositAmount": "abc",
  "minWithdrawAmount": "abc",
  "maxDepositAmount": "abc",
  "maxWithdrawAmount": "abc",
  "minDepositFee": "abc",
  "maxDepositFee": "abc",
  "minWithdrawFee": "abc",
  "maxWithdrawFee": "abc",
  "publisherFeeShare": 123,
  "leaveWaitingPeriod": 123,
  "publishWaitingPeriod": 123,
  "publishSlashRate": 123,
  "rollup": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UpdateRollupTx
 * @property {string} minStakeAmount
 * @property {string} maxStakeAmount
 * @property {number} minSignerCount
 * @property {number} maxSignerCount
 * @property {number} minBlockSize
 * @property {number} maxBlockSize
 * @property {number} minBlockInterval
 * @property {number} minBlockConfirmation
 * @property {number} depositFeeRate
 * @property {number} withdrawFeeRate
 * @property {number} proposerFeeShare
 * @property {string} minDepositAmount
 * @property {string} minWithdrawAmount
 * @property {string} maxDepositAmount
 * @property {string} maxWithdrawAmount
 * @property {string} minDepositFee
 * @property {string} maxDepositFee
 * @property {string} minWithdrawFee
 * @property {string} maxWithdrawFee
 * @property {number} publisherFeeShare
 * @property {number} leaveWaitingPeriod
 * @property {number} publishWaitingPeriod
 * @property {number} publishSlashRate
 * @property {string} rollup
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.UpgradeInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UpgradeInfo
 * @property {string} height
 * @property {string} version
 */

/**
 * Structure of GraphQLClient.UpgradeNodeTx 
 *
 * Checkout the following snippet for the format of UpgradeNodeTx:
 * ```json
{
  "height": 123,
  "version": "abc",
  "override": true
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UpgradeNodeTx
 * @property {number} height
 * @property {string} version
 * @property {boolean} override
 */

/**
 * Structure of GraphQLClient.UpgradeTask 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UpgradeTask
 * @property {...GraphQLClient.UpgradeType} type
 * @property {string} dataHash
 * @property {Array<...GraphQLClient.UpgradeAction>} actions
 */

/**
 * Structure of GraphQLClient.UpgradeTasks 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.UpgradeTasks
 * @property {Array<...GraphQLClient.UpgradeTask>} item
 */

/**
 * Structure of GraphQLClient.Validator 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.Validator
 * @property {string} address
 * @property {string} power
 */

/**
 * Structure of GraphQLClient.ValidatorInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ValidatorInfo
 * @property {string} address
 * @property {...GraphQLClient.PubKey} pubKey
 * @property {string} votingPower
 * @property {string} proposerPriority
 * @property {string} name
 * @property {...GraphQLClient.GeoInfo} geoInfo
 */

/**
 * Structure of GraphQLClient.ValidatorsInfo 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ValidatorsInfo
 * @property {string} blockHeight
 * @property {Array<...GraphQLClient.ValidatorInfo>} validators
 */

/**
 * Structure of GraphQLClient.VariableInput 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.VariableInput
 * @property {string} name
 * @property {string} value
 * @property {string} description
 * @property {boolean} required
 */

/**
 * Structure of GraphQLClient.VaultConfig 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.VaultConfig
 * @property {string} slashedStake
 * @property {string} txFee
 * @property {Array<string>} txGas
 */

/**
 * Structure of GraphQLClient.Version 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.Version
 * @property {number} block
 * @property {number} app
 */

/**
 * Structure of GraphQLClient.WalletType 
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.WalletType
 * @property {...GraphQLClient.KeyType} pk
 * @property {...GraphQLClient.HashType} hash
 * @property {...GraphQLClient.EncodingType} address
 * @property {...GraphQLClient.RoleType} role
 */

/**
 * Structure of GraphQLClient.WithdrawTokenV2Tx 
 *
 * Checkout the following snippet for the format of WithdrawTokenV2Tx:
 * ```json
{
  "token": {
    "address": "abc",
    "value": "abc"
  },
  "to": "abc",
  "rollup": "abc",
  "proposer": "abc",
  "maxFee": "abc",
  "actualFee": "abc",
  "data": {
    "typeUrl": "abc",
    "value": "abc"
  }
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.WithdrawTokenV2Tx
 * @property {...GraphQLClient.TokenInput} token
 * @property {string} to
 * @property {string} rollup
 * @property {string} proposer
 * @property {string} maxFee
 * @property {string} actualFee
 * @property {...GraphQLClient.Any} data
 */

/**
 * Structure of GraphQLClient.GetAccountStateParams 
 *
 * Checkout the following snippet for the format of GetAccountStateParams:
 * ```json
{
  "address": "abc",
  "height": "abc",
  "keys": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetAccountStateParams
 * @property {string} address
 * @property {string} height
 * @property {Array<string>} keys
 */

/**
 * Structure of GraphQLClient.GetAssetStateParams 
 *
 * Checkout the following snippet for the format of GetAssetStateParams:
 * ```json
{
  "address": "abc",
  "height": "abc",
  "keys": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetAssetStateParams
 * @property {string} address
 * @property {string} height
 * @property {Array<string>} keys
 */

/**
 * Structure of GraphQLClient.GetFactoryStateParams 
 *
 * Checkout the following snippet for the format of GetFactoryStateParams:
 * ```json
{
  "address": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetFactoryStateParams
 * @property {string} address
 */

/**
 * Structure of GraphQLClient.GetDelegateStateParams 
 *
 * Checkout the following snippet for the format of GetDelegateStateParams:
 * ```json
{
  "address": "abc",
  "height": "abc",
  "keys": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetDelegateStateParams
 * @property {string} address
 * @property {string} height
 * @property {Array<string>} keys
 */

/**
 * Structure of GraphQLClient.GetTokenStateParams 
 *
 * Checkout the following snippet for the format of GetTokenStateParams:
 * ```json
{
  "address": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetTokenStateParams
 * @property {string} address
 */

/**
 * Structure of GraphQLClient.GetEvidenceStateParams 
 *
 * Checkout the following snippet for the format of GetEvidenceStateParams:
 * ```json
{
  "hash": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetEvidenceStateParams
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.GetForgeStateParams 
 *
 * Checkout the following snippet for the format of GetForgeStateParams:
 * ```json
{
  "height": "abc",
  "keys": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetForgeStateParams
 * @property {string} height
 * @property {Array<string>} keys
 */

/**
 * Structure of GraphQLClient.GetTxParams 
 *
 * Checkout the following snippet for the format of GetTxParams:
 * ```json
{
  "hash": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetTxParams
 * @property {string} hash
 */

/**
 * Structure of GraphQLClient.GetBlockParams 
 *
 * Checkout the following snippet for the format of GetBlockParams:
 * ```json
{
  "height": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetBlockParams
 * @property {string} height
 */

/**
 * Structure of GraphQLClient.GetBlocksParams 
 *
 * Checkout the following snippet for the format of GetBlocksParams:
 * ```json
{
  "emptyExcluded": true
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetBlocksParams
 * @property {boolean} emptyExcluded
 * @property {...GraphQLClient.RangeFilterInput} heightFilter
 * @property {...GraphQLClient.PageInput} paging
 */

/**
 * Structure of GraphQLClient.GetUnconfirmedTxsParams 
 *
 * Checkout the following snippet for the format of GetUnconfirmedTxsParams:
 * ```json
{}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetUnconfirmedTxsParams
 * @property {...GraphQLClient.PageInput} paging
 */

/**
 * Structure of GraphQLClient.GetConfigParams 
 *
 * Checkout the following snippet for the format of GetConfigParams:
 * ```json
{
  "parsed": true
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetConfigParams
 * @property {boolean} parsed
 */

/**
 * Structure of GraphQLClient.ListAssetTransactionsParams 
 *
 * Checkout the following snippet for the format of ListAssetTransactionsParams:
 * ```json
{
  "address": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListAssetTransactionsParams
 * @property {string} address
 * @property {...GraphQLClient.PageInput} paging
 */

/**
 * Structure of GraphQLClient.ListAssetsParams 
 *
 * Checkout the following snippet for the format of ListAssetsParams:
 * ```json
{
  "ownerAddress": "abc",
  "factoryAddress": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListAssetsParams
 * @property {string} ownerAddress
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} factoryAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.ListBlocksParams 
 *
 * Checkout the following snippet for the format of ListBlocksParams:
 * ```json
{
  "proposer": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListBlocksParams
 * @property {...GraphQLClient.RangeFilterInput} heightFilter
 * @property {...GraphQLClient.RangeFilterInput} numInvalidTxsFilter
 * @property {...GraphQLClient.RangeFilterInput} numTxsFilter
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} proposer
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.ListTopAccountsParams 
 *
 * Checkout the following snippet for the format of ListTopAccountsParams:
 * ```json
{
  "tokenAddress": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListTopAccountsParams
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} tokenAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.ListTransactionsParams 
 *
 * Checkout the following snippet for the format of ListTransactionsParams:
 * ```json
{}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListTransactionsParams
 * @property {...GraphQLClient.AddressFilterInput} addressFilter
 * @property {...GraphQLClient.PageInput} paging
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 * @property {...GraphQLClient.TypeFilterInput} typeFilter
 * @property {...GraphQLClient.ValidityFilterInput} validityFilter
 * @property {...GraphQLClient.FactoryFilterInput} factoryFilter
 * @property {...GraphQLClient.TokenFilterInput} tokenFilter
 * @property {...GraphQLClient.AssetFilterInput} assetFilter
 * @property {...GraphQLClient.AccountFilterInput} accountFilter
 * @property {...GraphQLClient.TxFilterInput} txFilter
 * @property {...GraphQLClient.RollupFilterInput} rollupFilter
 * @property {...GraphQLClient.StakeFilterInput} stakeFilter
 */

/**
 * Structure of GraphQLClient.ListTokensParams 
 *
 * Checkout the following snippet for the format of ListTokensParams:
 * ```json
{
  "issuerAddress": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListTokensParams
 * @property {string} issuerAddress
 * @property {...GraphQLClient.PageInput} paging
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.ListFactoriesParams 
 *
 * Checkout the following snippet for the format of ListFactoriesParams:
 * ```json
{
  "ownerAddress": "abc",
  "addressList": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListFactoriesParams
 * @property {string} ownerAddress
 * @property {Array<string>} addressList
 * @property {...GraphQLClient.PageInput} paging
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.GetAccountTokensParams 
 *
 * Checkout the following snippet for the format of GetAccountTokensParams:
 * ```json
{
  "address": "abc",
  "token": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetAccountTokensParams
 * @property {string} address
 * @property {string} token
 */

/**
 * Structure of GraphQLClient.GetStakeStateParams 
 *
 * Checkout the following snippet for the format of GetStakeStateParams:
 * ```json
{
  "address": "abc",
  "height": "abc",
  "keys": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetStakeStateParams
 * @property {string} address
 * @property {string} height
 * @property {Array<string>} keys
 */

/**
 * Structure of GraphQLClient.ListStakesParams 
 *
 * Checkout the following snippet for the format of ListStakesParams:
 * ```json
{}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListStakesParams
 * @property {...GraphQLClient.AddressFilterInput} addressFilter
 * @property {...GraphQLClient.AssetFilterInput} assetFilter
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 * @property {...GraphQLClient.PageInput} paging
 */

/**
 * Structure of GraphQLClient.GetRollupStateParams 
 *
 * Checkout the following snippet for the format of GetRollupStateParams:
 * ```json
{
  "address": "abc",
  "height": "abc",
  "keys": [
    "abc"
  ]
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetRollupStateParams
 * @property {string} address
 * @property {string} height
 * @property {Array<string>} keys
 */

/**
 * Structure of GraphQLClient.ListRollupsParams 
 *
 * Checkout the following snippet for the format of ListRollupsParams:
 * ```json
{
  "tokenAddress": "abc",
  "erc20TokenAddress": "abc",
  "foreignTokenAddress": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListRollupsParams
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} tokenAddress
 * @property {string} erc20TokenAddress
 * @property {string} foreignTokenAddress
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.GetRollupBlockParams 
 *
 * Checkout the following snippet for the format of GetRollupBlockParams:
 * ```json
{
  "hash": "abc",
  "height": "abc",
  "rollupAddress": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.GetRollupBlockParams
 * @property {string} hash
 * @property {string} height
 * @property {string} rollupAddress
 */

/**
 * Structure of GraphQLClient.ListRollupBlocksParams 
 *
 * Checkout the following snippet for the format of ListRollupBlocksParams:
 * ```json
{
  "rollupAddress": "abc",
  "tokenAddress": "abc",
  "proposer": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListRollupBlocksParams
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} rollupAddress
 * @property {string} tokenAddress
 * @property {string} proposer
 * @property {...GraphQLClient.ValidatorFilterInput} validatorFilter
 * @property {...GraphQLClient.TxFilterInput} txFilter
 * @property {...GraphQLClient.TimeFilterInput} timeFilter
 */

/**
 * Structure of GraphQLClient.ListRollupValidatorsParams 
 *
 * Checkout the following snippet for the format of ListRollupValidatorsParams:
 * ```json
{
  "rollupAddress": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.ListRollupValidatorsParams
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} rollupAddress
 */

/**
 * Structure of GraphQLClient.SearchParams 
 *
 * Checkout the following snippet for the format of SearchParams:
 * ```json
{
  "keyword": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.SearchParams
 * @property {...GraphQLClient.PageInput} paging
 * @property {string} keyword
 */

/**
 * Structure of GraphQLClient.EstimateGasParams 
 *
 * Checkout the following snippet for the format of EstimateGasParams:
 * ```json
{
  "typeUrl": "abc",
  "tx": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.EstimateGasParams
 * @property {string} typeUrl
 * @property {string} tx
 */

/**
 * Structure of GraphQLClient.SendTxParams 
 *
 * Checkout the following snippet for the format of SendTxParams:
 * ```json
{
  "commit": true,
  "token": "abc",
  "tx": "abc",
  "wallet": "abc"
}
 * ```
 *
 * @memberof GraphQLClient
 * @typedef {object} GraphQLClient.SendTxParams
 * @property {boolean} commit
 * @property {string} token
 * @property {string} tx
 * @property {string} wallet
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.AccountMigrateTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.AccountMigrateTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send AccountMigrateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendAccountMigrateTx
 * @param {GraphQLClient.AccountMigrateTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.AcquireAssetV2TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.AcquireAssetV2Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send AcquireAssetV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendAcquireAssetV2Tx
 * @param {GraphQLClient.AcquireAssetV2TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.AcquireAssetV3TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.AcquireAssetV3Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send AcquireAssetV3Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendAcquireAssetV3Tx
 * @param {GraphQLClient.AcquireAssetV3TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.ClaimBlockRewardTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.ClaimBlockRewardTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send ClaimBlockRewardTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendClaimBlockRewardTx
 * @param {GraphQLClient.ClaimBlockRewardTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.ClaimStakeTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.ClaimStakeTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send ClaimStakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendClaimStakeTx
 * @param {GraphQLClient.ClaimStakeTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.CloseRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.CloseRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send CloseRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendCloseRollupTx
 * @param {GraphQLClient.CloseRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.CreateAssetTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.CreateAssetTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send CreateAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendCreateAssetTx
 * @param {GraphQLClient.CreateAssetTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.CreateFactoryTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.CreateFactoryTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send CreateFactoryTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendCreateFactoryTx
 * @param {GraphQLClient.CreateFactoryTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.CreateRollupBlockTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.CreateRollupBlockTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send CreateRollupBlockTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendCreateRollupBlockTx
 * @param {GraphQLClient.CreateRollupBlockTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.CreateRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.CreateRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send CreateRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendCreateRollupTx
 * @param {GraphQLClient.CreateRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.CreateTokenTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.CreateTokenTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send CreateTokenTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendCreateTokenTx
 * @param {GraphQLClient.CreateTokenTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.DeclareTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.DeclareTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send DeclareTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendDeclareTx
 * @param {GraphQLClient.DeclareTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.DelegateTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.DelegateTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send DelegateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendDelegateTx
 * @param {GraphQLClient.DelegateTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.DepositTokenV2TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.DepositTokenV2Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send DepositTokenV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendDepositTokenV2Tx
 * @param {GraphQLClient.DepositTokenV2TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.ExchangeTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.ExchangeTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send ExchangeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendExchangeTx
 * @param {GraphQLClient.ExchangeTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.ExchangeV2TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.ExchangeV2Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send ExchangeV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendExchangeV2Tx
 * @param {GraphQLClient.ExchangeV2TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.JoinRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.JoinRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send JoinRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendJoinRollupTx
 * @param {GraphQLClient.JoinRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.LeaveRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.LeaveRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send LeaveRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendLeaveRollupTx
 * @param {GraphQLClient.LeaveRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.MigrateRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.MigrateRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send MigrateRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendMigrateRollupTx
 * @param {GraphQLClient.MigrateRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.MintAssetTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.MintAssetTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send MintAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendMintAssetTx
 * @param {GraphQLClient.MintAssetTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.PauseRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.PauseRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send PauseRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendPauseRollupTx
 * @param {GraphQLClient.PauseRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.ResumeRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.ResumeRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send ResumeRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendResumeRollupTx
 * @param {GraphQLClient.ResumeRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.RevokeDelegateTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.RevokeDelegateTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send RevokeDelegateTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendRevokeDelegateTx
 * @param {GraphQLClient.RevokeDelegateTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.RevokeStakeTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.RevokeStakeTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send RevokeStakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendRevokeStakeTx
 * @param {GraphQLClient.RevokeStakeTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.SlashStakeTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.SlashStakeTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send SlashStakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendSlashStakeTx
 * @param {GraphQLClient.SlashStakeTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.StakeTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.StakeTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send StakeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendStakeTx
 * @param {GraphQLClient.StakeTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.TransferTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.TransferTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send TransferTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendTransferTx
 * @param {GraphQLClient.TransferTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.TransferV2TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.TransferV2Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send TransferV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendTransferV2Tx
 * @param {GraphQLClient.TransferV2TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.TransferV3TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.TransferV3Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send TransferV3Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendTransferV3Tx
 * @param {GraphQLClient.TransferV3TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.UpdateAssetTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.UpdateAssetTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send UpdateAssetTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendUpdateAssetTx
 * @param {GraphQLClient.UpdateAssetTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.UpdateRollupTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.UpdateRollupTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send UpdateRollupTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendUpdateRollupTx
 * @param {GraphQLClient.UpdateRollupTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.UpgradeNodeTxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.UpgradeNodeTx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send UpgradeNodeTx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendUpgradeNodeTx
 * @param {GraphQLClient.UpgradeNodeTxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * @memberof GraphQLClient
 * @typedef {Object} GraphQLClient.WithdrawTokenV2TxInput
 * @prop {object} input
 * @prop {object} input.tx - data of the transaction
 * @prop {GraphQLClient.WithdrawTokenV2Tx} input.tx.itx - the actual transaction object
 * @prop {string} [input.tx.pk] - the sender pk
 * @prop {string} [input.tx.from] - the sender address, can be derived from wallet
 * @prop {number} [input.tx.nonce] - the tx nonce, defaults to Date.now if not set
 * @prop {string} [input.tx.chainId] - the chainId
 * @prop {string} [input.tx.signature] - transaction signature
 * @prop {array} [input.tx.signatures] - transaction signatures, should be set when it's a multisig transaction
 * @prop {object} input.wallet - the wallet used to sign the transaction, either a forge managed wallet or user managed wallet
 * @prop {string} [input.signature] - the signature of the tx, if this parameter exist, we will not sign the transaction
 */

/**
 * Send WithdrawTokenV2Tx transaction and get the hash, use {@link GraphQLClient#getTx} to get transaction detail
 *
 * @memberof GraphQLClient
 * @function
 * @name GraphQLClient#sendWithdrawTokenV2Tx
 * @param {GraphQLClient.WithdrawTokenV2TxInput} params
 * @param {object} extra
 * @returns {Promise<string>} returns transaction hash if success, otherwise error was thrown
 */

/**
 * Encode a AccountMigrateTx transaction for later use
 *
 * @name GraphQLClient#encodeAccountMigrateTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.AccountMigrateTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a AcquireAssetV2Tx transaction for later use
 *
 * @name GraphQLClient#encodeAcquireAssetV2Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.AcquireAssetV2TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a AcquireAssetV3Tx transaction for later use
 *
 * @name GraphQLClient#encodeAcquireAssetV3Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.AcquireAssetV3TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a ClaimBlockRewardTx transaction for later use
 *
 * @name GraphQLClient#encodeClaimBlockRewardTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.ClaimBlockRewardTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a ClaimStakeTx transaction for later use
 *
 * @name GraphQLClient#encodeClaimStakeTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.ClaimStakeTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a CloseRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeCloseRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.CloseRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a CreateAssetTx transaction for later use
 *
 * @name GraphQLClient#encodeCreateAssetTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.CreateAssetTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a CreateFactoryTx transaction for later use
 *
 * @name GraphQLClient#encodeCreateFactoryTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.CreateFactoryTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a CreateRollupBlockTx transaction for later use
 *
 * @name GraphQLClient#encodeCreateRollupBlockTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.CreateRollupBlockTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a CreateRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeCreateRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.CreateRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a CreateTokenTx transaction for later use
 *
 * @name GraphQLClient#encodeCreateTokenTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.CreateTokenTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a DeclareTx transaction for later use
 *
 * @name GraphQLClient#encodeDeclareTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.DeclareTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a DelegateTx transaction for later use
 *
 * @name GraphQLClient#encodeDelegateTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.DelegateTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a DepositTokenV2Tx transaction for later use
 *
 * @name GraphQLClient#encodeDepositTokenV2Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.DepositTokenV2TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a ExchangeTx transaction for later use
 *
 * @name GraphQLClient#encodeExchangeTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.ExchangeTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a ExchangeV2Tx transaction for later use
 *
 * @name GraphQLClient#encodeExchangeV2Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.ExchangeV2TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a JoinRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeJoinRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.JoinRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a LeaveRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeLeaveRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.LeaveRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a MigrateRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeMigrateRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.MigrateRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a MintAssetTx transaction for later use
 *
 * @name GraphQLClient#encodeMintAssetTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.MintAssetTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a PauseRollupTx transaction for later use
 *
 * @name GraphQLClient#encodePauseRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.PauseRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a ResumeRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeResumeRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.ResumeRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a RevokeDelegateTx transaction for later use
 *
 * @name GraphQLClient#encodeRevokeDelegateTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.RevokeDelegateTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a RevokeStakeTx transaction for later use
 *
 * @name GraphQLClient#encodeRevokeStakeTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.RevokeStakeTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a SlashStakeTx transaction for later use
 *
 * @name GraphQLClient#encodeSlashStakeTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.SlashStakeTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a StakeTx transaction for later use
 *
 * @name GraphQLClient#encodeStakeTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.StakeTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a TransferTx transaction for later use
 *
 * @name GraphQLClient#encodeTransferTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.TransferTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a TransferV2Tx transaction for later use
 *
 * @name GraphQLClient#encodeTransferV2Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.TransferV2TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a TransferV3Tx transaction for later use
 *
 * @name GraphQLClient#encodeTransferV3Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.TransferV3TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a UpdateAssetTx transaction for later use
 *
 * @name GraphQLClient#encodeUpdateAssetTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.UpdateAssetTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a UpdateRollupTx transaction for later use
 *
 * @name GraphQLClient#encodeUpdateRollupTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.UpdateRollupTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a UpgradeNodeTx transaction for later use
 *
 * @name GraphQLClient#encodeUpgradeNodeTx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.UpgradeNodeTxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * Encode a WithdrawTokenV2Tx transaction for later use
 *
 * @name GraphQLClient#encodeWithdrawTokenV2Tx
 * @function
 * @memberof GraphQLClient
 * @param {GraphQLClient.WithdrawTokenV2TxInput} params
 * @returns {Promise<GraphQLClient.TxEncodeOutput>} result - we provide two formats of the encoding result, binary presentation and human readable object
 */

/**
 * getAccountState
 *
 * @name GraphQLClient#getAccountState
 * @param {GraphQLClient.GetAccountStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetAccountState>} Checkout {@link GraphQLClient.ResponseGetAccountState} for resolved data format
 */

/**
 * getAssetState
 *
 * @name GraphQLClient#getAssetState
 * @param {GraphQLClient.GetAssetStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetAssetState>} Checkout {@link GraphQLClient.ResponseGetAssetState} for resolved data format
 */

/**
 * getFactoryState
 *
 * @name GraphQLClient#getFactoryState
 * @param {GraphQLClient.GetFactoryStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetFactoryState>} Checkout {@link GraphQLClient.ResponseGetFactoryState} for resolved data format
 */

/**
 * getDelegateState
 *
 * @name GraphQLClient#getDelegateState
 * @param {GraphQLClient.GetDelegateStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetDelegateState>} Checkout {@link GraphQLClient.ResponseGetDelegateState} for resolved data format
 */

/**
 * getTokenState
 *
 * @name GraphQLClient#getTokenState
 * @param {GraphQLClient.GetTokenStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetTokenState>} Checkout {@link GraphQLClient.ResponseGetTokenState} for resolved data format
 */

/**
 * getEvidenceState
 *
 * @name GraphQLClient#getEvidenceState
 * @param {GraphQLClient.GetEvidenceStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetEvidenceState>} Checkout {@link GraphQLClient.ResponseGetEvidenceState} for resolved data format
 */

/**
 * getForgeState
 *
 * @name GraphQLClient#getForgeState
 * @param {GraphQLClient.GetForgeStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetForgeState>} Checkout {@link GraphQLClient.ResponseGetForgeState} for resolved data format
 */

/**
 * getTx
 *
 * @name GraphQLClient#getTx
 * @param {GraphQLClient.GetTxParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetTx>} Checkout {@link GraphQLClient.ResponseGetTx} for resolved data format
 */

/**
 * getBlock
 *
 * @name GraphQLClient#getBlock
 * @param {GraphQLClient.GetBlockParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetBlock>} Checkout {@link GraphQLClient.ResponseGetBlock} for resolved data format
 */

/**
 * getBlocks
 *
 * @name GraphQLClient#getBlocks
 * @param {GraphQLClient.GetBlocksParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetBlocks>} Checkout {@link GraphQLClient.ResponseGetBlocks} for resolved data format
 */

/**
 * getUnconfirmedTxs
 *
 * @name GraphQLClient#getUnconfirmedTxs
 * @param {GraphQLClient.GetUnconfirmedTxsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetUnconfirmedTxs>} Checkout {@link GraphQLClient.ResponseGetUnconfirmedTxs} for resolved data format
 */

/**
 * getChainInfo
 *
 * @name GraphQLClient#getChainInfo
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetChainInfo>} Checkout {@link GraphQLClient.ResponseGetChainInfo} for resolved data format
 */

/**
 * getConfig
 *
 * @name GraphQLClient#getConfig
 * @param {GraphQLClient.GetConfigParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetConfig>} Checkout {@link GraphQLClient.ResponseGetConfig} for resolved data format
 */

/**
 * getNetInfo
 *
 * @name GraphQLClient#getNetInfo
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetNetInfo>} Checkout {@link GraphQLClient.ResponseGetNetInfo} for resolved data format
 */

/**
 * getNodeInfo
 *
 * @name GraphQLClient#getNodeInfo
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetNodeInfo>} Checkout {@link GraphQLClient.ResponseGetNodeInfo} for resolved data format
 */

/**
 * getValidatorsInfo
 *
 * @name GraphQLClient#getValidatorsInfo
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetValidatorsInfo>} Checkout {@link GraphQLClient.ResponseGetValidatorsInfo} for resolved data format
 */

/**
 * getForgeStats
 *
 * @name GraphQLClient#getForgeStats
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetForgeStats>} Checkout {@link GraphQLClient.ResponseGetForgeStats} for resolved data format
 */

/**
 * listAssetTransactions
 *
 * @name GraphQLClient#listAssetTransactions
 * @param {GraphQLClient.ListAssetTransactionsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListAssetTransactions>} Checkout {@link GraphQLClient.ResponseListAssetTransactions} for resolved data format
 */

/**
 * listAssets
 *
 * @name GraphQLClient#listAssets
 * @param {GraphQLClient.ListAssetsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListAssets>} Checkout {@link GraphQLClient.ResponseListAssets} for resolved data format
 */

/**
 * listBlocks
 *
 * @name GraphQLClient#listBlocks
 * @param {GraphQLClient.ListBlocksParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListBlocks>} Checkout {@link GraphQLClient.ResponseListBlocks} for resolved data format
 */

/**
 * listTopAccounts
 *
 * @name GraphQLClient#listTopAccounts
 * @param {GraphQLClient.ListTopAccountsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListTopAccounts>} Checkout {@link GraphQLClient.ResponseListTopAccounts} for resolved data format
 */

/**
 * listTransactions
 *
 * @name GraphQLClient#listTransactions
 * @param {GraphQLClient.ListTransactionsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListTransactions>} Checkout {@link GraphQLClient.ResponseListTransactions} for resolved data format
 */

/**
 * listTokens
 *
 * @name GraphQLClient#listTokens
 * @param {GraphQLClient.ListTokensParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListTokens>} Checkout {@link GraphQLClient.ResponseListTokens} for resolved data format
 */

/**
 * listFactories
 *
 * @name GraphQLClient#listFactories
 * @param {GraphQLClient.ListFactoriesParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListFactories>} Checkout {@link GraphQLClient.ResponseListFactories} for resolved data format
 */

/**
 * getAccountTokens
 *
 * @name GraphQLClient#getAccountTokens
 * @param {GraphQLClient.GetAccountTokensParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetAccountTokens>} Checkout {@link GraphQLClient.ResponseGetAccountTokens} for resolved data format
 */

/**
 * getStakeState
 *
 * @name GraphQLClient#getStakeState
 * @param {GraphQLClient.GetStakeStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetStakeState>} Checkout {@link GraphQLClient.ResponseGetStakeState} for resolved data format
 */

/**
 * listStakes
 *
 * @name GraphQLClient#listStakes
 * @param {GraphQLClient.ListStakesParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListStakes>} Checkout {@link GraphQLClient.ResponseListStakes} for resolved data format
 */

/**
 * getRollupState
 *
 * @name GraphQLClient#getRollupState
 * @param {GraphQLClient.GetRollupStateParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetRollupState>} Checkout {@link GraphQLClient.ResponseGetRollupState} for resolved data format
 */

/**
 * listRollups
 *
 * @name GraphQLClient#listRollups
 * @param {GraphQLClient.ListRollupsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListRollups>} Checkout {@link GraphQLClient.ResponseListRollups} for resolved data format
 */

/**
 * getRollupBlock
 *
 * @name GraphQLClient#getRollupBlock
 * @param {GraphQLClient.GetRollupBlockParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseGetRollupBlock>} Checkout {@link GraphQLClient.ResponseGetRollupBlock} for resolved data format
 */

/**
 * listRollupBlocks
 *
 * @name GraphQLClient#listRollupBlocks
 * @param {GraphQLClient.ListRollupBlocksParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListRollupBlocks>} Checkout {@link GraphQLClient.ResponseListRollupBlocks} for resolved data format
 */

/**
 * listRollupValidators
 *
 * @name GraphQLClient#listRollupValidators
 * @param {GraphQLClient.ListRollupValidatorsParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseListRollupValidators>} Checkout {@link GraphQLClient.ResponseListRollupValidators} for resolved data format
 */

/**
 * search
 *
 * @name GraphQLClient#search
 * @param {GraphQLClient.SearchParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseSearch>} Checkout {@link GraphQLClient.ResponseSearch} for resolved data format
 */

/**
 * estimateGas
 *
 * @name GraphQLClient#estimateGas
 * @param {GraphQLClient.EstimateGasParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseEstimateGas>} Checkout {@link GraphQLClient.ResponseEstimateGas} for resolved data format
 */

/**
 * sendTx
 *
 * @name GraphQLClient#sendTx
 * @param {GraphQLClient.SendTxParams} params
 * @function
 * @memberof GraphQLClient
 * @returns {Promise<GraphQLClient.ResponseSendTx>} Checkout {@link GraphQLClient.ResponseSendTx} for resolved data format
 */
//# sourceMappingURL=types.js.map