{"version":3,"sources":["../src/methods.js"],"names":[],"mappings":"AAAA;;AAEA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;AASA;;;;;;;;;;AAUA;;;;;;;;;;AAUA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;AAeA;;;;;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;;;AAeA","file":"methods.js","sourcesContent":["// This file is generated automatically, do not edit\n\n/**\n * Format big number presentation amount to token number\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#fromUnitToToken\n * @param {string} value\n * @returns {string}\n */\n\n/**\n * Encode amount to corresponding token big number presentation\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#fromTokenToUnit\n * @param {number} amount\n * @returns {BN}\n */\n\n/**\n * List all transaction send methods\n * Each method can send one kind of transactions supported by forge core, such as `DeclareTx`, `PokeTx`\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#getTxSendMethods\n * @returns {Array<string>} method name list\n */\n\n/**\n * List all transaction encode methods, each method can be used to encode transaction to buffer and object\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#getTxEncodeMethods\n * @returns {Array<string>} method name list\n */\n\n/**\n * List all transaction sign methods, each method can be used to sign transaction to an object\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#getTxSignMethods\n * @returns {Array<string>} method name list\n */\n\n/**\n * List all transaction multi sign methods, each method can be used to do multi sign a transaction\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#getTxMultiSignMethods\n * @returns {Array<string>} method name list\n */\n\n/**\n * Get protobuf message class by name, only supports forge-built-in types\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#getType\n * @param {string} x\n * @returns {class|null} message type\n */\n\n/**\n * Decode transaction buffer/base64/base58 to an object\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#decodeTx\n * @param {buffer|hex|base48|base64} input\n * @returns {object} transaction object\n */\n\n/**\n * Declare an DID and it's public key on chain\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#declare\n * @param {object} params\n * @param {string} params.moniker - user nickname\n * @param {string} [params.issuer=\"\"] - who issued the account\n * @param {object} [params.data=undefined] - who issued the account\n * @param {WalletObject} params.wallet - wallet to sign the tx\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the transaction hash once resolved\n */\n\n/**\n * Migrate current account to a new account\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#migrateAccount\n * @param {object} params\n * @param {WalletObject} params.from - which account to migrate from\n * @param {WalletObject} params.to - which account to migrate to\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the transaction hash once resolved\n */\n\n/**\n * Delegate some privileges to another account\n * So that that account can send transactions on behalf of the delegator\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#delegate\n * @param {object} params\n * @param {WalletObject} params.from - the delegator, who grants the privilege to others\n * @param {WalletObject} params.to - the delegatee, who is authorized to send transactions\n * @param {Array} params.privileges - the privilege settings\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `[transactionHash, delegateAddress]` once resolved\n */\n\n/**\n * Revoke a previous delegation\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#revokeDelegate\n * @param {object} params\n * @param {WalletObject} params.from - the delegator, who grants the privilege to others\n * @param {WalletObject} params.to - the delegatee, who is authorized to send transactions\n * @param {Array} params.privileges - the privilege settings\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the transaction hash once resolved\n */\n\n/**\n * Create an new asset (non-fungible-token)\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#createAsset\n * @param {object} params\n * @param {string} params.moniker - asset name\n * @param {string} params.parent - asset parent\n * @param {object} params.data - asset data payload\n * @param {number} params.ttl - ttl after first consumption\n * @param {boolean} params.readonly - whether the asset can be updated after creation\n * @param {boolean} params.transferrable - whether the asset can be transferred to another account\n * @param {string} params.delegator - who authorized this transaction\n * @param {WalletObject} params.wallet - the initial owner of the asset\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `[transactionHash, assetAddress]` once resolved\n */\n\n/**\n * Update an existing asset (non-fungible-token)\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#updateAsset\n * @param {object} params\n * @param {string} params.address - asset address\n * @param {string} params.moniker - asset name\n * @param {object} params.data - asset data payload\n * @param {string} params.delegator - who authorized this transaction\n * @param {WalletObject} params.wallet - the wallet to sign the transaction\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `transactionHash` once resolved\n */\n\n/**\n * Create an asset factory that can be used to produce multiple assets in a transaction\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#createAssetFactory\n * @param {object} params\n * @param {string} params.moniker - asset name\n * @param {object} params.factory - asset factory attributes\n * @param {string} params.factory.description - asset factory name\n * @param {number} params.factory.limit - how many assets can be generated from this factory\n * @param {price} params.factory.price - how much should charge user when acquire asset\n * @param {string} params.factory.template - mustache compatible\n * @param {Array} params.factory.templateVariables - list of allowed template variables\n * @param {string} params.factory.assetName - protobuf type known to forge that can be used to create this asset\n * @param {string} params.factory.attributes - attributes for assets that are generated from this factory\n * @param {boolean} params.readonly - whether the asset can be updated after creation\n * @param {boolean} params.transferrable - whether the asset can be transferred to another account\n * @param {string} params.delegator - who authorized this transaction\n * @param {WalletObject} params.wallet - the initial owner of the asset\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `[transactionHash, factoryAddress]` once resolved\n */\n\n/**\n * Acquire an asset from factory\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#acquireAsset\n * @param {object} params\n * @param {string} params.assetFactory - Asset factory address\n * @param {Array} params.assetVariables - list of asset variables that can be populated into asset factory template\n * @param {boolean} params.readonly - whether the asset can be updated after creation, should match factory settings\n * @param {boolean} params.transferrable - whether the asset can be transferred to another account, should match factory settings\n * @param {number} params.ttl - asset expire\n * @param {string} params.delegator - who authorized this transaction\n * @param {WalletObject} params.wallet - the initial owner of the asset\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `[transactionHash, [assetAddress]]` once resolved\n */\n\n/**\n * Transfer token or assets to another account\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#transfer\n * @param {object} params\n * @param {number} params.token - how much token can be transferred\n * @param {Array} params.assets - which assets should be transferred\n * @param {string} params.to - who receive the transfer\n * @param {string} params.memo - transaction note\n * @param {string} params.delegator - who authorized this transaction\n * @param {WalletObject} params.wallet - the wallet to sign the transaction\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `transactionHash` once resolved\n */\n\n/**\n * Prepare an exchange transaction between multiple accounts\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#prepareExchange\n * @param {object} params\n * @param {number} params.offerToken - how much token can be sent\n * @param {Array} params.offerAssets - which assets should be sent\n * @param {number} params.demandToken - how much token can be received\n * @param {Array} params.demandAssets - which assets should be received\n * @param {string} params.receiver - who receive the transfer\n * @param {string} params.memo - transaction note\n * @param {string} params.delegator - which assets should be transferred\n * @param {WalletObject} params.wallet - the wallet who is the offerer\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `transaction` object once resolved\n */\n\n/**\n * Finalize an exchange transaction between multiple accounts\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#finalizeExchange\n * @param {object} params\n * @param {object} params.tx - the transaction object from `prepareExchange`\n * @param {string} params.delegator - who authorized this transaction\n * @param {object} params.data - extra data in the multi sig\n * @param {WalletObject} params.wallet - the wallet who is the demander\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `transaction` object once resolved\n */\n\n/**\n * Send an exchange transaction\n *\n * @memberof GraphQLClient\n * @function\n * @name GraphQLClient#exchange\n * @param {object} params\n * @param {object} params.tx - the transaction object from `finalizeExchange`\n * @param {WalletObject} params.wallet - the wallet to sign the transaction\n * @param {object} extra - other param to underlying client implementation\n * @returns {Promise} the `transactionHash` once resolved\n */\n"]}