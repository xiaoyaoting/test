import type { LiteralUnion, PartialDeep } from 'type-fest';
import type { WalletObject } from '@ocap/wallet';
import type { TAssetFactoryState, TCreateAssetTx } from '@ocap/types';
declare type $TSFixMe = any;
export declare type TPickedFactoryState = PartialDeep<TAssetFactoryState>;
export declare type TIssuer = {
    name: string;
    wallet: WalletObject;
};
export declare type TIssuerInput = {
    id: string;
    pk: string;
    name: string;
};
export declare type THook = {
    type: LiteralUnion<'contract' | 'url', string>;
    name: LiteralUnion<'mint' | 'postMint' | 'preMint', string>;
    hook: string;
};
export declare type TInputMap = {
    [key: string]: string;
};
export declare type TMintResult = {
    address: string;
    asset: TCreateAssetTx;
};
export declare type TPreMintResult = TMintResult & {
    variables: TInputMap;
    issuer: TIssuerInput;
};
export declare const isValidNotation: (notation: string) => boolean;
export declare const isValidHook: (hook: THook, quota?: $TSFixMe, throwOnError?: boolean) => boolean;
export declare const isValidFactory: (props: any) => boolean;
/**
 * Find credentialSubject path in the object
 * Because they need prerender
 *
 * @param {object} obj
 * @param {string} keyword
 * @return {string} list of keys
 */
export declare const findPrerenderKeys: (obj: $TSFixMe, keyword: string) => string[];
/**
 * Mint from an asset factory, used on server side
 *
 * @param {object} params { factory, inputs, issuer }
 * @param {object} params.factory factory object
 * @param {object} params.inputs factory input variables
 * @param {string} params.owner owner did for the new asset
 * @param {object} params.issuer issuer object
 */
export declare const mintFromFactory: ({ factory, inputs, owner, issuer, }: {
    factory: TPickedFactoryState;
    inputs: TInputMap;
    owner: string;
    issuer: TIssuerInput;
}) => TMintResult;
/**
 * Simulate minting from an asset factory, used for client side
 *
 * @param {object} params { factory, inputs, issuer }
 * @param {object} params.factory factory object
 * @param {object} params.inputs factory input variables
 * @param {string} params.owner owner did for the new asset
 * @param {object} params.issuer factory issuer wallet and name
 */
export declare const preMintFromFactory: ({ factory, inputs, owner, issuer, }: {
    factory?: TPickedFactoryState;
    inputs: TInputMap;
    owner?: string;
    issuer?: TIssuer;
}) => TPreMintResult;
export declare const formatFactoryState: (state: TAssetFactoryState) => TPickedFactoryState;
export {};
