"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AesCrypter = void 0;
// For browsers, may need: https://www.npmjs.com/package/crypto-browserify
const crypto_1 = __importDefault(require("crypto"));
const util_1 = require("@ocap/util");
const crypter_1 = __importDefault(require("../protocols/crypter"));
const sha3_1 = __importDefault(require("../hasher/sha3"));
const encode_1 = require("../encode");
// AES-ECB-256
class AesCrypter extends crypter_1.default {
    encrypt(message, secret, encoding = 'hex') {
        const key = sha3_1.default.hash256(secret, 1, 'buffer');
        const cipher = crypto_1.default.createCipheriv('aes-256-ecb', key, '');
        cipher.setAutoPadding(true);
        const output = cipher.update((0, util_1.toBuffer)(message));
        return (0, encode_1.encode)(Buffer.concat([output, cipher.final()]), encoding);
    }
    decrypt(message, secret, encoding = 'hex') {
        const key = sha3_1.default.hash256(secret, 1, 'buffer');
        const decipher = crypto_1.default.createDecipheriv('aes-256-ecb', key, '');
        decipher.setAutoPadding(true);
        const output = decipher.update((0, util_1.toBuffer)(message));
        return (0, encode_1.encode)(Buffer.concat([output, decipher.final()]), encoding);
    }
}
exports.AesCrypter = AesCrypter;
exports.default = new AesCrypter();
