"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RSABrowserCrypter = void 0;
// https://stackoverflow.com/questions/70056340/how-can-i-generate-an-rsa-pair-that-works-both-in-node-js-and-browser
// https://stackoverflow.com/questions/62948516/using-native-javascript-subtlecrypto-to-encrypt-using-rsa
const util_1 = require("@ocap/util");
const crypto = window.crypto.subtle;
// @ts-ignore
const ab2str = (buffer) => String.fromCharCode.apply(null, new Uint8Array(buffer));
const RSA_ALGORITHM = 'RSA-OAEP';
// RSA-OAEP
class RSABrowserCrypter {
    genKeyPair(length = 2048) {
        return __awaiter(this, void 0, void 0, function* () {
            return crypto.generateKey({
                name: RSA_ALGORITHM,
                modulusLength: length,
                publicExponent: new Uint8Array([1, 0, 1]),
                hash: 'SHA-256',
            }, true, ['encrypt', 'decrypt']);
        });
    }
    formatPublicKey(key) {
        return __awaiter(this, void 0, void 0, function* () {
            const exported = yield crypto.exportKey('spki', key);
            const base64 = window.btoa(ab2str(exported));
            return `-----BEGIN PUBLIC KEY-----\n${base64}\n-----END PUBLIC KEY-----`;
        });
    }
    encrypt(message, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const encrypted = yield crypto.encrypt({ name: RSA_ALGORITHM }, key, new TextEncoder().encode(message));
            return (0, util_1.toBase58)(new Uint8Array(encrypted));
        });
    }
    decrypt(message, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const decrypted = yield crypto.decrypt({ name: RSA_ALGORITHM }, key, (0, util_1.fromBase58)(message));
            return Buffer.from(new Uint8Array(decrypted)).toString('utf8');
        });
    }
}
exports.RSABrowserCrypter = RSABrowserCrypter;
exports.default = new RSABrowserCrypter();
