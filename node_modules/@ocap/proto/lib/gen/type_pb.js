// source: type.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var root = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof root !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return (typeof self === 'object' && self.self === self && self) || (typeof global === 'object' && global.global === global && global) || this;
}.call(null));

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var vendor_pb = require('./vendor_pb.js');
goog.object.extend(proto, vendor_pb);
var enum_pb = require('./enum_pb.js');
goog.object.extend(proto, enum_pb);
goog.exportSymbol('proto.ocap.AccountConfig', null, root);
goog.exportSymbol('proto.ocap.AssetFactoryHook', null, root);
goog.exportSymbol('proto.ocap.BigSint', null, root);
goog.exportSymbol('proto.ocap.BigUint', null, root);
goog.exportSymbol('proto.ocap.BlockInfo', null, root);
goog.exportSymbol('proto.ocap.BlockInfoSimple', null, root);
goog.exportSymbol('proto.ocap.ChainInfo', null, root);
goog.exportSymbol('proto.ocap.ConsensusParams', null, root);
goog.exportSymbol('proto.ocap.DelegateConfig', null, root);
goog.exportSymbol('proto.ocap.Evidence', null, root);
goog.exportSymbol('proto.ocap.ForeignToken', null, root);
goog.exportSymbol('proto.ocap.ForgeStats', null, root);
goog.exportSymbol('proto.ocap.ForgeToken', null, root);
goog.exportSymbol('proto.ocap.GasEstimate', null, root);
goog.exportSymbol('proto.ocap.GeoInfo', null, root);
goog.exportSymbol('proto.ocap.IndexedFactoryInput', null, root);
goog.exportSymbol('proto.ocap.IndexedTokenInput', null, root);
goog.exportSymbol('proto.ocap.Multisig', null, root);
goog.exportSymbol('proto.ocap.NFTDisplay', null, root);
goog.exportSymbol('proto.ocap.NFTEndpoint', null, root);
goog.exportSymbol('proto.ocap.NFTIssuer', null, root);
goog.exportSymbol('proto.ocap.NetInfo', null, root);
goog.exportSymbol('proto.ocap.NodeInfo', null, root);
goog.exportSymbol('proto.ocap.PeerInfo', null, root);
goog.exportSymbol('proto.ocap.ReceiptChange', null, root);
goog.exportSymbol('proto.ocap.RevokedStake', null, root);
goog.exportSymbol('proto.ocap.RollupSignature', null, root);
goog.exportSymbol('proto.ocap.RollupValidator', null, root);
goog.exportSymbol('proto.ocap.StakeSummary', null, root);
goog.exportSymbol('proto.ocap.StateContext', null, root);
goog.exportSymbol('proto.ocap.TokenInput', null, root);
goog.exportSymbol('proto.ocap.TokenSymbol', null, root);
goog.exportSymbol('proto.ocap.Transaction', null, root);
goog.exportSymbol('proto.ocap.TransactionConfig', null, root);
goog.exportSymbol('proto.ocap.TransactionInfo', null, root);
goog.exportSymbol('proto.ocap.TransactionInput', null, root);
goog.exportSymbol('proto.ocap.TransactionReceipt', null, root);
goog.exportSymbol('proto.ocap.TxFeeConfig', null, root);
goog.exportSymbol('proto.ocap.TxGasConfig', null, root);
goog.exportSymbol('proto.ocap.UnconfirmedTxs', null, root);
goog.exportSymbol('proto.ocap.UpgradeInfo', null, root);
goog.exportSymbol('proto.ocap.UpgradeTask', null, root);
goog.exportSymbol('proto.ocap.UpgradeTasks', null, root);
goog.exportSymbol('proto.ocap.Validator', null, root);
goog.exportSymbol('proto.ocap.ValidatorInfo', null, root);
goog.exportSymbol('proto.ocap.ValidatorsInfo', null, root);
goog.exportSymbol('proto.ocap.VariableInput', null, root);
goog.exportSymbol('proto.ocap.VaultConfig', null, root);
goog.exportSymbol('proto.ocap.WalletInfo', null, root);
goog.exportSymbol('proto.ocap.WalletType', null, root);
goog.exportSymbol('proto.ocap.WithdrawItem', null, root);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.BigUint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.BigUint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.BigUint.displayName = 'proto.ocap.BigUint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.BigSint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.BigSint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.BigSint.displayName = 'proto.ocap.BigSint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TokenSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.TokenSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TokenSymbol.displayName = 'proto.ocap.TokenSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.WalletType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.WalletType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.WalletType.displayName = 'proto.ocap.WalletType';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.WalletInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.WalletInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.WalletInfo.displayName = 'proto.ocap.WalletInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ChainInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.ChainInfo.repeatedFields_, null);
};
goog.inherits(proto.ocap.ChainInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ChainInfo.displayName = 'proto.ocap.ChainInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.NodeInfo.repeatedFields_, null);
};
goog.inherits(proto.ocap.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.NodeInfo.displayName = 'proto.ocap.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.Validator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.Validator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.Validator.displayName = 'proto.ocap.Validator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ConsensusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.ConsensusParams.repeatedFields_, null);
};
goog.inherits(proto.ocap.ConsensusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ConsensusParams.displayName = 'proto.ocap.ConsensusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.UpgradeTask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.UpgradeTask.repeatedFields_, null);
};
goog.inherits(proto.ocap.UpgradeTask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.UpgradeTask.displayName = 'proto.ocap.UpgradeTask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.UpgradeTasks = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.UpgradeTasks.repeatedFields_, null);
};
goog.inherits(proto.ocap.UpgradeTasks, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.UpgradeTasks.displayName = 'proto.ocap.UpgradeTasks';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.Multisig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.Multisig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.Multisig.displayName = 'proto.ocap.Multisig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.Transaction.repeatedFields_, null);
};
goog.inherits(proto.ocap.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.Transaction.displayName = 'proto.ocap.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TransactionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.TransactionInfo.repeatedFields_, null);
};
goog.inherits(proto.ocap.TransactionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TransactionInfo.displayName = 'proto.ocap.TransactionInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TransactionReceipt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.TransactionReceipt.repeatedFields_, null);
};
goog.inherits(proto.ocap.TransactionReceipt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TransactionReceipt.displayName = 'proto.ocap.TransactionReceipt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ReceiptChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.ReceiptChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ReceiptChange.displayName = 'proto.ocap.ReceiptChange';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TokenInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.TokenInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TokenInput.displayName = 'proto.ocap.TokenInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TransactionInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.TransactionInput.repeatedFields_, null);
};
goog.inherits(proto.ocap.TransactionInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TransactionInput.displayName = 'proto.ocap.TransactionInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.VariableInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.VariableInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.VariableInput.displayName = 'proto.ocap.VariableInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.DelegateConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.DelegateConfig.repeatedFields_, null);
};
goog.inherits(proto.ocap.DelegateConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.DelegateConfig.displayName = 'proto.ocap.DelegateConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.VaultConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.VaultConfig.repeatedFields_, null);
};
goog.inherits(proto.ocap.VaultConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.VaultConfig.displayName = 'proto.ocap.VaultConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TxFeeConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.TxFeeConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TxFeeConfig.displayName = 'proto.ocap.TxFeeConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TxGasConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.TxGasConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TxGasConfig.displayName = 'proto.ocap.TxGasConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.TransactionConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.TransactionConfig.repeatedFields_, null);
};
goog.inherits(proto.ocap.TransactionConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.TransactionConfig.displayName = 'proto.ocap.TransactionConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.BlockInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.BlockInfo.repeatedFields_, null);
};
goog.inherits(proto.ocap.BlockInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.BlockInfo.displayName = 'proto.ocap.BlockInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.BlockInfoSimple = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.BlockInfoSimple.repeatedFields_, null);
};
goog.inherits(proto.ocap.BlockInfoSimple, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.BlockInfoSimple.displayName = 'proto.ocap.BlockInfoSimple';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.StateContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.StateContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.StateContext.displayName = 'proto.ocap.StateContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.StakeSummary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.StakeSummary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.StakeSummary.displayName = 'proto.ocap.StakeSummary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.UnconfirmedTxs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.UnconfirmedTxs.repeatedFields_, null);
};
goog.inherits(proto.ocap.UnconfirmedTxs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.UnconfirmedTxs.displayName = 'proto.ocap.UnconfirmedTxs';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.NetInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.NetInfo.repeatedFields_, null);
};
goog.inherits(proto.ocap.NetInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.NetInfo.displayName = 'proto.ocap.NetInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.GeoInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.GeoInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.GeoInfo.displayName = 'proto.ocap.GeoInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.PeerInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.PeerInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.PeerInfo.displayName = 'proto.ocap.PeerInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ValidatorsInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.ValidatorsInfo.repeatedFields_, null);
};
goog.inherits(proto.ocap.ValidatorsInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ValidatorsInfo.displayName = 'proto.ocap.ValidatorsInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ValidatorInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.ValidatorInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ValidatorInfo.displayName = 'proto.ocap.ValidatorInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ForgeToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.ForgeToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ForgeToken.displayName = 'proto.ocap.ForgeToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.UpgradeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.UpgradeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.UpgradeInfo.displayName = 'proto.ocap.UpgradeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.WithdrawItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.WithdrawItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.WithdrawItem.displayName = 'proto.ocap.WithdrawItem';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.AccountConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.AccountConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.AccountConfig.displayName = 'proto.ocap.AccountConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.Evidence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.Evidence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.Evidence.displayName = 'proto.ocap.Evidence';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.NFTEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.NFTEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.NFTEndpoint.displayName = 'proto.ocap.NFTEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.NFTDisplay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.NFTDisplay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.NFTDisplay.displayName = 'proto.ocap.NFTDisplay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.NFTIssuer = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.NFTIssuer, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.NFTIssuer.displayName = 'proto.ocap.NFTIssuer';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.AssetFactoryHook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.AssetFactoryHook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.AssetFactoryHook.displayName = 'proto.ocap.AssetFactoryHook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.IndexedTokenInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.IndexedTokenInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.IndexedTokenInput.displayName = 'proto.ocap.IndexedTokenInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.IndexedFactoryInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.IndexedFactoryInput.repeatedFields_, null);
};
goog.inherits(proto.ocap.IndexedFactoryInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.IndexedFactoryInput.displayName = 'proto.ocap.IndexedFactoryInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.RollupValidator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.RollupValidator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.RollupValidator.displayName = 'proto.ocap.RollupValidator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.RollupSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.RollupSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.RollupSignature.displayName = 'proto.ocap.RollupSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ForeignToken = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.ForeignToken, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ForeignToken.displayName = 'proto.ocap.ForeignToken';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.RevokedStake = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.RevokedStake.repeatedFields_, null);
};
goog.inherits(proto.ocap.RevokedStake, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.RevokedStake.displayName = 'proto.ocap.RevokedStake';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.ForgeStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ocap.ForgeStats.repeatedFields_, null);
};
goog.inherits(proto.ocap.ForgeStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.ForgeStats.displayName = 'proto.ocap.ForgeStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ocap.GasEstimate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ocap.GasEstimate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ocap.GasEstimate.displayName = 'proto.ocap.GasEstimate';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.BigUint.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.BigUint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.BigUint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BigUint.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.BigUint}
 */
proto.ocap.BigUint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.BigUint;
  return proto.ocap.BigUint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.BigUint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.BigUint}
 */
proto.ocap.BigUint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.BigUint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.BigUint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.BigUint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BigUint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BigUint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.ocap.BigUint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.ocap.BigUint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BigUint} returns this
 */
proto.ocap.BigUint.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.BigSint.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.BigSint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.BigSint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BigSint.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue(),
    minus: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.BigSint}
 */
proto.ocap.BigSint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.BigSint;
  return proto.ocap.BigSint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.BigSint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.BigSint}
 */
proto.ocap.BigSint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMinus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.BigSint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.BigSint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.BigSint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BigSint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getMinus();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BigSint.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.ocap.BigSint.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.ocap.BigSint.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BigSint} returns this
 */
proto.ocap.BigSint.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bool minus = 2;
 * @return {boolean}
 */
proto.ocap.BigSint.prototype.getMinus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.BigSint} returns this
 */
proto.ocap.BigSint.prototype.setMinus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TokenSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TokenSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TokenSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TokenSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decimal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TokenSymbol}
 */
proto.ocap.TokenSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TokenSymbol;
  return proto.ocap.TokenSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TokenSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TokenSymbol}
 */
proto.ocap.TokenSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TokenSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TokenSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TokenSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TokenSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.TokenSymbol.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TokenSymbol} returns this
 */
proto.ocap.TokenSymbol.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.ocap.TokenSymbol.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TokenSymbol} returns this
 */
proto.ocap.TokenSymbol.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 decimal = 3;
 * @return {number}
 */
proto.ocap.TokenSymbol.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TokenSymbol} returns this
 */
proto.ocap.TokenSymbol.prototype.setDecimal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string unit = 4;
 * @return {string}
 */
proto.ocap.TokenSymbol.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TokenSymbol} returns this
 */
proto.ocap.TokenSymbol.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.WalletType.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.WalletType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.WalletType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.WalletType.toObject = function(includeInstance, msg) {
  var f, obj = {
    pk: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 2, 0),
    address: jspb.Message.getFieldWithDefault(msg, 3, 0),
    role: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.WalletType}
 */
proto.ocap.WalletType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.WalletType;
  return proto.ocap.WalletType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.WalletType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.WalletType}
 */
proto.ocap.WalletType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ocap.KeyType} */ (reader.readEnum());
      msg.setPk(value);
      break;
    case 2:
      var value = /** @type {!proto.ocap.HashType} */ (reader.readEnum());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {!proto.ocap.EncodingType} */ (reader.readEnum());
      msg.setAddress(value);
      break;
    case 4:
      var value = /** @type {!proto.ocap.RoleType} */ (reader.readEnum());
      msg.setRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.WalletType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.WalletType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.WalletType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.WalletType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getHash();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAddress();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRole();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional KeyType pk = 1;
 * @return {!proto.ocap.KeyType}
 */
proto.ocap.WalletType.prototype.getPk = function() {
  return /** @type {!proto.ocap.KeyType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ocap.KeyType} value
 * @return {!proto.ocap.WalletType} returns this
 */
proto.ocap.WalletType.prototype.setPk = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional HashType hash = 2;
 * @return {!proto.ocap.HashType}
 */
proto.ocap.WalletType.prototype.getHash = function() {
  return /** @type {!proto.ocap.HashType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.ocap.HashType} value
 * @return {!proto.ocap.WalletType} returns this
 */
proto.ocap.WalletType.prototype.setHash = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional EncodingType address = 3;
 * @return {!proto.ocap.EncodingType}
 */
proto.ocap.WalletType.prototype.getAddress = function() {
  return /** @type {!proto.ocap.EncodingType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.ocap.EncodingType} value
 * @return {!proto.ocap.WalletType} returns this
 */
proto.ocap.WalletType.prototype.setAddress = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional RoleType role = 4;
 * @return {!proto.ocap.RoleType}
 */
proto.ocap.WalletType.prototype.getRole = function() {
  return /** @type {!proto.ocap.RoleType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.ocap.RoleType} value
 * @return {!proto.ocap.WalletType} returns this
 */
proto.ocap.WalletType.prototype.setRole = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.WalletInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.WalletInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.WalletInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.WalletInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = msg.getType()) && proto.ocap.WalletType.toObject(includeInstance, f),
    sk: msg.getSk(),
    pk: msg.getPk(),
    address: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.WalletInfo}
 */
proto.ocap.WalletInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.WalletInfo;
  return proto.ocap.WalletInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.WalletInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.WalletInfo}
 */
proto.ocap.WalletInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ocap.WalletType;
      reader.readMessage(value,proto.ocap.WalletType.deserializeBinaryFromReader);
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.WalletInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.WalletInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.WalletInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.WalletInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ocap.WalletType.serializeBinaryToWriter
    );
  }
  f = message.getSk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional WalletType type = 1;
 * @return {?proto.ocap.WalletType}
 */
proto.ocap.WalletInfo.prototype.getType = function() {
  return /** @type{?proto.ocap.WalletType} */ (
    jspb.Message.getWrapperField(this, proto.ocap.WalletType, 1));
};


/**
 * @param {?proto.ocap.WalletType|undefined} value
 * @return {!proto.ocap.WalletInfo} returns this
*/
proto.ocap.WalletInfo.prototype.setType = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.WalletInfo} returns this
 */
proto.ocap.WalletInfo.prototype.clearType = function() {
  return this.setType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.WalletInfo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes sk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.WalletInfo.prototype.getSk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes sk = 2;
 * This is a type-conversion wrapper around `getSk()`
 * @return {string}
 */
proto.ocap.WalletInfo.prototype.getSk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSk()));
};


/**
 * optional bytes sk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSk()`
 * @return {!Uint8Array}
 */
proto.ocap.WalletInfo.prototype.getSk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.WalletInfo} returns this
 */
proto.ocap.WalletInfo.prototype.setSk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes pk = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.WalletInfo.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes pk = 3;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.ocap.WalletInfo.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.ocap.WalletInfo.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.WalletInfo} returns this
 */
proto.ocap.WalletInfo.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.ocap.WalletInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.WalletInfo} returns this
 */
proto.ocap.WalletInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.ChainInfo.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ChainInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ChainInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ChainInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ChainInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, ""),
    moniker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    consensusVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    synced: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    appHash: msg.getAppHash(),
    blockHash: msg.getBlockHash(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 8, ""),
    blockTime: (f = msg.getBlockTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    address: jspb.Message.getFieldWithDefault(msg, 10, ""),
    votingPower: jspb.Message.getFieldWithDefault(msg, 11, ""),
    totalTxs: jspb.Message.getFieldWithDefault(msg, 12, ""),
    version: jspb.Message.getFieldWithDefault(msg, 13, ""),
    forgeAppsVersionMap: (f = msg.getForgeAppsVersionMap()) ? f.toObject(includeInstance, undefined) : [],
    supportedTxsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ChainInfo}
 */
proto.ocap.ChainInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ChainInfo;
  return proto.ocap.ChainInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ChainInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ChainInfo}
 */
proto.ocap.ChainInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsensusVersion(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynced(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHeight(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setBlockTime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingPower(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalTxs(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 15:
      var value = msg.getForgeAppsVersionMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportedTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ChainInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ChainInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ChainInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ChainInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSynced();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getBlockHeight();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getVotingPower();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTotalTxs();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getForgeAppsVersionMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSupportedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network = 2;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string consensus_version = 4;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setConsensusVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool synced = 5;
 * @return {boolean}
 */
proto.ocap.ChainInfo.prototype.getSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setSynced = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes app_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.ChainInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes app_hash = 6;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.ocap.ChainInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes block_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.ChainInfo.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes block_hash = 7;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.ocap.ChainInfo.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string block_height = 8;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getBlockHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp block_time = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.ChainInfo.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.ChainInfo} returns this
*/
proto.ocap.ChainInfo.prototype.setBlockTime = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.clearBlockTime = function() {
  return this.setBlockTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.ChainInfo.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string address = 10;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string voting_power = 11;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getVotingPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string total_txs = 12;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getTotalTxs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string version = 13;
 * @return {string}
 */
proto.ocap.ChainInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * map<string, string> forge_apps_version = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ocap.ChainInfo.prototype.getForgeAppsVersionMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.clearForgeAppsVersionMap = function() {
  this.getForgeAppsVersionMap().clear();
  return this;};


/**
 * repeated string supported_txs = 16;
 * @return {!Array<string>}
 */
proto.ocap.ChainInfo.prototype.getSupportedTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.setSupportedTxsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.addSupportedTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ChainInfo} returns this
 */
proto.ocap.ChainInfo.prototype.clearSupportedTxsList = function() {
  return this.setSupportedTxsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.NodeInfo.repeatedFields_ = [16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, ""),
    moniker: jspb.Message.getFieldWithDefault(msg, 3, ""),
    consensusVersion: jspb.Message.getFieldWithDefault(msg, 4, ""),
    synced: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    appHash: msg.getAppHash(),
    blockHash: msg.getBlockHash(),
    blockHeight: jspb.Message.getFieldWithDefault(msg, 8, ""),
    blockTime: (f = msg.getBlockTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    address: jspb.Message.getFieldWithDefault(msg, 10, ""),
    votingPower: jspb.Message.getFieldWithDefault(msg, 11, ""),
    totalTxs: jspb.Message.getFieldWithDefault(msg, 12, ""),
    version: jspb.Message.getFieldWithDefault(msg, 13, ""),
    forgeAppsVersionMap: (f = msg.getForgeAppsVersionMap()) ? f.toObject(includeInstance, undefined) : [],
    supportedTxsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    ip: jspb.Message.getFieldWithDefault(msg, 17, ""),
    geoInfo: (f = msg.getGeoInfo()) && proto.ocap.GeoInfo.toObject(includeInstance, f),
    p2pAddress: jspb.Message.getFieldWithDefault(msg, 19, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.NodeInfo}
 */
proto.ocap.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.NodeInfo;
  return proto.ocap.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.NodeInfo}
 */
proto.ocap.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsensusVersion(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSynced(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockHash(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHeight(value);
      break;
    case 9:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setBlockTime(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingPower(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalTxs(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 15:
      var value = msg.getForgeAppsVersionMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "", "");
         });
      break;
    case 16:
      var value = /** @type {string} */ (reader.readString());
      msg.addSupportedTxs(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 18:
      var value = new proto.ocap.GeoInfo;
      reader.readMessage(value,proto.ocap.GeoInfo.deserializeBinaryFromReader);
      msg.setGeoInfo(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setP2pAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSynced();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBlockHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getBlockHeight();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getBlockTime();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getVotingPower();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getTotalTxs();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getForgeAppsVersionMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(15, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSupportedTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      16,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.ocap.GeoInfo.serializeBinaryToWriter
    );
  }
  f = message.getP2pAddress();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network = 2;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string moniker = 3;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string consensus_version = 4;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setConsensusVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bool synced = 5;
 * @return {boolean}
 */
proto.ocap.NodeInfo.prototype.getSynced = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setSynced = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bytes app_hash = 6;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.NodeInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes app_hash = 6;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.ocap.NodeInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes block_hash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.NodeInfo.prototype.getBlockHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes block_hash = 7;
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getBlockHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockHash()));
};


/**
 * optional bytes block_hash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockHash()`
 * @return {!Uint8Array}
 */
proto.ocap.NodeInfo.prototype.getBlockHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setBlockHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string block_height = 8;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getBlockHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional google.protobuf.Timestamp block_time = 9;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.NodeInfo.prototype.getBlockTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 9));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.NodeInfo} returns this
*/
proto.ocap.NodeInfo.prototype.setBlockTime = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.clearBlockTime = function() {
  return this.setBlockTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.NodeInfo.prototype.hasBlockTime = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string address = 10;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string voting_power = 11;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getVotingPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string total_txs = 12;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getTotalTxs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string version = 13;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * map<string, string> forge_apps_version = 15;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.ocap.NodeInfo.prototype.getForgeAppsVersionMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 15, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.clearForgeAppsVersionMap = function() {
  this.getForgeAppsVersionMap().clear();
  return this;};


/**
 * repeated string supported_txs = 16;
 * @return {!Array<string>}
 */
proto.ocap.NodeInfo.prototype.getSupportedTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setSupportedTxsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.addSupportedTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.clearSupportedTxsList = function() {
  return this.setSupportedTxsList([]);
};


/**
 * optional string ip = 17;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};


/**
 * optional GeoInfo geo_info = 18;
 * @return {?proto.ocap.GeoInfo}
 */
proto.ocap.NodeInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.ocap.GeoInfo} */ (
    jspb.Message.getWrapperField(this, proto.ocap.GeoInfo, 18));
};


/**
 * @param {?proto.ocap.GeoInfo|undefined} value
 * @return {!proto.ocap.NodeInfo} returns this
*/
proto.ocap.NodeInfo.prototype.setGeoInfo = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.clearGeoInfo = function() {
  return this.setGeoInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.NodeInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string p2p_address = 19;
 * @return {string}
 */
proto.ocap.NodeInfo.prototype.getP2pAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NodeInfo} returns this
 */
proto.ocap.NodeInfo.prototype.setP2pAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 19, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.Validator.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.Validator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.Validator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Validator.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    power: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.Validator}
 */
proto.ocap.Validator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.Validator;
  return proto.ocap.Validator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.Validator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.Validator}
 */
proto.ocap.Validator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPower(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.Validator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.Validator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.Validator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Validator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPower();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.Validator.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Validator} returns this
 */
proto.ocap.Validator.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string power = 2;
 * @return {string}
 */
proto.ocap.Validator.prototype.getPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Validator} returns this
 */
proto.ocap.Validator.prototype.setPower = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.ConsensusParams.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ConsensusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ConsensusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ConsensusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ConsensusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxBytes: jspb.Message.getFieldWithDefault(msg, 1, ""),
    maxGas: jspb.Message.getFieldWithDefault(msg, 2, ""),
    maxValidators: jspb.Message.getFieldWithDefault(msg, 3, 0),
    maxCandidates: jspb.Message.getFieldWithDefault(msg, 4, 0),
    pubKeyTypesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.ocap.Validator.toObject, includeInstance),
    validatorChanged: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    paramChanged: jspb.Message.getBooleanFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ConsensusParams}
 */
proto.ocap.ConsensusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ConsensusParams;
  return proto.ocap.ConsensusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ConsensusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ConsensusParams}
 */
proto.ocap.ConsensusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxBytes(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxGas(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxValidators(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxCandidates(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addPubKeyTypes(value);
      break;
    case 6:
      var value = new proto.ocap.Validator;
      reader.readMessage(value,proto.ocap.Validator.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setValidatorChanged(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setParamChanged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ConsensusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ConsensusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ConsensusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ConsensusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxBytes();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMaxGas();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxValidators();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getMaxCandidates();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getPubKeyTypesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ocap.Validator.serializeBinaryToWriter
    );
  }
  f = message.getValidatorChanged();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getParamChanged();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional string max_bytes = 1;
 * @return {string}
 */
proto.ocap.ConsensusParams.prototype.getMaxBytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setMaxBytes = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string max_gas = 2;
 * @return {string}
 */
proto.ocap.ConsensusParams.prototype.getMaxGas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setMaxGas = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 max_validators = 3;
 * @return {number}
 */
proto.ocap.ConsensusParams.prototype.getMaxValidators = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setMaxValidators = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 max_candidates = 4;
 * @return {number}
 */
proto.ocap.ConsensusParams.prototype.getMaxCandidates = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setMaxCandidates = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated string pub_key_types = 5;
 * @return {!Array<string>}
 */
proto.ocap.ConsensusParams.prototype.getPubKeyTypesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setPubKeyTypesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.addPubKeyTypes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.clearPubKeyTypesList = function() {
  return this.setPubKeyTypesList([]);
};


/**
 * repeated Validator validators = 6;
 * @return {!Array<!proto.ocap.Validator>}
 */
proto.ocap.ConsensusParams.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.ocap.Validator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.Validator, 6));
};


/**
 * @param {!Array<!proto.ocap.Validator>} value
 * @return {!proto.ocap.ConsensusParams} returns this
*/
proto.ocap.ConsensusParams.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ocap.Validator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.Validator}
 */
proto.ocap.ConsensusParams.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ocap.Validator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};


/**
 * optional bool validator_changed = 7;
 * @return {boolean}
 */
proto.ocap.ConsensusParams.prototype.getValidatorChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setValidatorChanged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool param_changed = 8;
 * @return {boolean}
 */
proto.ocap.ConsensusParams.prototype.getParamChanged = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.ConsensusParams} returns this
 */
proto.ocap.ConsensusParams.prototype.setParamChanged = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.UpgradeTask.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.UpgradeTask.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.UpgradeTask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.UpgradeTask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UpgradeTask.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dataHash: jspb.Message.getFieldWithDefault(msg, 2, ""),
    actionsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.UpgradeTask}
 */
proto.ocap.UpgradeTask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.UpgradeTask;
  return proto.ocap.UpgradeTask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.UpgradeTask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.UpgradeTask}
 */
proto.ocap.UpgradeTask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ocap.UpgradeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDataHash(value);
      break;
    case 4:
      var values = /** @type {!Array<!proto.ocap.UpgradeAction>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addActions(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.UpgradeTask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.UpgradeTask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.UpgradeTask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UpgradeTask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDataHash();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      4,
      f
    );
  }
};


/**
 * optional UpgradeType type = 1;
 * @return {!proto.ocap.UpgradeType}
 */
proto.ocap.UpgradeTask.prototype.getType = function() {
  return /** @type {!proto.ocap.UpgradeType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ocap.UpgradeType} value
 * @return {!proto.ocap.UpgradeTask} returns this
 */
proto.ocap.UpgradeTask.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string data_hash = 2;
 * @return {string}
 */
proto.ocap.UpgradeTask.prototype.getDataHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.UpgradeTask} returns this
 */
proto.ocap.UpgradeTask.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated UpgradeAction actions = 4;
 * @return {!Array<!proto.ocap.UpgradeAction>}
 */
proto.ocap.UpgradeTask.prototype.getActionsList = function() {
  return /** @type {!Array<!proto.ocap.UpgradeAction>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<!proto.ocap.UpgradeAction>} value
 * @return {!proto.ocap.UpgradeTask} returns this
 */
proto.ocap.UpgradeTask.prototype.setActionsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!proto.ocap.UpgradeAction} value
 * @param {number=} opt_index
 * @return {!proto.ocap.UpgradeTask} returns this
 */
proto.ocap.UpgradeTask.prototype.addActions = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.UpgradeTask} returns this
 */
proto.ocap.UpgradeTask.prototype.clearActionsList = function() {
  return this.setActionsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.UpgradeTasks.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.UpgradeTasks.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.UpgradeTasks.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.UpgradeTasks} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UpgradeTasks.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemList: jspb.Message.toObjectList(msg.getItemList(),
    proto.ocap.UpgradeTask.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.UpgradeTasks}
 */
proto.ocap.UpgradeTasks.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.UpgradeTasks;
  return proto.ocap.UpgradeTasks.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.UpgradeTasks} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.UpgradeTasks}
 */
proto.ocap.UpgradeTasks.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ocap.UpgradeTask;
      reader.readMessage(value,proto.ocap.UpgradeTask.deserializeBinaryFromReader);
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.UpgradeTasks.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.UpgradeTasks.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.UpgradeTasks} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UpgradeTasks.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ocap.UpgradeTask.serializeBinaryToWriter
    );
  }
};


/**
 * repeated UpgradeTask item = 1;
 * @return {!Array<!proto.ocap.UpgradeTask>}
 */
proto.ocap.UpgradeTasks.prototype.getItemList = function() {
  return /** @type{!Array<!proto.ocap.UpgradeTask>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.UpgradeTask, 1));
};


/**
 * @param {!Array<!proto.ocap.UpgradeTask>} value
 * @return {!proto.ocap.UpgradeTasks} returns this
*/
proto.ocap.UpgradeTasks.prototype.setItemList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ocap.UpgradeTask=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.UpgradeTask}
 */
proto.ocap.UpgradeTasks.prototype.addItem = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ocap.UpgradeTask, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.UpgradeTasks} returns this
 */
proto.ocap.UpgradeTasks.prototype.clearItemList = function() {
  return this.setItemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.Multisig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.Multisig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.Multisig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Multisig.toObject = function(includeInstance, msg) {
  var f, obj = {
    signer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pk: msg.getPk(),
    signature: msg.getSignature(),
    delegator: jspb.Message.getFieldWithDefault(msg, 4, ""),
    data: (f = msg.getData()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.Multisig}
 */
proto.ocap.Multisig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.Multisig;
  return proto.ocap.Multisig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.Multisig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.Multisig}
 */
proto.ocap.Multisig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegator(value);
      break;
    case 15:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.Multisig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.Multisig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.Multisig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Multisig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getDelegator();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional string signer = 1;
 * @return {string}
 */
proto.ocap.Multisig.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Multisig} returns this
 */
proto.ocap.Multisig.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.Multisig.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pk = 2;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.ocap.Multisig.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.ocap.Multisig.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.Multisig} returns this
 */
proto.ocap.Multisig.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes signature = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.Multisig.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes signature = 3;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ocap.Multisig.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ocap.Multisig.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.Multisig} returns this
 */
proto.ocap.Multisig.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string delegator = 4;
 * @return {string}
 */
proto.ocap.Multisig.prototype.getDelegator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Multisig} returns this
 */
proto.ocap.Multisig.prototype.setDelegator = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional google.protobuf.Any data = 15;
 * @return {?proto.google.protobuf.Any}
 */
proto.ocap.Multisig.prototype.getData = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 15));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ocap.Multisig} returns this
*/
proto.ocap.Multisig.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.Multisig} returns this
 */
proto.ocap.Multisig.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.Multisig.prototype.hasData = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.Transaction.repeatedFields_ = [14,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nonce: jspb.Message.getFieldWithDefault(msg, 2, 0),
    chainId: jspb.Message.getFieldWithDefault(msg, 3, ""),
    pk: msg.getPk(),
    gas: jspb.Message.getFieldWithDefault(msg, 5, 0),
    delegator: jspb.Message.getFieldWithDefault(msg, 6, ""),
    signature: msg.getSignature(),
    signaturesList: jspb.Message.toObjectList(msg.getSignaturesList(),
    proto.ocap.Multisig.toObject, includeInstance),
    itx: (f = msg.getItx()) && google_protobuf_any_pb.Any.toObject(includeInstance, f),
    receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
    proto.ocap.TransactionReceipt.toObject, includeInstance),
    serviceFee: jspb.Message.getFieldWithDefault(msg, 17, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.Transaction}
 */
proto.ocap.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.Transaction;
  return proto.ocap.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.Transaction}
 */
proto.ocap.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNonce(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGas(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDelegator(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    case 14:
      var value = new proto.ocap.Multisig;
      reader.readMessage(value,proto.ocap.Multisig.deserializeBinaryFromReader);
      msg.addSignatures(value);
      break;
    case 15:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setItx(value);
      break;
    case 16:
      var value = new proto.ocap.TransactionReceipt;
      reader.readMessage(value,proto.ocap.TransactionReceipt.deserializeBinaryFromReader);
      msg.addReceipts(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNonce();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getChainId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getGas();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getDelegator();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.ocap.Multisig.serializeBinaryToWriter
    );
  }
  f = message.getItx();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.ocap.TransactionReceipt.serializeBinaryToWriter
    );
  }
  f = message.getServiceFee();
  if (f.length > 0) {
    writer.writeString(
      17,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.ocap.Transaction.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 nonce = 2;
 * @return {number}
 */
proto.ocap.Transaction.prototype.getNonce = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setNonce = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string chain_id = 3;
 * @return {string}
 */
proto.ocap.Transaction.prototype.getChainId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setChainId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bytes pk = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.Transaction.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes pk = 4;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.ocap.Transaction.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.ocap.Transaction.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional uint32 gas = 5;
 * @return {number}
 */
proto.ocap.Transaction.prototype.getGas = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setGas = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string delegator = 6;
 * @return {string}
 */
proto.ocap.Transaction.prototype.getDelegator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setDelegator = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional bytes signature = 13;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes signature = 13;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.ocap.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.ocap.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setSignature = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * repeated Multisig signatures = 14;
 * @return {!Array<!proto.ocap.Multisig>}
 */
proto.ocap.Transaction.prototype.getSignaturesList = function() {
  return /** @type{!Array<!proto.ocap.Multisig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.Multisig, 14));
};


/**
 * @param {!Array<!proto.ocap.Multisig>} value
 * @return {!proto.ocap.Transaction} returns this
*/
proto.ocap.Transaction.prototype.setSignaturesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.ocap.Multisig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.Multisig}
 */
proto.ocap.Transaction.prototype.addSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.ocap.Multisig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.clearSignaturesList = function() {
  return this.setSignaturesList([]);
};


/**
 * optional google.protobuf.Any itx = 15;
 * @return {?proto.google.protobuf.Any}
 */
proto.ocap.Transaction.prototype.getItx = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 15));
};


/**
 * @param {?proto.google.protobuf.Any|undefined} value
 * @return {!proto.ocap.Transaction} returns this
*/
proto.ocap.Transaction.prototype.setItx = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.clearItx = function() {
  return this.setItx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.Transaction.prototype.hasItx = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * repeated TransactionReceipt receipts = 16;
 * @return {!Array<!proto.ocap.TransactionReceipt>}
 */
proto.ocap.Transaction.prototype.getReceiptsList = function() {
  return /** @type{!Array<!proto.ocap.TransactionReceipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TransactionReceipt, 16));
};


/**
 * @param {!Array<!proto.ocap.TransactionReceipt>} value
 * @return {!proto.ocap.Transaction} returns this
*/
proto.ocap.Transaction.prototype.setReceiptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.ocap.TransactionReceipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TransactionReceipt}
 */
proto.ocap.Transaction.prototype.addReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.ocap.TransactionReceipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.clearReceiptsList = function() {
  return this.setReceiptsList([]);
};


/**
 * optional string service_fee = 17;
 * @return {string}
 */
proto.ocap.Transaction.prototype.getServiceFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Transaction} returns this
 */
proto.ocap.Transaction.prototype.setServiceFee = function(value) {
  return jspb.Message.setProto3StringField(this, 17, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.TransactionInfo.repeatedFields_ = [5,8,22];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TransactionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TransactionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TransactionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    tx: (f = msg.getTx()) && proto.ocap.Transaction.toObject(includeInstance, f),
    height: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0),
    hash: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tagsList: jspb.Message.toObjectList(msg.getTagsList(),
    vendor_pb.KVPair.toObject, includeInstance),
    code: jspb.Message.getFieldWithDefault(msg, 6, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    receiptsList: jspb.Message.toObjectList(msg.getReceiptsList(),
    proto.ocap.TransactionReceipt.toObject, includeInstance),
    sender: jspb.Message.getFieldWithDefault(msg, 9, ""),
    receiver: jspb.Message.getFieldWithDefault(msg, 10, ""),
    tokenSymbolsList: jspb.Message.toObjectList(msg.getTokenSymbolsList(),
    proto.ocap.TokenSymbol.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TransactionInfo}
 */
proto.ocap.TransactionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TransactionInfo;
  return proto.ocap.TransactionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TransactionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TransactionInfo}
 */
proto.ocap.TransactionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ocap.Transaction;
      reader.readMessage(value,proto.ocap.Transaction.deserializeBinaryFromReader);
      msg.setTx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 5:
      var value = new vendor_pb.KVPair;
      reader.readMessage(value,vendor_pb.KVPair.deserializeBinaryFromReader);
      msg.addTags(value);
      break;
    case 6:
      var value = /** @type {!proto.ocap.StatusCode} */ (reader.readEnum());
      msg.setCode(value);
      break;
    case 7:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 8:
      var value = new proto.ocap.TransactionReceipt;
      reader.readMessage(value,proto.ocap.TransactionReceipt.deserializeBinaryFromReader);
      msg.addReceipts(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSender(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceiver(value);
      break;
    case 22:
      var value = new proto.ocap.TokenSymbol;
      reader.readMessage(value,proto.ocap.TokenSymbol.deserializeBinaryFromReader);
      msg.addTokenSymbols(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TransactionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TransactionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TransactionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTx();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ocap.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getHeight();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      vendor_pb.KVPair.serializeBinaryToWriter
    );
  }
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getReceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ocap.TransactionReceipt.serializeBinaryToWriter
    );
  }
  f = message.getSender();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getReceiver();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getTokenSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      22,
      f,
      proto.ocap.TokenSymbol.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction tx = 1;
 * @return {?proto.ocap.Transaction}
 */
proto.ocap.TransactionInfo.prototype.getTx = function() {
  return /** @type{?proto.ocap.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.ocap.Transaction, 1));
};


/**
 * @param {?proto.ocap.Transaction|undefined} value
 * @return {!proto.ocap.TransactionInfo} returns this
*/
proto.ocap.TransactionInfo.prototype.setTx = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.clearTx = function() {
  return this.setTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.TransactionInfo.prototype.hasTx = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string height = 2;
 * @return {string}
 */
proto.ocap.TransactionInfo.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.ocap.TransactionInfo.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string hash = 4;
 * @return {string}
 */
proto.ocap.TransactionInfo.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated vendor.KVPair tags = 5;
 * @return {!Array<!proto.vendor.KVPair>}
 */
proto.ocap.TransactionInfo.prototype.getTagsList = function() {
  return /** @type{!Array<!proto.vendor.KVPair>} */ (
    jspb.Message.getRepeatedWrapperField(this, vendor_pb.KVPair, 5));
};


/**
 * @param {!Array<!proto.vendor.KVPair>} value
 * @return {!proto.ocap.TransactionInfo} returns this
*/
proto.ocap.TransactionInfo.prototype.setTagsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.vendor.KVPair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vendor.KVPair}
 */
proto.ocap.TransactionInfo.prototype.addTags = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.vendor.KVPair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional StatusCode code = 6;
 * @return {!proto.ocap.StatusCode}
 */
proto.ocap.TransactionInfo.prototype.getCode = function() {
  return /** @type {!proto.ocap.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.ocap.StatusCode} value
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional google.protobuf.Timestamp time = 7;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.TransactionInfo.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 7));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.TransactionInfo} returns this
*/
proto.ocap.TransactionInfo.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.TransactionInfo.prototype.hasTime = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated TransactionReceipt receipts = 8;
 * @return {!Array<!proto.ocap.TransactionReceipt>}
 */
proto.ocap.TransactionInfo.prototype.getReceiptsList = function() {
  return /** @type{!Array<!proto.ocap.TransactionReceipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TransactionReceipt, 8));
};


/**
 * @param {!Array<!proto.ocap.TransactionReceipt>} value
 * @return {!proto.ocap.TransactionInfo} returns this
*/
proto.ocap.TransactionInfo.prototype.setReceiptsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ocap.TransactionReceipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TransactionReceipt}
 */
proto.ocap.TransactionInfo.prototype.addReceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ocap.TransactionReceipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.clearReceiptsList = function() {
  return this.setReceiptsList([]);
};


/**
 * optional string sender = 9;
 * @return {string}
 */
proto.ocap.TransactionInfo.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.setSender = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string receiver = 10;
 * @return {string}
 */
proto.ocap.TransactionInfo.prototype.getReceiver = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.setReceiver = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * repeated TokenSymbol token_symbols = 22;
 * @return {!Array<!proto.ocap.TokenSymbol>}
 */
proto.ocap.TransactionInfo.prototype.getTokenSymbolsList = function() {
  return /** @type{!Array<!proto.ocap.TokenSymbol>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TokenSymbol, 22));
};


/**
 * @param {!Array<!proto.ocap.TokenSymbol>} value
 * @return {!proto.ocap.TransactionInfo} returns this
*/
proto.ocap.TransactionInfo.prototype.setTokenSymbolsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 22, value);
};


/**
 * @param {!proto.ocap.TokenSymbol=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TokenSymbol}
 */
proto.ocap.TransactionInfo.prototype.addTokenSymbols = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 22, opt_value, proto.ocap.TokenSymbol, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionInfo} returns this
 */
proto.ocap.TransactionInfo.prototype.clearTokenSymbolsList = function() {
  return this.setTokenSymbolsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.TransactionReceipt.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TransactionReceipt.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TransactionReceipt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TransactionReceipt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionReceipt.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    changesList: jspb.Message.toObjectList(msg.getChangesList(),
    proto.ocap.ReceiptChange.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TransactionReceipt}
 */
proto.ocap.TransactionReceipt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TransactionReceipt;
  return proto.ocap.TransactionReceipt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TransactionReceipt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TransactionReceipt}
 */
proto.ocap.TransactionReceipt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new proto.ocap.ReceiptChange;
      reader.readMessage(value,proto.ocap.ReceiptChange.deserializeBinaryFromReader);
      msg.addChanges(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TransactionReceipt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TransactionReceipt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TransactionReceipt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionReceipt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ocap.ReceiptChange.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.TransactionReceipt.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TransactionReceipt} returns this
 */
proto.ocap.TransactionReceipt.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ReceiptChange changes = 2;
 * @return {!Array<!proto.ocap.ReceiptChange>}
 */
proto.ocap.TransactionReceipt.prototype.getChangesList = function() {
  return /** @type{!Array<!proto.ocap.ReceiptChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.ReceiptChange, 2));
};


/**
 * @param {!Array<!proto.ocap.ReceiptChange>} value
 * @return {!proto.ocap.TransactionReceipt} returns this
*/
proto.ocap.TransactionReceipt.prototype.setChangesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ocap.ReceiptChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.ReceiptChange}
 */
proto.ocap.TransactionReceipt.prototype.addChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ocap.ReceiptChange, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionReceipt} returns this
 */
proto.ocap.TransactionReceipt.prototype.clearChangesList = function() {
  return this.setChangesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ReceiptChange.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ReceiptChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ReceiptChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ReceiptChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    target: jspb.Message.getFieldWithDefault(msg, 1, ""),
    action: jspb.Message.getFieldWithDefault(msg, 2, ""),
    value: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ReceiptChange}
 */
proto.ocap.ReceiptChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ReceiptChange;
  return proto.ocap.ReceiptChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ReceiptChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ReceiptChange}
 */
proto.ocap.ReceiptChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTarget(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAction(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ReceiptChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ReceiptChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ReceiptChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ReceiptChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTarget();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAction();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string target = 1;
 * @return {string}
 */
proto.ocap.ReceiptChange.prototype.getTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ReceiptChange} returns this
 */
proto.ocap.ReceiptChange.prototype.setTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string action = 2;
 * @return {string}
 */
proto.ocap.ReceiptChange.prototype.getAction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ReceiptChange} returns this
 */
proto.ocap.ReceiptChange.prototype.setAction = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string value = 3;
 * @return {string}
 */
proto.ocap.ReceiptChange.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ReceiptChange} returns this
 */
proto.ocap.ReceiptChange.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TokenInput.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TokenInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TokenInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TokenInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TokenInput}
 */
proto.ocap.TokenInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TokenInput;
  return proto.ocap.TokenInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TokenInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TokenInput}
 */
proto.ocap.TokenInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TokenInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TokenInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TokenInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TokenInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.TokenInput.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TokenInput} returns this
 */
proto.ocap.TokenInput.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.ocap.TokenInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TokenInput} returns this
 */
proto.ocap.TokenInput.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.TransactionInput.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TransactionInput.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TransactionInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TransactionInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    owner: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.ocap.TokenInput.toObject, includeInstance),
    assetsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TransactionInput}
 */
proto.ocap.TransactionInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TransactionInput;
  return proto.ocap.TransactionInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TransactionInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TransactionInput}
 */
proto.ocap.TransactionInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwner(value);
      break;
    case 2:
      var value = new proto.ocap.TokenInput;
      reader.readMessage(value,proto.ocap.TokenInput.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TransactionInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TransactionInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TransactionInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ocap.TokenInput.serializeBinaryToWriter
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string owner = 1;
 * @return {string}
 */
proto.ocap.TransactionInput.prototype.getOwner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TransactionInput} returns this
 */
proto.ocap.TransactionInput.prototype.setOwner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated TokenInput tokens = 2;
 * @return {!Array<!proto.ocap.TokenInput>}
 */
proto.ocap.TransactionInput.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.ocap.TokenInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TokenInput, 2));
};


/**
 * @param {!Array<!proto.ocap.TokenInput>} value
 * @return {!proto.ocap.TransactionInput} returns this
*/
proto.ocap.TransactionInput.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ocap.TokenInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TokenInput}
 */
proto.ocap.TransactionInput.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ocap.TokenInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionInput} returns this
 */
proto.ocap.TransactionInput.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated string assets = 3;
 * @return {!Array<string>}
 */
proto.ocap.TransactionInput.prototype.getAssetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.TransactionInput} returns this
 */
proto.ocap.TransactionInput.prototype.setAssetsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.TransactionInput} returns this
 */
proto.ocap.TransactionInput.prototype.addAssets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionInput} returns this
 */
proto.ocap.TransactionInput.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.VariableInput.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.VariableInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.VariableInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.VariableInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    required: jspb.Message.getBooleanFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.VariableInput}
 */
proto.ocap.VariableInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.VariableInput;
  return proto.ocap.VariableInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.VariableInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.VariableInput}
 */
proto.ocap.VariableInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRequired(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.VariableInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.VariableInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.VariableInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.VariableInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRequired();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ocap.VariableInput.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.VariableInput} returns this
 */
proto.ocap.VariableInput.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.ocap.VariableInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.VariableInput} returns this
 */
proto.ocap.VariableInput.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.ocap.VariableInput.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.VariableInput} returns this
 */
proto.ocap.VariableInput.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool required = 4;
 * @return {boolean}
 */
proto.ocap.VariableInput.prototype.getRequired = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.VariableInput} returns this
 */
proto.ocap.VariableInput.prototype.setRequired = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.DelegateConfig.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.DelegateConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.DelegateConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.DelegateConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.DelegateConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    deltaInterval: jspb.Message.getFieldWithDefault(msg, 1, 0),
    typeUrlsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.DelegateConfig}
 */
proto.ocap.DelegateConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.DelegateConfig;
  return proto.ocap.DelegateConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.DelegateConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.DelegateConfig}
 */
proto.ocap.DelegateConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeltaInterval(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addTypeUrls(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.DelegateConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.DelegateConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.DelegateConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.DelegateConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeltaInterval();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTypeUrlsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional uint32 delta_interval = 1;
 * @return {number}
 */
proto.ocap.DelegateConfig.prototype.getDeltaInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.DelegateConfig} returns this
 */
proto.ocap.DelegateConfig.prototype.setDeltaInterval = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string type_urls = 2;
 * @return {!Array<string>}
 */
proto.ocap.DelegateConfig.prototype.getTypeUrlsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.DelegateConfig} returns this
 */
proto.ocap.DelegateConfig.prototype.setTypeUrlsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.DelegateConfig} returns this
 */
proto.ocap.DelegateConfig.prototype.addTypeUrls = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.DelegateConfig} returns this
 */
proto.ocap.DelegateConfig.prototype.clearTypeUrlsList = function() {
  return this.setTypeUrlsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.VaultConfig.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.VaultConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.VaultConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.VaultConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.VaultConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    slashedStake: jspb.Message.getFieldWithDefault(msg, 1, ""),
    txFee: jspb.Message.getFieldWithDefault(msg, 2, ""),
    txGasList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.VaultConfig}
 */
proto.ocap.VaultConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.VaultConfig;
  return proto.ocap.VaultConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.VaultConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.VaultConfig}
 */
proto.ocap.VaultConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlashedStake(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTxFee(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxGas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.VaultConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.VaultConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.VaultConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.VaultConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlashedStake();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTxFee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTxGasList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string slashed_stake = 1;
 * @return {string}
 */
proto.ocap.VaultConfig.prototype.getSlashedStake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.VaultConfig} returns this
 */
proto.ocap.VaultConfig.prototype.setSlashedStake = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string tx_fee = 2;
 * @return {string}
 */
proto.ocap.VaultConfig.prototype.getTxFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.VaultConfig} returns this
 */
proto.ocap.VaultConfig.prototype.setTxFee = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string tx_gas = 3;
 * @return {!Array<string>}
 */
proto.ocap.VaultConfig.prototype.getTxGasList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.VaultConfig} returns this
 */
proto.ocap.VaultConfig.prototype.setTxGasList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.VaultConfig} returns this
 */
proto.ocap.VaultConfig.prototype.addTxGas = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.VaultConfig} returns this
 */
proto.ocap.VaultConfig.prototype.clearTxGasList = function() {
  return this.setTxGasList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TxFeeConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TxFeeConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TxFeeConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TxFeeConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    typeUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fee: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TxFeeConfig}
 */
proto.ocap.TxFeeConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TxFeeConfig;
  return proto.ocap.TxFeeConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TxFeeConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TxFeeConfig}
 */
proto.ocap.TxFeeConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTypeUrl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFee(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TxFeeConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TxFeeConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TxFeeConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TxFeeConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTypeUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFee();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type_url = 1;
 * @return {string}
 */
proto.ocap.TxFeeConfig.prototype.getTypeUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TxFeeConfig} returns this
 */
proto.ocap.TxFeeConfig.prototype.setTypeUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string fee = 2;
 * @return {string}
 */
proto.ocap.TxFeeConfig.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TxFeeConfig} returns this
 */
proto.ocap.TxFeeConfig.prototype.setFee = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TxGasConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TxGasConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TxGasConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TxGasConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    price: jspb.Message.getFieldWithDefault(msg, 1, 0),
    createState: jspb.Message.getFieldWithDefault(msg, 2, 0),
    updateState: jspb.Message.getFieldWithDefault(msg, 3, 0),
    dataStorage: jspb.Message.getFieldWithDefault(msg, 4, 0),
    minStake: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maxStake: jspb.Message.getFieldWithDefault(msg, 6, ""),
    stakeLockPeriod: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TxGasConfig}
 */
proto.ocap.TxGasConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TxGasConfig;
  return proto.ocap.TxGasConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TxGasConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TxGasConfig}
 */
proto.ocap.TxGasConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPrice(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreateState(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpdateState(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDataStorage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMinStake(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaxStake(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setStakeLockPeriod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TxGasConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TxGasConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TxGasConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TxGasConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrice();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getCreateState();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getUpdateState();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getDataStorage();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMinStake();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaxStake();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getStakeLockPeriod();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * optional uint64 price = 1;
 * @return {number}
 */
proto.ocap.TxGasConfig.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setPrice = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 create_state = 2;
 * @return {number}
 */
proto.ocap.TxGasConfig.prototype.getCreateState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setCreateState = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 update_state = 3;
 * @return {number}
 */
proto.ocap.TxGasConfig.prototype.getUpdateState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setUpdateState = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 data_storage = 4;
 * @return {number}
 */
proto.ocap.TxGasConfig.prototype.getDataStorage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setDataStorage = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string min_stake = 5;
 * @return {string}
 */
proto.ocap.TxGasConfig.prototype.getMinStake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setMinStake = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string max_stake = 6;
 * @return {string}
 */
proto.ocap.TxGasConfig.prototype.getMaxStake = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setMaxStake = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint64 stake_lock_period = 7;
 * @return {number}
 */
proto.ocap.TxGasConfig.prototype.getStakeLockPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TxGasConfig} returns this
 */
proto.ocap.TxGasConfig.prototype.setStakeLockPeriod = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.TransactionConfig.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.TransactionConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.TransactionConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.TransactionConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxAssetSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    maxListSize: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxMultisig: jspb.Message.getFieldWithDefault(msg, 3, 0),
    delegate: (f = msg.getDelegate()) && proto.ocap.DelegateConfig.toObject(includeInstance, f),
    txFeeList: jspb.Message.toObjectList(msg.getTxFeeList(),
    proto.ocap.TxFeeConfig.toObject, includeInstance),
    txGas: (f = msg.getTxGas()) && proto.ocap.TxGasConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.TransactionConfig}
 */
proto.ocap.TransactionConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.TransactionConfig;
  return proto.ocap.TransactionConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.TransactionConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.TransactionConfig}
 */
proto.ocap.TransactionConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxAssetSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxListSize(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxMultisig(value);
      break;
    case 4:
      var value = new proto.ocap.DelegateConfig;
      reader.readMessage(value,proto.ocap.DelegateConfig.deserializeBinaryFromReader);
      msg.setDelegate(value);
      break;
    case 5:
      var value = new proto.ocap.TxFeeConfig;
      reader.readMessage(value,proto.ocap.TxFeeConfig.deserializeBinaryFromReader);
      msg.addTxFee(value);
      break;
    case 6:
      var value = new proto.ocap.TxGasConfig;
      reader.readMessage(value,proto.ocap.TxGasConfig.deserializeBinaryFromReader);
      msg.setTxGas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.TransactionConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.TransactionConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.TransactionConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.TransactionConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxAssetSize();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMaxListSize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxMultisig();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getDelegate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ocap.DelegateConfig.serializeBinaryToWriter
    );
  }
  f = message.getTxFeeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.ocap.TxFeeConfig.serializeBinaryToWriter
    );
  }
  f = message.getTxGas();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ocap.TxGasConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 max_asset_size = 1;
 * @return {number}
 */
proto.ocap.TransactionConfig.prototype.getMaxAssetSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TransactionConfig} returns this
 */
proto.ocap.TransactionConfig.prototype.setMaxAssetSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 max_list_size = 2;
 * @return {number}
 */
proto.ocap.TransactionConfig.prototype.getMaxListSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TransactionConfig} returns this
 */
proto.ocap.TransactionConfig.prototype.setMaxListSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 max_multisig = 3;
 * @return {number}
 */
proto.ocap.TransactionConfig.prototype.getMaxMultisig = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.TransactionConfig} returns this
 */
proto.ocap.TransactionConfig.prototype.setMaxMultisig = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional DelegateConfig delegate = 4;
 * @return {?proto.ocap.DelegateConfig}
 */
proto.ocap.TransactionConfig.prototype.getDelegate = function() {
  return /** @type{?proto.ocap.DelegateConfig} */ (
    jspb.Message.getWrapperField(this, proto.ocap.DelegateConfig, 4));
};


/**
 * @param {?proto.ocap.DelegateConfig|undefined} value
 * @return {!proto.ocap.TransactionConfig} returns this
*/
proto.ocap.TransactionConfig.prototype.setDelegate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.TransactionConfig} returns this
 */
proto.ocap.TransactionConfig.prototype.clearDelegate = function() {
  return this.setDelegate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.TransactionConfig.prototype.hasDelegate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated TxFeeConfig tx_fee = 5;
 * @return {!Array<!proto.ocap.TxFeeConfig>}
 */
proto.ocap.TransactionConfig.prototype.getTxFeeList = function() {
  return /** @type{!Array<!proto.ocap.TxFeeConfig>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TxFeeConfig, 5));
};


/**
 * @param {!Array<!proto.ocap.TxFeeConfig>} value
 * @return {!proto.ocap.TransactionConfig} returns this
*/
proto.ocap.TransactionConfig.prototype.setTxFeeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.ocap.TxFeeConfig=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TxFeeConfig}
 */
proto.ocap.TransactionConfig.prototype.addTxFee = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.ocap.TxFeeConfig, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.TransactionConfig} returns this
 */
proto.ocap.TransactionConfig.prototype.clearTxFeeList = function() {
  return this.setTxFeeList([]);
};


/**
 * optional TxGasConfig tx_gas = 6;
 * @return {?proto.ocap.TxGasConfig}
 */
proto.ocap.TransactionConfig.prototype.getTxGas = function() {
  return /** @type{?proto.ocap.TxGasConfig} */ (
    jspb.Message.getWrapperField(this, proto.ocap.TxGasConfig, 6));
};


/**
 * @param {?proto.ocap.TxGasConfig|undefined} value
 * @return {!proto.ocap.TransactionConfig} returns this
*/
proto.ocap.TransactionConfig.prototype.setTxGas = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.TransactionConfig} returns this
 */
proto.ocap.TransactionConfig.prototype.clearTxGas = function() {
  return this.setTxGas(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.TransactionConfig.prototype.hasTxGas = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.BlockInfo.repeatedFields_ = [6,8,9,10];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.BlockInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.BlockInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.BlockInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BlockInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numTxs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    appHash: msg.getAppHash(),
    proposer: msg.getProposer(),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.ocap.TransactionInfo.toObject, includeInstance),
    totalTxs: jspb.Message.getFieldWithDefault(msg, 7, ""),
    invalidTxsList: jspb.Message.toObjectList(msg.getInvalidTxsList(),
    proto.ocap.TransactionInfo.toObject, includeInstance),
    txsHashesList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    invalidTxsHashesList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    consensusHash: msg.getConsensusHash(),
    dataHash: msg.getDataHash(),
    evidenceHash: msg.getEvidenceHash(),
    lastCommitHash: msg.getLastCommitHash(),
    lastResultsHash: msg.getLastResultsHash(),
    nextValidatorsHash: msg.getNextValidatorsHash(),
    validatorsHash: msg.getValidatorsHash(),
    version: (f = msg.getVersion()) && vendor_pb.Version.toObject(includeInstance, f),
    lastBlockId: (f = msg.getLastBlockId()) && vendor_pb.BlockID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.BlockInfo}
 */
proto.ocap.BlockInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.BlockInfo;
  return proto.ocap.BlockInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.BlockInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.BlockInfo}
 */
proto.ocap.BlockInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumTxs(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposer(value);
      break;
    case 6:
      var value = new proto.ocap.TransactionInfo;
      reader.readMessage(value,proto.ocap.TransactionInfo.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalTxs(value);
      break;
    case 8:
      var value = new proto.ocap.TransactionInfo;
      reader.readMessage(value,proto.ocap.TransactionInfo.deserializeBinaryFromReader);
      msg.addInvalidTxs(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxsHashes(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addInvalidTxsHashes(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusHash(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataHash(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastCommitHash(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorsHash(value);
      break;
    case 17:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorsHash(value);
      break;
    case 18:
      var value = new vendor_pb.Version;
      reader.readMessage(value,vendor_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 19:
      var value = new vendor_pb.BlockID;
      reader.readMessage(value,vendor_pb.BlockID.deserializeBinaryFromReader);
      msg.setLastBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.BlockInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.BlockInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BlockInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getProposer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.ocap.TransactionInfo.serializeBinaryToWriter
    );
  }
  f = message.getTotalTxs();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getInvalidTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.ocap.TransactionInfo.serializeBinaryToWriter
    );
  }
  f = message.getTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getInvalidTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      17,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      vendor_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      vendor_pb.BlockID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string height = 1;
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 num_txs = 2;
 * @return {number}
 */
proto.ocap.BlockInfo.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.BlockInfo.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.BlockInfo} returns this
*/
proto.ocap.BlockInfo.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.BlockInfo.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes app_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes app_hash = 4;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes proposer = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getProposer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proposer = 5;
 * This is a type-conversion wrapper around `getProposer()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getProposer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposer()));
};


/**
 * optional bytes proposer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposer()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getProposer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setProposer = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * repeated TransactionInfo txs = 6;
 * @return {!Array<!proto.ocap.TransactionInfo>}
 */
proto.ocap.BlockInfo.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.ocap.TransactionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TransactionInfo, 6));
};


/**
 * @param {!Array<!proto.ocap.TransactionInfo>} value
 * @return {!proto.ocap.BlockInfo} returns this
*/
proto.ocap.BlockInfo.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.ocap.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TransactionInfo}
 */
proto.ocap.BlockInfo.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.ocap.TransactionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};


/**
 * optional string total_txs = 7;
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getTotalTxs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * repeated TransactionInfo invalid_txs = 8;
 * @return {!Array<!proto.ocap.TransactionInfo>}
 */
proto.ocap.BlockInfo.prototype.getInvalidTxsList = function() {
  return /** @type{!Array<!proto.ocap.TransactionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TransactionInfo, 8));
};


/**
 * @param {!Array<!proto.ocap.TransactionInfo>} value
 * @return {!proto.ocap.BlockInfo} returns this
*/
proto.ocap.BlockInfo.prototype.setInvalidTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.ocap.TransactionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TransactionInfo}
 */
proto.ocap.BlockInfo.prototype.addInvalidTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.ocap.TransactionInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearInvalidTxsList = function() {
  return this.setInvalidTxsList([]);
};


/**
 * repeated string txs_hashes = 9;
 * @return {!Array<string>}
 */
proto.ocap.BlockInfo.prototype.getTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setTxsHashesList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.addTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearTxsHashesList = function() {
  return this.setTxsHashesList([]);
};


/**
 * repeated string invalid_txs_hashes = 10;
 * @return {!Array<string>}
 */
proto.ocap.BlockInfo.prototype.getInvalidTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setInvalidTxsHashesList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.addInvalidTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearInvalidTxsHashesList = function() {
  return this.setInvalidTxsHashesList([]);
};


/**
 * optional bytes consensus_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes consensus_hash = 11;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusHash()));
};


/**
 * optional bytes consensus_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes data_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes data_hash = 12;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataHash()));
};


/**
 * optional bytes data_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes evidence_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes evidence_hash = 13;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceHash()));
};


/**
 * optional bytes evidence_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes last_commit_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes last_commit_hash = 14;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastCommitHash()));
};


/**
 * optional bytes last_commit_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastCommitHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes last_results_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes last_results_hash = 15;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional bytes next_validators_hash = 16;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes next_validators_hash = 16;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorsHash()));
};


/**
 * optional bytes next_validators_hash = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * optional bytes validators_hash = 17;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfo.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * optional bytes validators_hash = 17;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.ocap.BlockInfo.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorsHash()));
};


/**
 * optional bytes validators_hash = 17;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfo.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 17, value);
};


/**
 * optional vendor.Version version = 18;
 * @return {?proto.vendor.Version}
 */
proto.ocap.BlockInfo.prototype.getVersion = function() {
  return /** @type{?proto.vendor.Version} */ (
    jspb.Message.getWrapperField(this, vendor_pb.Version, 18));
};


/**
 * @param {?proto.vendor.Version|undefined} value
 * @return {!proto.ocap.BlockInfo} returns this
*/
proto.ocap.BlockInfo.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.BlockInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional vendor.BlockID last_block_id = 19;
 * @return {?proto.vendor.BlockID}
 */
proto.ocap.BlockInfo.prototype.getLastBlockId = function() {
  return /** @type{?proto.vendor.BlockID} */ (
    jspb.Message.getWrapperField(this, vendor_pb.BlockID, 19));
};


/**
 * @param {?proto.vendor.BlockID|undefined} value
 * @return {!proto.ocap.BlockInfo} returns this
*/
proto.ocap.BlockInfo.prototype.setLastBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.BlockInfo} returns this
 */
proto.ocap.BlockInfo.prototype.clearLastBlockId = function() {
  return this.setLastBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.BlockInfo.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.BlockInfoSimple.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.BlockInfoSimple.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.BlockInfoSimple.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.BlockInfoSimple} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BlockInfoSimple.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, ""),
    numTxs: jspb.Message.getFieldWithDefault(msg, 2, 0),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    appHash: msg.getAppHash(),
    proposer: msg.getProposer(),
    totalTxs: jspb.Message.getFieldWithDefault(msg, 6, ""),
    txsHashesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    invalidTxsHashesList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    consensusHash: msg.getConsensusHash(),
    dataHash: msg.getDataHash(),
    evidenceHash: msg.getEvidenceHash(),
    lastCommitHash: msg.getLastCommitHash(),
    lastResultsHash: msg.getLastResultsHash(),
    nextValidatorsHash: msg.getNextValidatorsHash(),
    validatorsHash: msg.getValidatorsHash(),
    version: (f = msg.getVersion()) && vendor_pb.Version.toObject(includeInstance, f),
    lastBlockId: (f = msg.getLastBlockId()) && vendor_pb.BlockID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.BlockInfoSimple}
 */
proto.ocap.BlockInfoSimple.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.BlockInfoSimple;
  return proto.ocap.BlockInfoSimple.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.BlockInfoSimple} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.BlockInfoSimple}
 */
proto.ocap.BlockInfoSimple.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNumTxs(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAppHash(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setProposer(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalTxs(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addTxsHashes(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addInvalidTxsHashes(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setConsensusHash(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDataHash(value);
      break;
    case 11:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvidenceHash(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastCommitHash(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLastResultsHash(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNextValidatorsHash(value);
      break;
    case 15:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidatorsHash(value);
      break;
    case 16:
      var value = new vendor_pb.Version;
      reader.readMessage(value,vendor_pb.Version.deserializeBinaryFromReader);
      msg.setVersion(value);
      break;
    case 17:
      var value = new vendor_pb.BlockID;
      reader.readMessage(value,vendor_pb.BlockID.deserializeBinaryFromReader);
      msg.setLastBlockId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.BlockInfoSimple.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.BlockInfoSimple} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.BlockInfoSimple.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNumTxs();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAppHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getProposer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getTotalTxs();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getInvalidTxsHashesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getConsensusHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = message.getDataHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getEvidenceHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      11,
      f
    );
  }
  f = message.getLastCommitHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getLastResultsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = message.getNextValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = message.getValidatorsHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      15,
      f
    );
  }
  f = message.getVersion();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      vendor_pb.Version.serializeBinaryToWriter
    );
  }
  f = message.getLastBlockId();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      vendor_pb.BlockID.serializeBinaryToWriter
    );
  }
};


/**
 * optional string height = 1;
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 num_txs = 2;
 * @return {number}
 */
proto.ocap.BlockInfoSimple.prototype.getNumTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setNumTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.BlockInfoSimple.prototype.getTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
*/
proto.ocap.BlockInfoSimple.prototype.setTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.clearTime = function() {
  return this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.BlockInfoSimple.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes app_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getAppHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes app_hash = 4;
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getAppHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAppHash()));
};


/**
 * optional bytes app_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAppHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getAppHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAppHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setAppHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes proposer = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getProposer = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes proposer = 5;
 * This is a type-conversion wrapper around `getProposer()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getProposer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getProposer()));
};


/**
 * optional bytes proposer = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getProposer()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getProposer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getProposer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setProposer = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional string total_txs = 6;
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getTotalTxs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setTotalTxs = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated string txs_hashes = 7;
 * @return {!Array<string>}
 */
proto.ocap.BlockInfoSimple.prototype.getTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setTxsHashesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.addTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.clearTxsHashesList = function() {
  return this.setTxsHashesList([]);
};


/**
 * repeated string invalid_txs_hashes = 8;
 * @return {!Array<string>}
 */
proto.ocap.BlockInfoSimple.prototype.getInvalidTxsHashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setInvalidTxsHashesList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.addInvalidTxsHashes = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.clearInvalidTxsHashesList = function() {
  return this.setInvalidTxsHashesList([]);
};


/**
 * optional bytes consensus_hash = 9;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getConsensusHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * optional bytes consensus_hash = 9;
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getConsensusHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getConsensusHash()));
};


/**
 * optional bytes consensus_hash = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getConsensusHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getConsensusHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getConsensusHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setConsensusHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 9, value);
};


/**
 * optional bytes data_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getDataHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes data_hash = 10;
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getDataHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDataHash()));
};


/**
 * optional bytes data_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDataHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getDataHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDataHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setDataHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional bytes evidence_hash = 11;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getEvidenceHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * optional bytes evidence_hash = 11;
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getEvidenceHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvidenceHash()));
};


/**
 * optional bytes evidence_hash = 11;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvidenceHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getEvidenceHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvidenceHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setEvidenceHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 11, value);
};


/**
 * optional bytes last_commit_hash = 12;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getLastCommitHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes last_commit_hash = 12;
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getLastCommitHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastCommitHash()));
};


/**
 * optional bytes last_commit_hash = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastCommitHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getLastCommitHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastCommitHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setLastCommitHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional bytes last_results_hash = 13;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getLastResultsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * optional bytes last_results_hash = 13;
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getLastResultsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLastResultsHash()));
};


/**
 * optional bytes last_results_hash = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLastResultsHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getLastResultsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLastResultsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setLastResultsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 13, value);
};


/**
 * optional bytes next_validators_hash = 14;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getNextValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * optional bytes next_validators_hash = 14;
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getNextValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNextValidatorsHash()));
};


/**
 * optional bytes next_validators_hash = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNextValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getNextValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNextValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setNextValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 14, value);
};


/**
 * optional bytes validators_hash = 15;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.BlockInfoSimple.prototype.getValidatorsHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * optional bytes validators_hash = 15;
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {string}
 */
proto.ocap.BlockInfoSimple.prototype.getValidatorsHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidatorsHash()));
};


/**
 * optional bytes validators_hash = 15;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidatorsHash()`
 * @return {!Uint8Array}
 */
proto.ocap.BlockInfoSimple.prototype.getValidatorsHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidatorsHash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.setValidatorsHash = function(value) {
  return jspb.Message.setProto3BytesField(this, 15, value);
};


/**
 * optional vendor.Version version = 16;
 * @return {?proto.vendor.Version}
 */
proto.ocap.BlockInfoSimple.prototype.getVersion = function() {
  return /** @type{?proto.vendor.Version} */ (
    jspb.Message.getWrapperField(this, vendor_pb.Version, 16));
};


/**
 * @param {?proto.vendor.Version|undefined} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
*/
proto.ocap.BlockInfoSimple.prototype.setVersion = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.clearVersion = function() {
  return this.setVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.BlockInfoSimple.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional vendor.BlockID last_block_id = 17;
 * @return {?proto.vendor.BlockID}
 */
proto.ocap.BlockInfoSimple.prototype.getLastBlockId = function() {
  return /** @type{?proto.vendor.BlockID} */ (
    jspb.Message.getWrapperField(this, vendor_pb.BlockID, 17));
};


/**
 * @param {?proto.vendor.BlockID|undefined} value
 * @return {!proto.ocap.BlockInfoSimple} returns this
*/
proto.ocap.BlockInfoSimple.prototype.setLastBlockId = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.BlockInfoSimple} returns this
 */
proto.ocap.BlockInfoSimple.prototype.clearLastBlockId = function() {
  return this.setLastBlockId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.BlockInfoSimple.prototype.hasLastBlockId = function() {
  return jspb.Message.getField(this, 17) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.StateContext.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.StateContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.StateContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.StateContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    genesisTx: jspb.Message.getFieldWithDefault(msg, 1, ""),
    renaissanceTx: jspb.Message.getFieldWithDefault(msg, 2, ""),
    genesisTime: (f = msg.getGenesisTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    renaissanceTime: (f = msg.getRenaissanceTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.StateContext}
 */
proto.ocap.StateContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.StateContext;
  return proto.ocap.StateContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.StateContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.StateContext}
 */
proto.ocap.StateContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGenesisTx(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRenaissanceTx(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setGenesisTime(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setRenaissanceTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.StateContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.StateContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.StateContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.StateContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGenesisTx();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRenaissanceTx();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGenesisTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRenaissanceTime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string genesis_tx = 1;
 * @return {string}
 */
proto.ocap.StateContext.prototype.getGenesisTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.StateContext} returns this
 */
proto.ocap.StateContext.prototype.setGenesisTx = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string renaissance_tx = 2;
 * @return {string}
 */
proto.ocap.StateContext.prototype.getRenaissanceTx = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.StateContext} returns this
 */
proto.ocap.StateContext.prototype.setRenaissanceTx = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp genesis_time = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.StateContext.prototype.getGenesisTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.StateContext} returns this
*/
proto.ocap.StateContext.prototype.setGenesisTime = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.StateContext} returns this
 */
proto.ocap.StateContext.prototype.clearGenesisTime = function() {
  return this.setGenesisTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.StateContext.prototype.hasGenesisTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional google.protobuf.Timestamp renaissance_time = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.ocap.StateContext.prototype.getRenaissanceTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.ocap.StateContext} returns this
*/
proto.ocap.StateContext.prototype.setRenaissanceTime = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.StateContext} returns this
 */
proto.ocap.StateContext.prototype.clearRenaissanceTime = function() {
  return this.setRenaissanceTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.StateContext.prototype.hasRenaissanceTime = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.StakeSummary.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.StakeSummary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.StakeSummary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.StakeSummary.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalStakes: (f = msg.getTotalStakes()) && proto.ocap.BigUint.toObject(includeInstance, f),
    totalUnstakes: (f = msg.getTotalUnstakes()) && proto.ocap.BigUint.toObject(includeInstance, f),
    context: (f = msg.getContext()) && proto.ocap.StateContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.StakeSummary}
 */
proto.ocap.StakeSummary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.StakeSummary;
  return proto.ocap.StakeSummary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.StakeSummary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.StakeSummary}
 */
proto.ocap.StakeSummary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ocap.BigUint;
      reader.readMessage(value,proto.ocap.BigUint.deserializeBinaryFromReader);
      msg.setTotalStakes(value);
      break;
    case 2:
      var value = new proto.ocap.BigUint;
      reader.readMessage(value,proto.ocap.BigUint.deserializeBinaryFromReader);
      msg.setTotalUnstakes(value);
      break;
    case 3:
      var value = new proto.ocap.StateContext;
      reader.readMessage(value,proto.ocap.StateContext.deserializeBinaryFromReader);
      msg.setContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.StakeSummary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.StakeSummary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.StakeSummary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.StakeSummary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalStakes();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ocap.BigUint.serializeBinaryToWriter
    );
  }
  f = message.getTotalUnstakes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ocap.BigUint.serializeBinaryToWriter
    );
  }
  f = message.getContext();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ocap.StateContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional BigUint total_stakes = 1;
 * @return {?proto.ocap.BigUint}
 */
proto.ocap.StakeSummary.prototype.getTotalStakes = function() {
  return /** @type{?proto.ocap.BigUint} */ (
    jspb.Message.getWrapperField(this, proto.ocap.BigUint, 1));
};


/**
 * @param {?proto.ocap.BigUint|undefined} value
 * @return {!proto.ocap.StakeSummary} returns this
*/
proto.ocap.StakeSummary.prototype.setTotalStakes = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.StakeSummary} returns this
 */
proto.ocap.StakeSummary.prototype.clearTotalStakes = function() {
  return this.setTotalStakes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.StakeSummary.prototype.hasTotalStakes = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BigUint total_unstakes = 2;
 * @return {?proto.ocap.BigUint}
 */
proto.ocap.StakeSummary.prototype.getTotalUnstakes = function() {
  return /** @type{?proto.ocap.BigUint} */ (
    jspb.Message.getWrapperField(this, proto.ocap.BigUint, 2));
};


/**
 * @param {?proto.ocap.BigUint|undefined} value
 * @return {!proto.ocap.StakeSummary} returns this
*/
proto.ocap.StakeSummary.prototype.setTotalUnstakes = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.StakeSummary} returns this
 */
proto.ocap.StakeSummary.prototype.clearTotalUnstakes = function() {
  return this.setTotalUnstakes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.StakeSummary.prototype.hasTotalUnstakes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StateContext context = 3;
 * @return {?proto.ocap.StateContext}
 */
proto.ocap.StakeSummary.prototype.getContext = function() {
  return /** @type{?proto.ocap.StateContext} */ (
    jspb.Message.getWrapperField(this, proto.ocap.StateContext, 3));
};


/**
 * @param {?proto.ocap.StateContext|undefined} value
 * @return {!proto.ocap.StakeSummary} returns this
*/
proto.ocap.StakeSummary.prototype.setContext = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.StakeSummary} returns this
 */
proto.ocap.StakeSummary.prototype.clearContext = function() {
  return this.setContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.StakeSummary.prototype.hasContext = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.UnconfirmedTxs.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.UnconfirmedTxs.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.UnconfirmedTxs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.UnconfirmedTxs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UnconfirmedTxs.toObject = function(includeInstance, msg) {
  var f, obj = {
    nTxs: jspb.Message.getFieldWithDefault(msg, 1, 0),
    txsList: jspb.Message.toObjectList(msg.getTxsList(),
    proto.ocap.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.UnconfirmedTxs}
 */
proto.ocap.UnconfirmedTxs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.UnconfirmedTxs;
  return proto.ocap.UnconfirmedTxs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.UnconfirmedTxs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.UnconfirmedTxs}
 */
proto.ocap.UnconfirmedTxs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNTxs(value);
      break;
    case 2:
      var value = new proto.ocap.Transaction;
      reader.readMessage(value,proto.ocap.Transaction.deserializeBinaryFromReader);
      msg.addTxs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.UnconfirmedTxs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.UnconfirmedTxs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.UnconfirmedTxs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UnconfirmedTxs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNTxs();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getTxsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ocap.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 n_txs = 1;
 * @return {number}
 */
proto.ocap.UnconfirmedTxs.prototype.getNTxs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.UnconfirmedTxs} returns this
 */
proto.ocap.UnconfirmedTxs.prototype.setNTxs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Transaction txs = 2;
 * @return {!Array<!proto.ocap.Transaction>}
 */
proto.ocap.UnconfirmedTxs.prototype.getTxsList = function() {
  return /** @type{!Array<!proto.ocap.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.Transaction, 2));
};


/**
 * @param {!Array<!proto.ocap.Transaction>} value
 * @return {!proto.ocap.UnconfirmedTxs} returns this
*/
proto.ocap.UnconfirmedTxs.prototype.setTxsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ocap.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.Transaction}
 */
proto.ocap.UnconfirmedTxs.prototype.addTxs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ocap.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.UnconfirmedTxs} returns this
 */
proto.ocap.UnconfirmedTxs.prototype.clearTxsList = function() {
  return this.setTxsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.NetInfo.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.NetInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.NetInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.NetInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NetInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    listening: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    listenersList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    nPeers: jspb.Message.getFieldWithDefault(msg, 3, 0),
    peersList: jspb.Message.toObjectList(msg.getPeersList(),
    proto.ocap.PeerInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.NetInfo}
 */
proto.ocap.NetInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.NetInfo;
  return proto.ocap.NetInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.NetInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.NetInfo}
 */
proto.ocap.NetInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setListening(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addListeners(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNPeers(value);
      break;
    case 4:
      var value = new proto.ocap.PeerInfo;
      reader.readMessage(value,proto.ocap.PeerInfo.deserializeBinaryFromReader);
      msg.addPeers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.NetInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.NetInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.NetInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NetInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getListening();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getListenersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getNPeers();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPeersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ocap.PeerInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool listening = 1;
 * @return {boolean}
 */
proto.ocap.NetInfo.prototype.getListening = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ocap.NetInfo} returns this
 */
proto.ocap.NetInfo.prototype.setListening = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated string listeners = 2;
 * @return {!Array<string>}
 */
proto.ocap.NetInfo.prototype.getListenersList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.NetInfo} returns this
 */
proto.ocap.NetInfo.prototype.setListenersList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.NetInfo} returns this
 */
proto.ocap.NetInfo.prototype.addListeners = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.NetInfo} returns this
 */
proto.ocap.NetInfo.prototype.clearListenersList = function() {
  return this.setListenersList([]);
};


/**
 * optional uint32 n_peers = 3;
 * @return {number}
 */
proto.ocap.NetInfo.prototype.getNPeers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.NetInfo} returns this
 */
proto.ocap.NetInfo.prototype.setNPeers = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated PeerInfo peers = 4;
 * @return {!Array<!proto.ocap.PeerInfo>}
 */
proto.ocap.NetInfo.prototype.getPeersList = function() {
  return /** @type{!Array<!proto.ocap.PeerInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.PeerInfo, 4));
};


/**
 * @param {!Array<!proto.ocap.PeerInfo>} value
 * @return {!proto.ocap.NetInfo} returns this
*/
proto.ocap.NetInfo.prototype.setPeersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ocap.PeerInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.PeerInfo}
 */
proto.ocap.NetInfo.prototype.addPeers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ocap.PeerInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.NetInfo} returns this
 */
proto.ocap.NetInfo.prototype.clearPeersList = function() {
  return this.setPeersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.GeoInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.GeoInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.GeoInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.GeoInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    city: jspb.Message.getFieldWithDefault(msg, 1, ""),
    country: jspb.Message.getFieldWithDefault(msg, 2, ""),
    latitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    longitude: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.GeoInfo}
 */
proto.ocap.GeoInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.GeoInfo;
  return proto.ocap.GeoInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.GeoInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.GeoInfo}
 */
proto.ocap.GeoInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLatitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setLongitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.GeoInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.GeoInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.GeoInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.GeoInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string city = 1;
 * @return {string}
 */
proto.ocap.GeoInfo.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.GeoInfo} returns this
 */
proto.ocap.GeoInfo.prototype.setCity = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string country = 2;
 * @return {string}
 */
proto.ocap.GeoInfo.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.GeoInfo} returns this
 */
proto.ocap.GeoInfo.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional float latitude = 3;
 * @return {number}
 */
proto.ocap.GeoInfo.prototype.getLatitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.GeoInfo} returns this
 */
proto.ocap.GeoInfo.prototype.setLatitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float longitude = 4;
 * @return {number}
 */
proto.ocap.GeoInfo.prototype.getLongitude = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.GeoInfo} returns this
 */
proto.ocap.GeoInfo.prototype.setLongitude = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.PeerInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.PeerInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.PeerInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.PeerInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    network: jspb.Message.getFieldWithDefault(msg, 2, ""),
    consensusVersion: jspb.Message.getFieldWithDefault(msg, 3, ""),
    moniker: jspb.Message.getFieldWithDefault(msg, 4, ""),
    ip: jspb.Message.getFieldWithDefault(msg, 5, ""),
    geoInfo: (f = msg.getGeoInfo()) && proto.ocap.GeoInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.PeerInfo}
 */
proto.ocap.PeerInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.PeerInfo;
  return proto.ocap.PeerInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.PeerInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.PeerInfo}
 */
proto.ocap.PeerInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setConsensusVersion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMoniker(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 6:
      var value = new proto.ocap.GeoInfo;
      reader.readMessage(value,proto.ocap.GeoInfo.deserializeBinaryFromReader);
      msg.setGeoInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.PeerInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.PeerInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.PeerInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.PeerInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNetwork();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConsensusVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMoniker();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ocap.GeoInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ocap.PeerInfo.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.PeerInfo} returns this
 */
proto.ocap.PeerInfo.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string network = 2;
 * @return {string}
 */
proto.ocap.PeerInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.PeerInfo} returns this
 */
proto.ocap.PeerInfo.prototype.setNetwork = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string consensus_version = 3;
 * @return {string}
 */
proto.ocap.PeerInfo.prototype.getConsensusVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.PeerInfo} returns this
 */
proto.ocap.PeerInfo.prototype.setConsensusVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string moniker = 4;
 * @return {string}
 */
proto.ocap.PeerInfo.prototype.getMoniker = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.PeerInfo} returns this
 */
proto.ocap.PeerInfo.prototype.setMoniker = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string ip = 5;
 * @return {string}
 */
proto.ocap.PeerInfo.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.PeerInfo} returns this
 */
proto.ocap.PeerInfo.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional GeoInfo geo_info = 6;
 * @return {?proto.ocap.GeoInfo}
 */
proto.ocap.PeerInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.ocap.GeoInfo} */ (
    jspb.Message.getWrapperField(this, proto.ocap.GeoInfo, 6));
};


/**
 * @param {?proto.ocap.GeoInfo|undefined} value
 * @return {!proto.ocap.PeerInfo} returns this
*/
proto.ocap.PeerInfo.prototype.setGeoInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.PeerInfo} returns this
 */
proto.ocap.PeerInfo.prototype.clearGeoInfo = function() {
  return this.setGeoInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.PeerInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.ValidatorsInfo.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ValidatorsInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ValidatorsInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ValidatorsInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ValidatorsInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockHeight: jspb.Message.getFieldWithDefault(msg, 1, ""),
    validatorsList: jspb.Message.toObjectList(msg.getValidatorsList(),
    proto.ocap.ValidatorInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ValidatorsInfo}
 */
proto.ocap.ValidatorsInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ValidatorsInfo;
  return proto.ocap.ValidatorsInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ValidatorsInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ValidatorsInfo}
 */
proto.ocap.ValidatorsInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockHeight(value);
      break;
    case 2:
      var value = new proto.ocap.ValidatorInfo;
      reader.readMessage(value,proto.ocap.ValidatorInfo.deserializeBinaryFromReader);
      msg.addValidators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ValidatorsInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ValidatorsInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ValidatorsInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ValidatorsInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockHeight();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValidatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ocap.ValidatorInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string block_height = 1;
 * @return {string}
 */
proto.ocap.ValidatorsInfo.prototype.getBlockHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ValidatorsInfo} returns this
 */
proto.ocap.ValidatorsInfo.prototype.setBlockHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ValidatorInfo validators = 2;
 * @return {!Array<!proto.ocap.ValidatorInfo>}
 */
proto.ocap.ValidatorsInfo.prototype.getValidatorsList = function() {
  return /** @type{!Array<!proto.ocap.ValidatorInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.ValidatorInfo, 2));
};


/**
 * @param {!Array<!proto.ocap.ValidatorInfo>} value
 * @return {!proto.ocap.ValidatorsInfo} returns this
*/
proto.ocap.ValidatorsInfo.prototype.setValidatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ocap.ValidatorInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.ValidatorInfo}
 */
proto.ocap.ValidatorsInfo.prototype.addValidators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ocap.ValidatorInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ValidatorsInfo} returns this
 */
proto.ocap.ValidatorsInfo.prototype.clearValidatorsList = function() {
  return this.setValidatorsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ValidatorInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ValidatorInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ValidatorInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ValidatorInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubKey: (f = msg.getPubKey()) && vendor_pb.PubKey.toObject(includeInstance, f),
    votingPower: jspb.Message.getFieldWithDefault(msg, 3, ""),
    proposerPriority: jspb.Message.getFieldWithDefault(msg, 4, ""),
    name: jspb.Message.getFieldWithDefault(msg, 5, ""),
    geoInfo: (f = msg.getGeoInfo()) && proto.ocap.GeoInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ValidatorInfo}
 */
proto.ocap.ValidatorInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ValidatorInfo;
  return proto.ocap.ValidatorInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ValidatorInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ValidatorInfo}
 */
proto.ocap.ValidatorInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = new vendor_pb.PubKey;
      reader.readMessage(value,vendor_pb.PubKey.deserializeBinaryFromReader);
      msg.setPubKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVotingPower(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setProposerPriority(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 6:
      var value = new proto.ocap.GeoInfo;
      reader.readMessage(value,proto.ocap.GeoInfo.deserializeBinaryFromReader);
      msg.setGeoInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ValidatorInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ValidatorInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ValidatorInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ValidatorInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPubKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      vendor_pb.PubKey.serializeBinaryToWriter
    );
  }
  f = message.getVotingPower();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getProposerPriority();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGeoInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ocap.GeoInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.ValidatorInfo.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ValidatorInfo} returns this
 */
proto.ocap.ValidatorInfo.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional vendor.PubKey pub_key = 2;
 * @return {?proto.vendor.PubKey}
 */
proto.ocap.ValidatorInfo.prototype.getPubKey = function() {
  return /** @type{?proto.vendor.PubKey} */ (
    jspb.Message.getWrapperField(this, vendor_pb.PubKey, 2));
};


/**
 * @param {?proto.vendor.PubKey|undefined} value
 * @return {!proto.ocap.ValidatorInfo} returns this
*/
proto.ocap.ValidatorInfo.prototype.setPubKey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.ValidatorInfo} returns this
 */
proto.ocap.ValidatorInfo.prototype.clearPubKey = function() {
  return this.setPubKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.ValidatorInfo.prototype.hasPubKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string voting_power = 3;
 * @return {string}
 */
proto.ocap.ValidatorInfo.prototype.getVotingPower = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ValidatorInfo} returns this
 */
proto.ocap.ValidatorInfo.prototype.setVotingPower = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string proposer_priority = 4;
 * @return {string}
 */
proto.ocap.ValidatorInfo.prototype.getProposerPriority = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ValidatorInfo} returns this
 */
proto.ocap.ValidatorInfo.prototype.setProposerPriority = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string name = 5;
 * @return {string}
 */
proto.ocap.ValidatorInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ValidatorInfo} returns this
 */
proto.ocap.ValidatorInfo.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional GeoInfo geo_info = 6;
 * @return {?proto.ocap.GeoInfo}
 */
proto.ocap.ValidatorInfo.prototype.getGeoInfo = function() {
  return /** @type{?proto.ocap.GeoInfo} */ (
    jspb.Message.getWrapperField(this, proto.ocap.GeoInfo, 6));
};


/**
 * @param {?proto.ocap.GeoInfo|undefined} value
 * @return {!proto.ocap.ValidatorInfo} returns this
*/
proto.ocap.ValidatorInfo.prototype.setGeoInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.ValidatorInfo} returns this
 */
proto.ocap.ValidatorInfo.prototype.clearGeoInfo = function() {
  return this.setGeoInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.ValidatorInfo.prototype.hasGeoInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ForgeToken.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ForgeToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ForgeToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ForgeToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 3, ""),
    description: jspb.Message.getFieldWithDefault(msg, 4, ""),
    icon: msg.getIcon(),
    decimal: jspb.Message.getFieldWithDefault(msg, 6, 0),
    initialSupply: jspb.Message.getFieldWithDefault(msg, 7, ""),
    totalSupply: jspb.Message.getFieldWithDefault(msg, 8, ""),
    inflationRate: jspb.Message.getFieldWithDefault(msg, 9, 0),
    address: jspb.Message.getFieldWithDefault(msg, 10, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ForgeToken}
 */
proto.ocap.ForgeToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ForgeToken;
  return proto.ocap.ForgeToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ForgeToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ForgeToken}
 */
proto.ocap.ForgeToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIcon(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimal(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialSupply(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setTotalSupply(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInflationRate(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ForgeToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ForgeToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ForgeToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ForgeToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getIcon_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getInitialSupply();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getTotalSupply();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getInflationRate();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unit = 3;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string description = 4;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional bytes icon = 5;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.ForgeToken.prototype.getIcon = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes icon = 5;
 * This is a type-conversion wrapper around `getIcon()`
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getIcon_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIcon()));
};


/**
 * optional bytes icon = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIcon()`
 * @return {!Uint8Array}
 */
proto.ocap.ForgeToken.prototype.getIcon_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIcon()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setIcon = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional uint32 decimal = 6;
 * @return {number}
 */
proto.ocap.ForgeToken.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setDecimal = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string initial_supply = 7;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getInitialSupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setInitialSupply = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string total_supply = 8;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getTotalSupply = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setTotalSupply = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional uint32 inflation_rate = 9;
 * @return {number}
 */
proto.ocap.ForgeToken.prototype.getInflationRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setInflationRate = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional string address = 10;
 * @return {string}
 */
proto.ocap.ForgeToken.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForgeToken} returns this
 */
proto.ocap.ForgeToken.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.UpgradeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.UpgradeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.UpgradeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UpgradeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    height: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.UpgradeInfo}
 */
proto.ocap.UpgradeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.UpgradeInfo;
  return proto.ocap.UpgradeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.UpgradeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.UpgradeInfo}
 */
proto.ocap.UpgradeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeight(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.UpgradeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.UpgradeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.UpgradeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.UpgradeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeight();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string height = 1;
 * @return {string}
 */
proto.ocap.UpgradeInfo.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.UpgradeInfo} returns this
 */
proto.ocap.UpgradeInfo.prototype.setHeight = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.ocap.UpgradeInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.UpgradeInfo} returns this
 */
proto.ocap.UpgradeInfo.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.WithdrawItem.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.WithdrawItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.WithdrawItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.WithdrawItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.ocap.BigUint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.WithdrawItem}
 */
proto.ocap.WithdrawItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.WithdrawItem;
  return proto.ocap.WithdrawItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.WithdrawItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.WithdrawItem}
 */
proto.ocap.WithdrawItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    case 2:
      var value = new proto.ocap.BigUint;
      reader.readMessage(value,proto.ocap.BigUint.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.WithdrawItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.WithdrawItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.WithdrawItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.WithdrawItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ocap.BigUint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.ocap.WithdrawItem.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.WithdrawItem} returns this
 */
proto.ocap.WithdrawItem.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional BigUint value = 2;
 * @return {?proto.ocap.BigUint}
 */
proto.ocap.WithdrawItem.prototype.getValue = function() {
  return /** @type{?proto.ocap.BigUint} */ (
    jspb.Message.getWrapperField(this, proto.ocap.BigUint, 2));
};


/**
 * @param {?proto.ocap.BigUint|undefined} value
 * @return {!proto.ocap.WithdrawItem} returns this
*/
proto.ocap.WithdrawItem.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.WithdrawItem} returns this
 */
proto.ocap.WithdrawItem.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.WithdrawItem.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.AccountConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.AccountConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.AccountConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.AccountConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pk: msg.getPk(),
    balance: (f = msg.getBalance()) && proto.ocap.BigUint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.AccountConfig}
 */
proto.ocap.AccountConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.AccountConfig;
  return proto.ocap.AccountConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.AccountConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.AccountConfig}
 */
proto.ocap.AccountConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPk(value);
      break;
    case 3:
      var value = new proto.ocap.BigUint;
      reader.readMessage(value,proto.ocap.BigUint.deserializeBinaryFromReader);
      msg.setBalance(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.AccountConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.AccountConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.AccountConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.AccountConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBalance();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ocap.BigUint.serializeBinaryToWriter
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.AccountConfig.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.AccountConfig} returns this
 */
proto.ocap.AccountConfig.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes pk = 2;
 * @return {!(string|Uint8Array)}
 */
proto.ocap.AccountConfig.prototype.getPk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes pk = 2;
 * This is a type-conversion wrapper around `getPk()`
 * @return {string}
 */
proto.ocap.AccountConfig.prototype.getPk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPk()));
};


/**
 * optional bytes pk = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPk()`
 * @return {!Uint8Array}
 */
proto.ocap.AccountConfig.prototype.getPk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ocap.AccountConfig} returns this
 */
proto.ocap.AccountConfig.prototype.setPk = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional BigUint balance = 3;
 * @return {?proto.ocap.BigUint}
 */
proto.ocap.AccountConfig.prototype.getBalance = function() {
  return /** @type{?proto.ocap.BigUint} */ (
    jspb.Message.getWrapperField(this, proto.ocap.BigUint, 3));
};


/**
 * @param {?proto.ocap.BigUint|undefined} value
 * @return {!proto.ocap.AccountConfig} returns this
*/
proto.ocap.AccountConfig.prototype.setBalance = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ocap.AccountConfig} returns this
 */
proto.ocap.AccountConfig.prototype.clearBalance = function() {
  return this.setBalance(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ocap.AccountConfig.prototype.hasBalance = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.Evidence.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.Evidence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.Evidence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Evidence.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.Evidence}
 */
proto.ocap.Evidence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.Evidence;
  return proto.ocap.Evidence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.Evidence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.Evidence}
 */
proto.ocap.Evidence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.Evidence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.Evidence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.Evidence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.Evidence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string hash = 1;
 * @return {string}
 */
proto.ocap.Evidence.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.Evidence} returns this
 */
proto.ocap.Evidence.prototype.setHash = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.NFTEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.NFTEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.NFTEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NFTEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scope: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.NFTEndpoint}
 */
proto.ocap.NFTEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.NFTEndpoint;
  return proto.ocap.NFTEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.NFTEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.NFTEndpoint}
 */
proto.ocap.NFTEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.NFTEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.NFTEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.NFTEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NFTEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScope();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ocap.NFTEndpoint.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTEndpoint} returns this
 */
proto.ocap.NFTEndpoint.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scope = 2;
 * @return {string}
 */
proto.ocap.NFTEndpoint.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTEndpoint} returns this
 */
proto.ocap.NFTEndpoint.prototype.setScope = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.NFTDisplay.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.NFTDisplay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.NFTDisplay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NFTDisplay.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    content: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.NFTDisplay}
 */
proto.ocap.NFTDisplay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.NFTDisplay;
  return proto.ocap.NFTDisplay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.NFTDisplay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.NFTDisplay}
 */
proto.ocap.NFTDisplay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.NFTDisplay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.NFTDisplay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.NFTDisplay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NFTDisplay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.ocap.NFTDisplay.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTDisplay} returns this
 */
proto.ocap.NFTDisplay.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.ocap.NFTDisplay.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTDisplay} returns this
 */
proto.ocap.NFTDisplay.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.NFTIssuer.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.NFTIssuer.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.NFTIssuer} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NFTIssuer.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pk: jspb.Message.getFieldWithDefault(msg, 2, ""),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.NFTIssuer}
 */
proto.ocap.NFTIssuer.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.NFTIssuer;
  return proto.ocap.NFTIssuer.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.NFTIssuer} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.NFTIssuer}
 */
proto.ocap.NFTIssuer.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPk(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.NFTIssuer.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.NFTIssuer.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.NFTIssuer} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.NFTIssuer.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPk();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ocap.NFTIssuer.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTIssuer} returns this
 */
proto.ocap.NFTIssuer.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pk = 2;
 * @return {string}
 */
proto.ocap.NFTIssuer.prototype.getPk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTIssuer} returns this
 */
proto.ocap.NFTIssuer.prototype.setPk = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.ocap.NFTIssuer.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.NFTIssuer} returns this
 */
proto.ocap.NFTIssuer.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.AssetFactoryHook.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.AssetFactoryHook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.AssetFactoryHook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.AssetFactoryHook.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    hook: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.AssetFactoryHook}
 */
proto.ocap.AssetFactoryHook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.AssetFactoryHook;
  return proto.ocap.AssetFactoryHook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.AssetFactoryHook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.AssetFactoryHook}
 */
proto.ocap.AssetFactoryHook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setHook(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.AssetFactoryHook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.AssetFactoryHook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.AssetFactoryHook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.AssetFactoryHook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getHook();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.ocap.AssetFactoryHook.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.AssetFactoryHook} returns this
 */
proto.ocap.AssetFactoryHook.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.ocap.AssetFactoryHook.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.AssetFactoryHook} returns this
 */
proto.ocap.AssetFactoryHook.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string hook = 3;
 * @return {string}
 */
proto.ocap.AssetFactoryHook.prototype.getHook = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.AssetFactoryHook} returns this
 */
proto.ocap.AssetFactoryHook.prototype.setHook = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.IndexedTokenInput.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.IndexedTokenInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.IndexedTokenInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.IndexedTokenInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    decimal: jspb.Message.getFieldWithDefault(msg, 3, 0),
    unit: jspb.Message.getFieldWithDefault(msg, 4, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.IndexedTokenInput}
 */
proto.ocap.IndexedTokenInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.IndexedTokenInput;
  return proto.ocap.IndexedTokenInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.IndexedTokenInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.IndexedTokenInput}
 */
proto.ocap.IndexedTokenInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDecimal(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.IndexedTokenInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.IndexedTokenInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.IndexedTokenInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.IndexedTokenInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDecimal();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.ocap.IndexedTokenInput.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.IndexedTokenInput} returns this
 */
proto.ocap.IndexedTokenInput.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.ocap.IndexedTokenInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.IndexedTokenInput} returns this
 */
proto.ocap.IndexedTokenInput.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 decimal = 3;
 * @return {number}
 */
proto.ocap.IndexedTokenInput.prototype.getDecimal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.IndexedTokenInput} returns this
 */
proto.ocap.IndexedTokenInput.prototype.setDecimal = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string unit = 4;
 * @return {string}
 */
proto.ocap.IndexedTokenInput.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.IndexedTokenInput} returns this
 */
proto.ocap.IndexedTokenInput.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string symbol = 5;
 * @return {string}
 */
proto.ocap.IndexedTokenInput.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.IndexedTokenInput} returns this
 */
proto.ocap.IndexedTokenInput.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.IndexedFactoryInput.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.IndexedFactoryInput.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.IndexedFactoryInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.IndexedFactoryInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.IndexedFactoryInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.ocap.IndexedTokenInput.toObject, includeInstance),
    assetsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.ocap.VariableInput.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.IndexedFactoryInput}
 */
proto.ocap.IndexedFactoryInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.IndexedFactoryInput;
  return proto.ocap.IndexedFactoryInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.IndexedFactoryInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.IndexedFactoryInput}
 */
proto.ocap.IndexedFactoryInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 2:
      var value = new proto.ocap.IndexedTokenInput;
      reader.readMessage(value,proto.ocap.IndexedTokenInput.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAssets(value);
      break;
    case 4:
      var value = new proto.ocap.VariableInput;
      reader.readMessage(value,proto.ocap.VariableInput.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.IndexedFactoryInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.IndexedFactoryInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.IndexedFactoryInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.IndexedFactoryInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ocap.IndexedTokenInput.serializeBinaryToWriter
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.ocap.VariableInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional string value = 1;
 * @return {string}
 */
proto.ocap.IndexedFactoryInput.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.IndexedFactoryInput} returns this
 */
proto.ocap.IndexedFactoryInput.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated IndexedTokenInput tokens = 2;
 * @return {!Array<!proto.ocap.IndexedTokenInput>}
 */
proto.ocap.IndexedFactoryInput.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.ocap.IndexedTokenInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.IndexedTokenInput, 2));
};


/**
 * @param {!Array<!proto.ocap.IndexedTokenInput>} value
 * @return {!proto.ocap.IndexedFactoryInput} returns this
*/
proto.ocap.IndexedFactoryInput.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ocap.IndexedTokenInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.IndexedTokenInput}
 */
proto.ocap.IndexedFactoryInput.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ocap.IndexedTokenInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.IndexedFactoryInput} returns this
 */
proto.ocap.IndexedFactoryInput.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated string assets = 3;
 * @return {!Array<string>}
 */
proto.ocap.IndexedFactoryInput.prototype.getAssetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.IndexedFactoryInput} returns this
 */
proto.ocap.IndexedFactoryInput.prototype.setAssetsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.IndexedFactoryInput} returns this
 */
proto.ocap.IndexedFactoryInput.prototype.addAssets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.IndexedFactoryInput} returns this
 */
proto.ocap.IndexedFactoryInput.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};


/**
 * repeated VariableInput variables = 4;
 * @return {!Array<!proto.ocap.VariableInput>}
 */
proto.ocap.IndexedFactoryInput.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.ocap.VariableInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.VariableInput, 4));
};


/**
 * @param {!Array<!proto.ocap.VariableInput>} value
 * @return {!proto.ocap.IndexedFactoryInput} returns this
*/
proto.ocap.IndexedFactoryInput.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.ocap.VariableInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.VariableInput}
 */
proto.ocap.IndexedFactoryInput.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.ocap.VariableInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.IndexedFactoryInput} returns this
 */
proto.ocap.IndexedFactoryInput.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.RollupValidator.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.RollupValidator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.RollupValidator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.RollupValidator.toObject = function(includeInstance, msg) {
  var f, obj = {
    pk: jspb.Message.getFieldWithDefault(msg, 1, ""),
    address: jspb.Message.getFieldWithDefault(msg, 2, ""),
    endpoint: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.RollupValidator}
 */
proto.ocap.RollupValidator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.RollupValidator;
  return proto.ocap.RollupValidator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.RollupValidator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.RollupValidator}
 */
proto.ocap.RollupValidator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPk(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEndpoint(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.RollupValidator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.RollupValidator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.RollupValidator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.RollupValidator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPk();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEndpoint();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string pk = 1;
 * @return {string}
 */
proto.ocap.RollupValidator.prototype.getPk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.RollupValidator} returns this
 */
proto.ocap.RollupValidator.prototype.setPk = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string address = 2;
 * @return {string}
 */
proto.ocap.RollupValidator.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.RollupValidator} returns this
 */
proto.ocap.RollupValidator.prototype.setAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string endpoint = 3;
 * @return {string}
 */
proto.ocap.RollupValidator.prototype.getEndpoint = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.RollupValidator} returns this
 */
proto.ocap.RollupValidator.prototype.setEndpoint = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.RollupSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.RollupSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.RollupSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.RollupSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    signer: jspb.Message.getFieldWithDefault(msg, 1, ""),
    signature: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.RollupSignature}
 */
proto.ocap.RollupSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.RollupSignature;
  return proto.ocap.RollupSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.RollupSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.RollupSignature}
 */
proto.ocap.RollupSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigner(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.RollupSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.RollupSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.RollupSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.RollupSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigner();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string signer = 1;
 * @return {string}
 */
proto.ocap.RollupSignature.prototype.getSigner = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.RollupSignature} returns this
 */
proto.ocap.RollupSignature.prototype.setSigner = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string signature = 2;
 * @return {string}
 */
proto.ocap.RollupSignature.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.RollupSignature} returns this
 */
proto.ocap.RollupSignature.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ForeignToken.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ForeignToken.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ForeignToken} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ForeignToken.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    contractAddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chainType: jspb.Message.getFieldWithDefault(msg, 3, ""),
    chainName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    chainId: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ForeignToken}
 */
proto.ocap.ForeignToken.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ForeignToken;
  return proto.ocap.ForeignToken.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ForeignToken} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ForeignToken}
 */
proto.ocap.ForeignToken.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContractAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setChainName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChainId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ForeignToken.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ForeignToken.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ForeignToken} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ForeignToken.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getContractAddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChainType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getChainName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getChainId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.ocap.ForeignToken.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForeignToken} returns this
 */
proto.ocap.ForeignToken.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string contract_address = 2;
 * @return {string}
 */
proto.ocap.ForeignToken.prototype.getContractAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForeignToken} returns this
 */
proto.ocap.ForeignToken.prototype.setContractAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string chain_type = 3;
 * @return {string}
 */
proto.ocap.ForeignToken.prototype.getChainType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForeignToken} returns this
 */
proto.ocap.ForeignToken.prototype.setChainType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string chain_name = 4;
 * @return {string}
 */
proto.ocap.ForeignToken.prototype.getChainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.ForeignToken} returns this
 */
proto.ocap.ForeignToken.prototype.setChainName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 chain_id = 5;
 * @return {number}
 */
proto.ocap.ForeignToken.prototype.getChainId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ForeignToken} returns this
 */
proto.ocap.ForeignToken.prototype.setChainId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.RevokedStake.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.RevokedStake.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.RevokedStake.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.RevokedStake} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.RevokedStake.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokensList: jspb.Message.toObjectList(msg.getTokensList(),
    proto.ocap.TokenInput.toObject, includeInstance),
    assetsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.RevokedStake}
 */
proto.ocap.RevokedStake.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.RevokedStake;
  return proto.ocap.RevokedStake.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.RevokedStake} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.RevokedStake}
 */
proto.ocap.RevokedStake.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ocap.TokenInput;
      reader.readMessage(value,proto.ocap.TokenInput.deserializeBinaryFromReader);
      msg.addTokens(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.RevokedStake.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.RevokedStake.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.RevokedStake} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.RevokedStake.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokensList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ocap.TokenInput.serializeBinaryToWriter
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated TokenInput tokens = 1;
 * @return {!Array<!proto.ocap.TokenInput>}
 */
proto.ocap.RevokedStake.prototype.getTokensList = function() {
  return /** @type{!Array<!proto.ocap.TokenInput>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.TokenInput, 1));
};


/**
 * @param {!Array<!proto.ocap.TokenInput>} value
 * @return {!proto.ocap.RevokedStake} returns this
*/
proto.ocap.RevokedStake.prototype.setTokensList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ocap.TokenInput=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.TokenInput}
 */
proto.ocap.RevokedStake.prototype.addTokens = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ocap.TokenInput, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.RevokedStake} returns this
 */
proto.ocap.RevokedStake.prototype.clearTokensList = function() {
  return this.setTokensList([]);
};


/**
 * repeated string assets = 2;
 * @return {!Array<string>}
 */
proto.ocap.RevokedStake.prototype.getAssetsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.RevokedStake} returns this
 */
proto.ocap.RevokedStake.prototype.setAssetsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.RevokedStake} returns this
 */
proto.ocap.RevokedStake.prototype.addAssets = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.RevokedStake} returns this
 */
proto.ocap.RevokedStake.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ocap.ForgeStats.repeatedFields_ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.ForgeStats.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.ForgeStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.ForgeStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ForgeStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    numBlocksList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    numTxsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    numStakesList: jspb.Message.toObjectList(msg.getNumStakesList(),
    proto.ocap.BigUint.toObject, includeInstance),
    numValidatorsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    numAccountMigrateTxsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    numCreateAssetTxsList: (f = jspb.Message.getRepeatedField(msg, 6)) == null ? undefined : f,
    numConsensusUpgradeTxsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    numDeclareTxsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    numDeclareFileTxsList: (f = jspb.Message.getRepeatedField(msg, 9)) == null ? undefined : f,
    numExchangeTxsList: (f = jspb.Message.getRepeatedField(msg, 10)) == null ? undefined : f,
    numStakeTxsList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f,
    numSysUpgradeTxsList: (f = jspb.Message.getRepeatedField(msg, 12)) == null ? undefined : f,
    numTransferTxsList: (f = jspb.Message.getRepeatedField(msg, 13)) == null ? undefined : f,
    numUpdateAssetTxsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    numConsumeAssetTxsList: (f = jspb.Message.getRepeatedField(msg, 15)) == null ? undefined : f,
    tpsList: (f = jspb.Message.getRepeatedField(msg, 16)) == null ? undefined : f,
    maxTps: jspb.Message.getFieldWithDefault(msg, 17, 0),
    avgTps: jspb.Message.getFieldWithDefault(msg, 18, 0),
    avgBlockTime: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.ForgeStats}
 */
proto.ocap.ForgeStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.ForgeStats;
  return proto.ocap.ForgeStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.ForgeStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.ForgeStats}
 */
proto.ocap.ForgeStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumBlocks(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumTxs(value);
      break;
    case 3:
      var value = new proto.ocap.BigUint;
      reader.readMessage(value,proto.ocap.BigUint.deserializeBinaryFromReader);
      msg.addNumStakes(value);
      break;
    case 4:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNumValidators(values[i]);
      }
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumAccountMigrateTxs(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumCreateAssetTxs(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNumConsensusUpgradeTxs(values[i]);
      }
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumDeclareTxs(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumDeclareFileTxs(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumExchangeTxs(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumStakeTxs(value);
      break;
    case 12:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addNumSysUpgradeTxs(values[i]);
      }
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumTransferTxs(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumUpdateAssetTxs(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.addNumConsumeAssetTxs(value);
      break;
    case 16:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedUint32() : [reader.readUint32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addTps(values[i]);
      }
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxTps(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAvgTps(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAvgBlockTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.ForgeStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.ForgeStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.ForgeStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.ForgeStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNumBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getNumTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getNumStakesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ocap.BigUint.serializeBinaryToWriter
    );
  }
  f = message.getNumValidatorsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getNumAccountMigrateTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getNumCreateAssetTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      6,
      f
    );
  }
  f = message.getNumConsensusUpgradeTxsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      7,
      f
    );
  }
  f = message.getNumDeclareTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getNumDeclareFileTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      9,
      f
    );
  }
  f = message.getNumExchangeTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      10,
      f
    );
  }
  f = message.getNumStakeTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
  f = message.getNumSysUpgradeTxsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      12,
      f
    );
  }
  f = message.getNumTransferTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      13,
      f
    );
  }
  f = message.getNumUpdateAssetTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getNumConsumeAssetTxsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      15,
      f
    );
  }
  f = message.getTpsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      16,
      f
    );
  }
  f = message.getMaxTps();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = message.getAvgTps();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = message.getAvgBlockTime();
  if (f !== 0.0) {
    writer.writeFloat(
      19,
      f
    );
  }
};


/**
 * repeated string num_blocks = 1;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumBlocksList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumBlocksList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumBlocks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumBlocksList = function() {
  return this.setNumBlocksList([]);
};


/**
 * repeated string num_txs = 2;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumTxsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumTxsList = function() {
  return this.setNumTxsList([]);
};


/**
 * repeated BigUint num_stakes = 3;
 * @return {!Array<!proto.ocap.BigUint>}
 */
proto.ocap.ForgeStats.prototype.getNumStakesList = function() {
  return /** @type{!Array<!proto.ocap.BigUint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ocap.BigUint, 3));
};


/**
 * @param {!Array<!proto.ocap.BigUint>} value
 * @return {!proto.ocap.ForgeStats} returns this
*/
proto.ocap.ForgeStats.prototype.setNumStakesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ocap.BigUint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ocap.BigUint}
 */
proto.ocap.ForgeStats.prototype.addNumStakes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ocap.BigUint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumStakesList = function() {
  return this.setNumStakesList([]);
};


/**
 * repeated uint32 num_validators = 4;
 * @return {!Array<number>}
 */
proto.ocap.ForgeStats.prototype.getNumValidatorsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumValidatorsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumValidators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumValidatorsList = function() {
  return this.setNumValidatorsList([]);
};


/**
 * repeated string num_account_migrate_txs = 5;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumAccountMigrateTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumAccountMigrateTxsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumAccountMigrateTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumAccountMigrateTxsList = function() {
  return this.setNumAccountMigrateTxsList([]);
};


/**
 * repeated string num_create_asset_txs = 6;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumCreateAssetTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 6));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumCreateAssetTxsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumCreateAssetTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumCreateAssetTxsList = function() {
  return this.setNumCreateAssetTxsList([]);
};


/**
 * repeated uint32 num_consensus_upgrade_txs = 7;
 * @return {!Array<number>}
 */
proto.ocap.ForgeStats.prototype.getNumConsensusUpgradeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumConsensusUpgradeTxsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumConsensusUpgradeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumConsensusUpgradeTxsList = function() {
  return this.setNumConsensusUpgradeTxsList([]);
};


/**
 * repeated string num_declare_txs = 8;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumDeclareTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumDeclareTxsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumDeclareTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumDeclareTxsList = function() {
  return this.setNumDeclareTxsList([]);
};


/**
 * repeated string num_declare_file_txs = 9;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumDeclareFileTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 9));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumDeclareFileTxsList = function(value) {
  return jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumDeclareFileTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumDeclareFileTxsList = function() {
  return this.setNumDeclareFileTxsList([]);
};


/**
 * repeated string num_exchange_txs = 10;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumExchangeTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 10));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumExchangeTxsList = function(value) {
  return jspb.Message.setField(this, 10, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumExchangeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 10, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumExchangeTxsList = function() {
  return this.setNumExchangeTxsList([]);
};


/**
 * repeated string num_stake_txs = 11;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumStakeTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumStakeTxsList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumStakeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumStakeTxsList = function() {
  return this.setNumStakeTxsList([]);
};


/**
 * repeated uint32 num_sys_upgrade_txs = 12;
 * @return {!Array<number>}
 */
proto.ocap.ForgeStats.prototype.getNumSysUpgradeTxsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 12));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumSysUpgradeTxsList = function(value) {
  return jspb.Message.setField(this, 12, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumSysUpgradeTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 12, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumSysUpgradeTxsList = function() {
  return this.setNumSysUpgradeTxsList([]);
};


/**
 * repeated string num_transfer_txs = 13;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumTransferTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 13));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumTransferTxsList = function(value) {
  return jspb.Message.setField(this, 13, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumTransferTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 13, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumTransferTxsList = function() {
  return this.setNumTransferTxsList([]);
};


/**
 * repeated string num_update_asset_txs = 14;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumUpdateAssetTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumUpdateAssetTxsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumUpdateAssetTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumUpdateAssetTxsList = function() {
  return this.setNumUpdateAssetTxsList([]);
};


/**
 * repeated string num_consume_asset_txs = 15;
 * @return {!Array<string>}
 */
proto.ocap.ForgeStats.prototype.getNumConsumeAssetTxsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 15));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setNumConsumeAssetTxsList = function(value) {
  return jspb.Message.setField(this, 15, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addNumConsumeAssetTxs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 15, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearNumConsumeAssetTxsList = function() {
  return this.setNumConsumeAssetTxsList([]);
};


/**
 * repeated uint32 tps = 16;
 * @return {!Array<number>}
 */
proto.ocap.ForgeStats.prototype.getTpsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 16));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setTpsList = function(value) {
  return jspb.Message.setField(this, 16, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.addTps = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 16, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.clearTpsList = function() {
  return this.setTpsList([]);
};


/**
 * optional uint32 max_tps = 17;
 * @return {number}
 */
proto.ocap.ForgeStats.prototype.getMaxTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setMaxTps = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional uint32 avg_tps = 18;
 * @return {number}
 */
proto.ocap.ForgeStats.prototype.getAvgTps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setAvgTps = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional float avg_block_time = 19;
 * @return {number}
 */
proto.ocap.ForgeStats.prototype.getAvgBlockTime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ocap.ForgeStats} returns this
 */
proto.ocap.ForgeStats.prototype.setAvgBlockTime = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ocap.GasEstimate.prototype.toObject = function(opt_includeInstance) {
  return proto.ocap.GasEstimate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ocap.GasEstimate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.GasEstimate.toObject = function(includeInstance, msg) {
  var f, obj = {
    max: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ocap.GasEstimate}
 */
proto.ocap.GasEstimate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ocap.GasEstimate;
  return proto.ocap.GasEstimate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ocap.GasEstimate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ocap.GasEstimate}
 */
proto.ocap.GasEstimate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ocap.GasEstimate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ocap.GasEstimate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ocap.GasEstimate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ocap.GasEstimate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMax();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string max = 1;
 * @return {string}
 */
proto.ocap.GasEstimate.prototype.getMax = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ocap.GasEstimate} returns this
 */
proto.ocap.GasEstimate.prototype.setMax = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.ocap);
