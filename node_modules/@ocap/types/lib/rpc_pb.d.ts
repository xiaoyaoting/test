// package: ocap
// file: rpc.proto

import * as jspb from "google-protobuf";
import * as enum_pb from "./enum_pb";
import * as type_pb from "./type_pb";
import * as state_pb from "./state_pb";
import * as trace_type_pb from "./trace-type_pb";

export class RequestEmpty extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestEmpty;
  static toObject(includeInstance: boolean, msg: RequestEmpty): TRequestEmpty;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestEmpty, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestEmpty;
  static deserializeBinaryFromReader(message: RequestEmpty, reader: jspb.BinaryReader): RequestEmpty;
}

export type TRequestEmpty = {
}

export class RequestPaginated extends jspb.Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestPaginated;
  static toObject(includeInstance: boolean, msg: RequestPaginated): TRequestPaginated;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestPaginated, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestPaginated;
  static deserializeBinaryFromReader(message: RequestPaginated, reader: jspb.BinaryReader): RequestPaginated;
}

export type TRequestPaginated = {
}

export class RequestGetState extends jspb.Message {
  getAddress(): string;
  setAddress(value: string): void;

  clearKeysList(): void;
  getKeysList(): Array<string>;
  setKeysList(value: Array<string>): void;
  addKeys(value: string, index?: number): string;

  getHeight(): number;
  setHeight(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetState;
  static toObject(includeInstance: boolean, msg: RequestGetState): TRequestGetState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetState;
  static deserializeBinaryFromReader(message: RequestGetState, reader: jspb.BinaryReader): RequestGetState;
}

export type TRequestGetState = {
  address: string,
  keys: Array<string>,
  height: number,
}

export class RequestSendTx extends jspb.Message {
  getTx(): string;
  setTx(value: string): void;

  hasWallet(): boolean;
  clearWallet(): void;
  getWallet(): type_pb.TWalletInfo | undefined;
  setWallet(value?: type_pb.TWalletInfo): void;

  getToken(): string;
  setToken(value: string): void;

  getCommit(): boolean;
  setCommit(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestSendTx;
  static toObject(includeInstance: boolean, msg: RequestSendTx): TRequestSendTx;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestSendTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestSendTx;
  static deserializeBinaryFromReader(message: RequestSendTx, reader: jspb.BinaryReader): RequestSendTx;
}

export type TRequestSendTx = {
  tx: string,
  wallet?: type_pb.TWalletInfo,
  token: string,
  commit: boolean,
}

export class ResponseSendTx extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  getHash(): string;
  setHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseSendTx;
  static toObject(includeInstance: boolean, msg: ResponseSendTx): TResponseSendTx;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseSendTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseSendTx;
  static deserializeBinaryFromReader(message: ResponseSendTx, reader: jspb.BinaryReader): ResponseSendTx;
}

export type TResponseSendTx = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  hash: string,
}

export class RequestGetTx extends jspb.Message {
  getHash(): string;
  setHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetTx;
  static toObject(includeInstance: boolean, msg: RequestGetTx): TRequestGetTx;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetTx;
  static deserializeBinaryFromReader(message: RequestGetTx, reader: jspb.BinaryReader): RequestGetTx;
}

export type TRequestGetTx = {
  hash: string,
}

export class ResponseGetTx extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasInfo(): boolean;
  clearInfo(): void;
  getInfo(): type_pb.TTransactionInfo | undefined;
  setInfo(value?: type_pb.TTransactionInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetTx;
  static toObject(includeInstance: boolean, msg: ResponseGetTx): TResponseGetTx;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetTx, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetTx;
  static deserializeBinaryFromReader(message: ResponseGetTx, reader: jspb.BinaryReader): ResponseGetTx;
}

export type TResponseGetTx = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  info?: type_pb.TTransactionInfo,
}

export class RequestGetBlock extends jspb.Message {
  getHeight(): number;
  setHeight(value: number): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetBlock;
  static toObject(includeInstance: boolean, msg: RequestGetBlock): TRequestGetBlock;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetBlock, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetBlock;
  static deserializeBinaryFromReader(message: RequestGetBlock, reader: jspb.BinaryReader): RequestGetBlock;
}

export type TRequestGetBlock = {
  height: number,
}

export class ResponseGetBlock extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasBlock(): boolean;
  clearBlock(): void;
  getBlock(): type_pb.TBlockInfo | undefined;
  setBlock(value?: type_pb.TBlockInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetBlock;
  static toObject(includeInstance: boolean, msg: ResponseGetBlock): TResponseGetBlock;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetBlock, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetBlock;
  static deserializeBinaryFromReader(message: ResponseGetBlock, reader: jspb.BinaryReader): ResponseGetBlock;
}

export type TResponseGetBlock = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  block?: type_pb.TBlockInfo,
}

export class RequestGetBlocks extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  hasHeightFilter(): boolean;
  clearHeightFilter(): void;
  getHeightFilter(): trace_type_pb.TRangeFilter | undefined;
  setHeightFilter(value?: trace_type_pb.TRangeFilter): void;

  getEmptyExcluded(): boolean;
  setEmptyExcluded(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetBlocks;
  static toObject(includeInstance: boolean, msg: RequestGetBlocks): TRequestGetBlocks;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetBlocks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetBlocks;
  static deserializeBinaryFromReader(message: RequestGetBlocks, reader: jspb.BinaryReader): RequestGetBlocks;
}

export type TRequestGetBlocks = {
  paging?: trace_type_pb.TPage,
  heightFilter?: trace_type_pb.TRangeFilter,
  emptyExcluded: boolean,
}

export class ResponseGetBlocks extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearBlocksList(): void;
  getBlocksList(): Array<type_pb.TBlockInfoSimple>;
  setBlocksList(value: Array<type_pb.TBlockInfoSimple>): void;
  addBlocks(value?: type_pb.BlockInfoSimple, index?: number): type_pb.BlockInfoSimple;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetBlocks;
  static toObject(includeInstance: boolean, msg: ResponseGetBlocks): TResponseGetBlocks;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetBlocks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetBlocks;
  static deserializeBinaryFromReader(message: ResponseGetBlocks, reader: jspb.BinaryReader): ResponseGetBlocks;
}

export type TResponseGetBlocks = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  blocks: Array<type_pb.TBlockInfoSimple>,
}

export class ResponseGetAccountState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TAccountState | undefined;
  setState(value?: state_pb.TAccountState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetAccountState;
  static toObject(includeInstance: boolean, msg: ResponseGetAccountState): TResponseGetAccountState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetAccountState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetAccountState;
  static deserializeBinaryFromReader(message: ResponseGetAccountState, reader: jspb.BinaryReader): ResponseGetAccountState;
}

export type TResponseGetAccountState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TAccountState,
}

export class ResponseGetAssetState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TAssetState | undefined;
  setState(value?: state_pb.TAssetState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetAssetState;
  static toObject(includeInstance: boolean, msg: ResponseGetAssetState): TResponseGetAssetState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetAssetState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetAssetState;
  static deserializeBinaryFromReader(message: ResponseGetAssetState, reader: jspb.BinaryReader): ResponseGetAssetState;
}

export type TResponseGetAssetState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TAssetState,
}

export class ResponseGetForgeState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TForgeState | undefined;
  setState(value?: state_pb.TForgeState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetForgeState;
  static toObject(includeInstance: boolean, msg: ResponseGetForgeState): TResponseGetForgeState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetForgeState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetForgeState;
  static deserializeBinaryFromReader(message: ResponseGetForgeState, reader: jspb.BinaryReader): ResponseGetForgeState;
}

export type TResponseGetForgeState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TForgeState,
}

export class ResponseGetDelegateState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TDelegateState | undefined;
  setState(value?: state_pb.TDelegateState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetDelegateState;
  static toObject(includeInstance: boolean, msg: ResponseGetDelegateState): TResponseGetDelegateState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetDelegateState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetDelegateState;
  static deserializeBinaryFromReader(message: ResponseGetDelegateState, reader: jspb.BinaryReader): ResponseGetDelegateState;
}

export type TResponseGetDelegateState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TDelegateState,
}

export class ResponseGetChainInfo extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasInfo(): boolean;
  clearInfo(): void;
  getInfo(): type_pb.TChainInfo | undefined;
  setInfo(value?: type_pb.TChainInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetChainInfo;
  static toObject(includeInstance: boolean, msg: ResponseGetChainInfo): TResponseGetChainInfo;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetChainInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetChainInfo;
  static deserializeBinaryFromReader(message: ResponseGetChainInfo, reader: jspb.BinaryReader): ResponseGetChainInfo;
}

export type TResponseGetChainInfo = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  info?: type_pb.TChainInfo,
}

export class ResponseGetNodeInfo extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasInfo(): boolean;
  clearInfo(): void;
  getInfo(): type_pb.TNodeInfo | undefined;
  setInfo(value?: type_pb.TNodeInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetNodeInfo;
  static toObject(includeInstance: boolean, msg: ResponseGetNodeInfo): TResponseGetNodeInfo;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetNodeInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetNodeInfo;
  static deserializeBinaryFromReader(message: ResponseGetNodeInfo, reader: jspb.BinaryReader): ResponseGetNodeInfo;
}

export type TResponseGetNodeInfo = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  info?: type_pb.TNodeInfo,
}

export class ResponseGetUnconfirmedTxs extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  hasUnconfirmedTxs(): boolean;
  clearUnconfirmedTxs(): void;
  getUnconfirmedTxs(): type_pb.TUnconfirmedTxs | undefined;
  setUnconfirmedTxs(value?: type_pb.TUnconfirmedTxs): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetUnconfirmedTxs;
  static toObject(includeInstance: boolean, msg: ResponseGetUnconfirmedTxs): TResponseGetUnconfirmedTxs;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetUnconfirmedTxs, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetUnconfirmedTxs;
  static deserializeBinaryFromReader(message: ResponseGetUnconfirmedTxs, reader: jspb.BinaryReader): ResponseGetUnconfirmedTxs;
}

export type TResponseGetUnconfirmedTxs = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  unconfirmedTxs?: type_pb.TUnconfirmedTxs,
}

export class ResponseGetNetInfo extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasNetInfo(): boolean;
  clearNetInfo(): void;
  getNetInfo(): type_pb.TNetInfo | undefined;
  setNetInfo(value?: type_pb.TNetInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetNetInfo;
  static toObject(includeInstance: boolean, msg: ResponseGetNetInfo): TResponseGetNetInfo;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetNetInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetNetInfo;
  static deserializeBinaryFromReader(message: ResponseGetNetInfo, reader: jspb.BinaryReader): ResponseGetNetInfo;
}

export type TResponseGetNetInfo = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  netInfo?: type_pb.TNetInfo,
}

export class ResponseGetValidatorsInfo extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasValidatorsInfo(): boolean;
  clearValidatorsInfo(): void;
  getValidatorsInfo(): type_pb.TValidatorsInfo | undefined;
  setValidatorsInfo(value?: type_pb.TValidatorsInfo): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetValidatorsInfo;
  static toObject(includeInstance: boolean, msg: ResponseGetValidatorsInfo): TResponseGetValidatorsInfo;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetValidatorsInfo, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetValidatorsInfo;
  static deserializeBinaryFromReader(message: ResponseGetValidatorsInfo, reader: jspb.BinaryReader): ResponseGetValidatorsInfo;
}

export type TResponseGetValidatorsInfo = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  validatorsInfo?: type_pb.TValidatorsInfo,
}

export class RequestGetConfig extends jspb.Message {
  getParsed(): boolean;
  setParsed(value: boolean): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetConfig;
  static toObject(includeInstance: boolean, msg: RequestGetConfig): TRequestGetConfig;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetConfig;
  static deserializeBinaryFromReader(message: RequestGetConfig, reader: jspb.BinaryReader): RequestGetConfig;
}

export type TRequestGetConfig = {
  parsed: boolean,
}

export class ResponseGetConfig extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  getConfig(): string;
  setConfig(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetConfig;
  static toObject(includeInstance: boolean, msg: ResponseGetConfig): TResponseGetConfig;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetConfig, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetConfig;
  static deserializeBinaryFromReader(message: ResponseGetConfig, reader: jspb.BinaryReader): ResponseGetConfig;
}

export type TResponseGetConfig = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  config: string,
}

export class RequestListTransactions extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  hasTimeFilter(): boolean;
  clearTimeFilter(): void;
  getTimeFilter(): trace_type_pb.TTimeFilter | undefined;
  setTimeFilter(value?: trace_type_pb.TTimeFilter): void;

  hasAddressFilter(): boolean;
  clearAddressFilter(): void;
  getAddressFilter(): trace_type_pb.TAddressFilter | undefined;
  setAddressFilter(value?: trace_type_pb.TAddressFilter): void;

  hasTypeFilter(): boolean;
  clearTypeFilter(): void;
  getTypeFilter(): trace_type_pb.TTypeFilter | undefined;
  setTypeFilter(value?: trace_type_pb.TTypeFilter): void;

  hasValidityFilter(): boolean;
  clearValidityFilter(): void;
  getValidityFilter(): trace_type_pb.TValidityFilter | undefined;
  setValidityFilter(value?: trace_type_pb.TValidityFilter): void;

  hasFactoryFilter(): boolean;
  clearFactoryFilter(): void;
  getFactoryFilter(): trace_type_pb.TFactoryFilter | undefined;
  setFactoryFilter(value?: trace_type_pb.TFactoryFilter): void;

  hasTokenFilter(): boolean;
  clearTokenFilter(): void;
  getTokenFilter(): trace_type_pb.TTokenFilter | undefined;
  setTokenFilter(value?: trace_type_pb.TTokenFilter): void;

  hasAssetFilter(): boolean;
  clearAssetFilter(): void;
  getAssetFilter(): trace_type_pb.TAssetFilter | undefined;
  setAssetFilter(value?: trace_type_pb.TAssetFilter): void;

  hasAccountFilter(): boolean;
  clearAccountFilter(): void;
  getAccountFilter(): trace_type_pb.TAccountFilter | undefined;
  setAccountFilter(value?: trace_type_pb.TAccountFilter): void;

  hasTxFilter(): boolean;
  clearTxFilter(): void;
  getTxFilter(): trace_type_pb.TTxFilter | undefined;
  setTxFilter(value?: trace_type_pb.TTxFilter): void;

  hasRollupFilter(): boolean;
  clearRollupFilter(): void;
  getRollupFilter(): trace_type_pb.TRollupFilter | undefined;
  setRollupFilter(value?: trace_type_pb.TRollupFilter): void;

  hasStakeFilter(): boolean;
  clearStakeFilter(): void;
  getStakeFilter(): trace_type_pb.TStakeFilter | undefined;
  setStakeFilter(value?: trace_type_pb.TStakeFilter): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListTransactions;
  static toObject(includeInstance: boolean, msg: RequestListTransactions): TRequestListTransactions;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListTransactions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListTransactions;
  static deserializeBinaryFromReader(message: RequestListTransactions, reader: jspb.BinaryReader): RequestListTransactions;
}

export type TRequestListTransactions = {
  paging?: trace_type_pb.TPage,
  timeFilter?: trace_type_pb.TTimeFilter,
  addressFilter?: trace_type_pb.TAddressFilter,
  typeFilter?: trace_type_pb.TTypeFilter,
  validityFilter?: trace_type_pb.TValidityFilter,
  factoryFilter?: trace_type_pb.TFactoryFilter,
  tokenFilter?: trace_type_pb.TTokenFilter,
  assetFilter?: trace_type_pb.TAssetFilter,
  accountFilter?: trace_type_pb.TAccountFilter,
  txFilter?: trace_type_pb.TTxFilter,
  rollupFilter?: trace_type_pb.TRollupFilter,
  stakeFilter?: trace_type_pb.TStakeFilter,
}

export class ResponseListTransactions extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearTransactionsList(): void;
  getTransactionsList(): Array<trace_type_pb.TIndexedTransaction>;
  setTransactionsList(value: Array<trace_type_pb.TIndexedTransaction>): void;
  addTransactions(value?: trace_type_pb.IndexedTransaction, index?: number): trace_type_pb.IndexedTransaction;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListTransactions;
  static toObject(includeInstance: boolean, msg: ResponseListTransactions): TResponseListTransactions;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListTransactions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListTransactions;
  static deserializeBinaryFromReader(message: ResponseListTransactions, reader: jspb.BinaryReader): ResponseListTransactions;
}

export type TResponseListTransactions = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  transactions: Array<trace_type_pb.TIndexedTransaction>,
}

export class RequestListAssets extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getOwnerAddress(): string;
  setOwnerAddress(value: string): void;

  getFactoryAddress(): string;
  setFactoryAddress(value: string): void;

  hasTimeFilter(): boolean;
  clearTimeFilter(): void;
  getTimeFilter(): trace_type_pb.TTimeFilter | undefined;
  setTimeFilter(value?: trace_type_pb.TTimeFilter): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListAssets;
  static toObject(includeInstance: boolean, msg: RequestListAssets): TRequestListAssets;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListAssets, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListAssets;
  static deserializeBinaryFromReader(message: RequestListAssets, reader: jspb.BinaryReader): RequestListAssets;
}

export type TRequestListAssets = {
  paging?: trace_type_pb.TPage,
  ownerAddress: string,
  factoryAddress: string,
  timeFilter?: trace_type_pb.TTimeFilter,
}

export class ResponseListAssets extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearAssetsList(): void;
  getAssetsList(): Array<trace_type_pb.TIndexedAssetState>;
  setAssetsList(value: Array<trace_type_pb.TIndexedAssetState>): void;
  addAssets(value?: trace_type_pb.IndexedAssetState, index?: number): trace_type_pb.IndexedAssetState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListAssets;
  static toObject(includeInstance: boolean, msg: ResponseListAssets): TResponseListAssets;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListAssets, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListAssets;
  static deserializeBinaryFromReader(message: ResponseListAssets, reader: jspb.BinaryReader): ResponseListAssets;
}

export type TResponseListAssets = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  assets: Array<trace_type_pb.TIndexedAssetState>,
}

export class RequestListTopAccounts extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getTokenaddress(): string;
  setTokenaddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListTopAccounts;
  static toObject(includeInstance: boolean, msg: RequestListTopAccounts): TRequestListTopAccounts;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListTopAccounts, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListTopAccounts;
  static deserializeBinaryFromReader(message: RequestListTopAccounts, reader: jspb.BinaryReader): RequestListTopAccounts;
}

export type TRequestListTopAccounts = {
  paging?: trace_type_pb.TPage,
  tokenaddress: string,
}

export class ResponseListTopAccounts extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearAccountsList(): void;
  getAccountsList(): Array<trace_type_pb.TIndexedAccountState>;
  setAccountsList(value: Array<trace_type_pb.TIndexedAccountState>): void;
  addAccounts(value?: trace_type_pb.IndexedAccountState, index?: number): trace_type_pb.IndexedAccountState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListTopAccounts;
  static toObject(includeInstance: boolean, msg: ResponseListTopAccounts): TResponseListTopAccounts;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListTopAccounts, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListTopAccounts;
  static deserializeBinaryFromReader(message: ResponseListTopAccounts, reader: jspb.BinaryReader): ResponseListTopAccounts;
}

export type TResponseListTopAccounts = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  accounts: Array<trace_type_pb.TIndexedAccountState>,
}

export class RequestListAssetTransactions extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getAddress(): string;
  setAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListAssetTransactions;
  static toObject(includeInstance: boolean, msg: RequestListAssetTransactions): TRequestListAssetTransactions;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListAssetTransactions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListAssetTransactions;
  static deserializeBinaryFromReader(message: RequestListAssetTransactions, reader: jspb.BinaryReader): RequestListAssetTransactions;
}

export type TRequestListAssetTransactions = {
  paging?: trace_type_pb.TPage,
  address: string,
}

export class ResponseListAssetTransactions extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearTransactionsList(): void;
  getTransactionsList(): Array<trace_type_pb.TIndexedTransaction>;
  setTransactionsList(value: Array<trace_type_pb.TIndexedTransaction>): void;
  addTransactions(value?: trace_type_pb.IndexedTransaction, index?: number): trace_type_pb.IndexedTransaction;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListAssetTransactions;
  static toObject(includeInstance: boolean, msg: ResponseListAssetTransactions): TResponseListAssetTransactions;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListAssetTransactions, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListAssetTransactions;
  static deserializeBinaryFromReader(message: ResponseListAssetTransactions, reader: jspb.BinaryReader): ResponseListAssetTransactions;
}

export type TResponseListAssetTransactions = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  transactions: Array<trace_type_pb.TIndexedTransaction>,
}

export class RequestListBlocks extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getProposer(): string;
  setProposer(value: string): void;

  hasTimeFilter(): boolean;
  clearTimeFilter(): void;
  getTimeFilter(): trace_type_pb.TTimeFilter | undefined;
  setTimeFilter(value?: trace_type_pb.TTimeFilter): void;

  hasHeightFilter(): boolean;
  clearHeightFilter(): void;
  getHeightFilter(): trace_type_pb.TRangeFilter | undefined;
  setHeightFilter(value?: trace_type_pb.TRangeFilter): void;

  hasNumTxsFilter(): boolean;
  clearNumTxsFilter(): void;
  getNumTxsFilter(): trace_type_pb.TRangeFilter | undefined;
  setNumTxsFilter(value?: trace_type_pb.TRangeFilter): void;

  hasNumInvalidTxsFilter(): boolean;
  clearNumInvalidTxsFilter(): void;
  getNumInvalidTxsFilter(): trace_type_pb.TRangeFilter | undefined;
  setNumInvalidTxsFilter(value?: trace_type_pb.TRangeFilter): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListBlocks;
  static toObject(includeInstance: boolean, msg: RequestListBlocks): TRequestListBlocks;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListBlocks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListBlocks;
  static deserializeBinaryFromReader(message: RequestListBlocks, reader: jspb.BinaryReader): RequestListBlocks;
}

export type TRequestListBlocks = {
  paging?: trace_type_pb.TPage,
  proposer: string,
  timeFilter?: trace_type_pb.TTimeFilter,
  heightFilter?: trace_type_pb.TRangeFilter,
  numTxsFilter?: trace_type_pb.TRangeFilter,
  numInvalidTxsFilter?: trace_type_pb.TRangeFilter,
}

export class ResponseListBlocks extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearBlocksList(): void;
  getBlocksList(): Array<trace_type_pb.TIndexedBlock>;
  setBlocksList(value: Array<trace_type_pb.TIndexedBlock>): void;
  addBlocks(value?: trace_type_pb.IndexedBlock, index?: number): trace_type_pb.IndexedBlock;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListBlocks;
  static toObject(includeInstance: boolean, msg: ResponseListBlocks): TResponseListBlocks;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListBlocks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListBlocks;
  static deserializeBinaryFromReader(message: ResponseListBlocks, reader: jspb.BinaryReader): ResponseListBlocks;
}

export type TResponseListBlocks = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  blocks: Array<trace_type_pb.TIndexedBlock>,
}

export class ResponseGetTokenState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TTokenState | undefined;
  setState(value?: state_pb.TTokenState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetTokenState;
  static toObject(includeInstance: boolean, msg: ResponseGetTokenState): TResponseGetTokenState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetTokenState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetTokenState;
  static deserializeBinaryFromReader(message: ResponseGetTokenState, reader: jspb.BinaryReader): ResponseGetTokenState;
}

export type TResponseGetTokenState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TTokenState,
}

export class RequestListTokens extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getIssuerAddress(): string;
  setIssuerAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListTokens;
  static toObject(includeInstance: boolean, msg: RequestListTokens): TRequestListTokens;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListTokens, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListTokens;
  static deserializeBinaryFromReader(message: RequestListTokens, reader: jspb.BinaryReader): RequestListTokens;
}

export type TRequestListTokens = {
  paging?: trace_type_pb.TPage,
  issuerAddress: string,
}

export class ResponseListTokens extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearTokensList(): void;
  getTokensList(): Array<trace_type_pb.TIndexedTokenState>;
  setTokensList(value: Array<trace_type_pb.TIndexedTokenState>): void;
  addTokens(value?: trace_type_pb.IndexedTokenState, index?: number): trace_type_pb.IndexedTokenState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListTokens;
  static toObject(includeInstance: boolean, msg: ResponseListTokens): TResponseListTokens;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListTokens, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListTokens;
  static deserializeBinaryFromReader(message: ResponseListTokens, reader: jspb.BinaryReader): ResponseListTokens;
}

export type TResponseListTokens = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  tokens: Array<trace_type_pb.TIndexedTokenState>,
}

export class ResponseGetFactoryState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TAssetFactoryState | undefined;
  setState(value?: state_pb.TAssetFactoryState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetFactoryState;
  static toObject(includeInstance: boolean, msg: ResponseGetFactoryState): TResponseGetFactoryState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetFactoryState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetFactoryState;
  static deserializeBinaryFromReader(message: ResponseGetFactoryState, reader: jspb.BinaryReader): ResponseGetFactoryState;
}

export type TResponseGetFactoryState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TAssetFactoryState,
}

export class RequestListFactories extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getOwnerAddress(): string;
  setOwnerAddress(value: string): void;

  clearAddressListList(): void;
  getAddressListList(): Array<string>;
  setAddressListList(value: Array<string>): void;
  addAddressList(value: string, index?: number): string;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListFactories;
  static toObject(includeInstance: boolean, msg: RequestListFactories): TRequestListFactories;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListFactories, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListFactories;
  static deserializeBinaryFromReader(message: RequestListFactories, reader: jspb.BinaryReader): RequestListFactories;
}

export type TRequestListFactories = {
  paging?: trace_type_pb.TPage,
  ownerAddress: string,
  addressList: Array<string>,
}

export class ResponseListFactories extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearFactoriesList(): void;
  getFactoriesList(): Array<trace_type_pb.TIndexedFactoryState>;
  setFactoriesList(value: Array<trace_type_pb.TIndexedFactoryState>): void;
  addFactories(value?: trace_type_pb.IndexedFactoryState, index?: number): trace_type_pb.IndexedFactoryState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListFactories;
  static toObject(includeInstance: boolean, msg: ResponseListFactories): TResponseListFactories;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListFactories, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListFactories;
  static deserializeBinaryFromReader(message: ResponseListFactories, reader: jspb.BinaryReader): ResponseListFactories;
}

export type TResponseListFactories = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  factories: Array<trace_type_pb.TIndexedFactoryState>,
}

export class RequestGetAccountTokens extends jspb.Message {
  getAddress(): string;
  setAddress(value: string): void;

  getToken(): string;
  setToken(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetAccountTokens;
  static toObject(includeInstance: boolean, msg: RequestGetAccountTokens): TRequestGetAccountTokens;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetAccountTokens, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetAccountTokens;
  static deserializeBinaryFromReader(message: RequestGetAccountTokens, reader: jspb.BinaryReader): RequestGetAccountTokens;
}

export type TRequestGetAccountTokens = {
  address: string,
  token: string,
}

export class ResponseGetAccountTokens extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  clearTokensList(): void;
  getTokensList(): Array<trace_type_pb.TAccountToken>;
  setTokensList(value: Array<trace_type_pb.TAccountToken>): void;
  addTokens(value?: trace_type_pb.AccountToken, index?: number): trace_type_pb.AccountToken;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetAccountTokens;
  static toObject(includeInstance: boolean, msg: ResponseGetAccountTokens): TResponseGetAccountTokens;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetAccountTokens, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetAccountTokens;
  static deserializeBinaryFromReader(message: ResponseGetAccountTokens, reader: jspb.BinaryReader): ResponseGetAccountTokens;
}

export type TResponseGetAccountTokens = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  tokens: Array<trace_type_pb.TAccountToken>,
}

export class ResponseGetStakeState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TStakeState | undefined;
  setState(value?: state_pb.TStakeState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetStakeState;
  static toObject(includeInstance: boolean, msg: ResponseGetStakeState): TResponseGetStakeState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetStakeState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetStakeState;
  static deserializeBinaryFromReader(message: ResponseGetStakeState, reader: jspb.BinaryReader): ResponseGetStakeState;
}

export type TResponseGetStakeState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TStakeState,
}

export class RequestListStakes extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  hasAddressFilter(): boolean;
  clearAddressFilter(): void;
  getAddressFilter(): trace_type_pb.TAddressFilter | undefined;
  setAddressFilter(value?: trace_type_pb.TAddressFilter): void;

  hasTimeFilter(): boolean;
  clearTimeFilter(): void;
  getTimeFilter(): trace_type_pb.TTimeFilter | undefined;
  setTimeFilter(value?: trace_type_pb.TTimeFilter): void;

  hasAssetFilter(): boolean;
  clearAssetFilter(): void;
  getAssetFilter(): trace_type_pb.TAssetFilter | undefined;
  setAssetFilter(value?: trace_type_pb.TAssetFilter): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListStakes;
  static toObject(includeInstance: boolean, msg: RequestListStakes): TRequestListStakes;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListStakes, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListStakes;
  static deserializeBinaryFromReader(message: RequestListStakes, reader: jspb.BinaryReader): RequestListStakes;
}

export type TRequestListStakes = {
  paging?: trace_type_pb.TPage,
  addressFilter?: trace_type_pb.TAddressFilter,
  timeFilter?: trace_type_pb.TTimeFilter,
  assetFilter?: trace_type_pb.TAssetFilter,
}

export class ResponseListStakes extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearStakesList(): void;
  getStakesList(): Array<trace_type_pb.TIndexedStakeState>;
  setStakesList(value: Array<trace_type_pb.TIndexedStakeState>): void;
  addStakes(value?: trace_type_pb.IndexedStakeState, index?: number): trace_type_pb.IndexedStakeState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListStakes;
  static toObject(includeInstance: boolean, msg: ResponseListStakes): TResponseListStakes;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListStakes, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListStakes;
  static deserializeBinaryFromReader(message: ResponseListStakes, reader: jspb.BinaryReader): ResponseListStakes;
}

export type TResponseListStakes = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  stakes: Array<trace_type_pb.TIndexedStakeState>,
}

export class ResponseGetRollupState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TRollupState | undefined;
  setState(value?: state_pb.TRollupState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetRollupState;
  static toObject(includeInstance: boolean, msg: ResponseGetRollupState): TResponseGetRollupState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetRollupState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetRollupState;
  static deserializeBinaryFromReader(message: ResponseGetRollupState, reader: jspb.BinaryReader): ResponseGetRollupState;
}

export type TResponseGetRollupState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TRollupState,
}

export class RequestListRollups extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getTokenAddress(): string;
  setTokenAddress(value: string): void;

  getForeignTokenAddress(): string;
  setForeignTokenAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListRollups;
  static toObject(includeInstance: boolean, msg: RequestListRollups): TRequestListRollups;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListRollups, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListRollups;
  static deserializeBinaryFromReader(message: RequestListRollups, reader: jspb.BinaryReader): RequestListRollups;
}

export type TRequestListRollups = {
  paging?: trace_type_pb.TPage,
  tokenAddress: string,
  foreignTokenAddress: string,
}

export class ResponseListRollups extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearRollupsList(): void;
  getRollupsList(): Array<trace_type_pb.TIndexedRollupState>;
  setRollupsList(value: Array<trace_type_pb.TIndexedRollupState>): void;
  addRollups(value?: trace_type_pb.IndexedRollupState, index?: number): trace_type_pb.IndexedRollupState;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListRollups;
  static toObject(includeInstance: boolean, msg: ResponseListRollups): TResponseListRollups;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListRollups, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListRollups;
  static deserializeBinaryFromReader(message: ResponseListRollups, reader: jspb.BinaryReader): ResponseListRollups;
}

export type TResponseListRollups = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  rollups: Array<trace_type_pb.TIndexedRollupState>,
}

export class RequestGetRollupBlock extends jspb.Message {
  getHash(): string;
  setHash(value: string): void;

  getHeight(): number;
  setHeight(value: number): void;

  getRollupAddress(): string;
  setRollupAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetRollupBlock;
  static toObject(includeInstance: boolean, msg: RequestGetRollupBlock): TRequestGetRollupBlock;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetRollupBlock, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetRollupBlock;
  static deserializeBinaryFromReader(message: RequestGetRollupBlock, reader: jspb.BinaryReader): RequestGetRollupBlock;
}

export type TRequestGetRollupBlock = {
  hash: string,
  height: number,
  rollupAddress: string,
}

export class ResponseGetRollupBlock extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasBlock(): boolean;
  clearBlock(): void;
  getBlock(): state_pb.TRollupBlock | undefined;
  setBlock(value?: state_pb.TRollupBlock): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetRollupBlock;
  static toObject(includeInstance: boolean, msg: ResponseGetRollupBlock): TResponseGetRollupBlock;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetRollupBlock, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetRollupBlock;
  static deserializeBinaryFromReader(message: ResponseGetRollupBlock, reader: jspb.BinaryReader): ResponseGetRollupBlock;
}

export type TResponseGetRollupBlock = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  block?: state_pb.TRollupBlock,
}

export class RequestListRollupBlocks extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getRollupAddress(): string;
  setRollupAddress(value: string): void;

  getTokenAddress(): string;
  setTokenAddress(value: string): void;

  getProposer(): string;
  setProposer(value: string): void;

  hasValidatorFilter(): boolean;
  clearValidatorFilter(): void;
  getValidatorFilter(): trace_type_pb.TValidatorFilter | undefined;
  setValidatorFilter(value?: trace_type_pb.TValidatorFilter): void;

  hasTxFilter(): boolean;
  clearTxFilter(): void;
  getTxFilter(): trace_type_pb.TTxFilter | undefined;
  setTxFilter(value?: trace_type_pb.TTxFilter): void;

  hasTimeFilter(): boolean;
  clearTimeFilter(): void;
  getTimeFilter(): trace_type_pb.TTimeFilter | undefined;
  setTimeFilter(value?: trace_type_pb.TTimeFilter): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListRollupBlocks;
  static toObject(includeInstance: boolean, msg: RequestListRollupBlocks): TRequestListRollupBlocks;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListRollupBlocks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListRollupBlocks;
  static deserializeBinaryFromReader(message: RequestListRollupBlocks, reader: jspb.BinaryReader): RequestListRollupBlocks;
}

export type TRequestListRollupBlocks = {
  paging?: trace_type_pb.TPage,
  rollupAddress: string,
  tokenAddress: string,
  proposer: string,
  validatorFilter?: trace_type_pb.TValidatorFilter,
  txFilter?: trace_type_pb.TTxFilter,
  timeFilter?: trace_type_pb.TTimeFilter,
}

export class ResponseListRollupBlocks extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearBlocksList(): void;
  getBlocksList(): Array<trace_type_pb.TIndexedRollupBlock>;
  setBlocksList(value: Array<trace_type_pb.TIndexedRollupBlock>): void;
  addBlocks(value?: trace_type_pb.IndexedRollupBlock, index?: number): trace_type_pb.IndexedRollupBlock;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListRollupBlocks;
  static toObject(includeInstance: boolean, msg: ResponseListRollupBlocks): TResponseListRollupBlocks;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListRollupBlocks, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListRollupBlocks;
  static deserializeBinaryFromReader(message: ResponseListRollupBlocks, reader: jspb.BinaryReader): ResponseListRollupBlocks;
}

export type TResponseListRollupBlocks = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  blocks: Array<trace_type_pb.TIndexedRollupBlock>,
}

export class RequestListRollupValidators extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getRollupAddress(): string;
  setRollupAddress(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestListRollupValidators;
  static toObject(includeInstance: boolean, msg: RequestListRollupValidators): TRequestListRollupValidators;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestListRollupValidators, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestListRollupValidators;
  static deserializeBinaryFromReader(message: RequestListRollupValidators, reader: jspb.BinaryReader): RequestListRollupValidators;
}

export type TRequestListRollupValidators = {
  paging?: trace_type_pb.TPage,
  rollupAddress: string,
}

export class ResponseListRollupValidators extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearValidatorsList(): void;
  getValidatorsList(): Array<trace_type_pb.TIndexedRollupValidator>;
  setValidatorsList(value: Array<trace_type_pb.TIndexedRollupValidator>): void;
  addValidators(value?: trace_type_pb.IndexedRollupValidator, index?: number): trace_type_pb.IndexedRollupValidator;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseListRollupValidators;
  static toObject(includeInstance: boolean, msg: ResponseListRollupValidators): TResponseListRollupValidators;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseListRollupValidators, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseListRollupValidators;
  static deserializeBinaryFromReader(message: ResponseListRollupValidators, reader: jspb.BinaryReader): ResponseListRollupValidators;
}

export type TResponseListRollupValidators = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  validators: Array<trace_type_pb.TIndexedRollupValidator>,
}

export class RequestSearch extends jspb.Message {
  hasPaging(): boolean;
  clearPaging(): void;
  getPaging(): trace_type_pb.TPage | undefined;
  setPaging(value?: trace_type_pb.TPage): void;

  getKeyword(): string;
  setKeyword(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestSearch;
  static toObject(includeInstance: boolean, msg: RequestSearch): TRequestSearch;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestSearch, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestSearch;
  static deserializeBinaryFromReader(message: RequestSearch, reader: jspb.BinaryReader): RequestSearch;
}

export type TRequestSearch = {
  paging?: trace_type_pb.TPage,
  keyword: string,
}

export class ResponseSearch extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasPage(): boolean;
  clearPage(): void;
  getPage(): trace_type_pb.TPageInfo | undefined;
  setPage(value?: trace_type_pb.TPageInfo): void;

  clearResultsList(): void;
  getResultsList(): Array<trace_type_pb.TSearchResult>;
  setResultsList(value: Array<trace_type_pb.TSearchResult>): void;
  addResults(value?: trace_type_pb.SearchResult, index?: number): trace_type_pb.SearchResult;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseSearch;
  static toObject(includeInstance: boolean, msg: ResponseSearch): TResponseSearch;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseSearch, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseSearch;
  static deserializeBinaryFromReader(message: ResponseSearch, reader: jspb.BinaryReader): ResponseSearch;
}

export type TResponseSearch = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  page?: trace_type_pb.TPageInfo,
  results: Array<trace_type_pb.TSearchResult>,
}

export class RequestGetEvidenceState extends jspb.Message {
  getHash(): string;
  setHash(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestGetEvidenceState;
  static toObject(includeInstance: boolean, msg: RequestGetEvidenceState): TRequestGetEvidenceState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestGetEvidenceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestGetEvidenceState;
  static deserializeBinaryFromReader(message: RequestGetEvidenceState, reader: jspb.BinaryReader): RequestGetEvidenceState;
}

export type TRequestGetEvidenceState = {
  hash: string,
}

export class ResponseGetEvidenceState extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasState(): boolean;
  clearState(): void;
  getState(): state_pb.TEvidenceState | undefined;
  setState(value?: state_pb.TEvidenceState): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetEvidenceState;
  static toObject(includeInstance: boolean, msg: ResponseGetEvidenceState): TResponseGetEvidenceState;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetEvidenceState, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetEvidenceState;
  static deserializeBinaryFromReader(message: ResponseGetEvidenceState, reader: jspb.BinaryReader): ResponseGetEvidenceState;
}

export type TResponseGetEvidenceState = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  state?: state_pb.TEvidenceState,
}

export class ResponseGetForgeStats extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasForgeStats(): boolean;
  clearForgeStats(): void;
  getForgeStats(): type_pb.TForgeStats | undefined;
  setForgeStats(value?: type_pb.TForgeStats): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseGetForgeStats;
  static toObject(includeInstance: boolean, msg: ResponseGetForgeStats): TResponseGetForgeStats;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseGetForgeStats, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseGetForgeStats;
  static deserializeBinaryFromReader(message: ResponseGetForgeStats, reader: jspb.BinaryReader): ResponseGetForgeStats;
}

export type TResponseGetForgeStats = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  forgeStats?: type_pb.TForgeStats,
}

export class RequestEstimateGas extends jspb.Message {
  getTypeUrl(): string;
  setTypeUrl(value: string): void;

  getTx(): string;
  setTx(value: string): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TRequestEstimateGas;
  static toObject(includeInstance: boolean, msg: RequestEstimateGas): TRequestEstimateGas;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: RequestEstimateGas, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): RequestEstimateGas;
  static deserializeBinaryFromReader(message: RequestEstimateGas, reader: jspb.BinaryReader): RequestEstimateGas;
}

export type TRequestEstimateGas = {
  typeUrl: string,
  tx: string,
}

export class ResponseEstimateGas extends jspb.Message {
  getCode(): enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap];
  setCode(value: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap]): void;

  hasEstimate(): boolean;
  clearEstimate(): void;
  getEstimate(): type_pb.TGasEstimate | undefined;
  setEstimate(value?: type_pb.TGasEstimate): void;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): TResponseEstimateGas;
  static toObject(includeInstance: boolean, msg: ResponseEstimateGas): TResponseEstimateGas;
  static extensions: {[key: number]: jspb.ExtensionFieldInfo<jspb.Message>};
  static extensionsBinary: {[key: number]: jspb.ExtensionFieldBinaryInfo<jspb.Message>};
  static serializeBinaryToWriter(message: ResponseEstimateGas, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): ResponseEstimateGas;
  static deserializeBinaryFromReader(message: ResponseEstimateGas, reader: jspb.BinaryReader): ResponseEstimateGas;
}

export type TResponseEstimateGas = {
  code: enum_pb.StatusCodeMap[keyof enum_pb.StatusCodeMap],
  estimate?: type_pb.TGasEstimate,
}

