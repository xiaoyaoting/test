'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var vite = require('vite');
var semver = require('semver');
var Mcrypto = require('@ocap/mcrypto');
var util = require('@ocap/util');
var did = require('@arcblock/did');
var fs = require('fs');
var path = require('path');
var YAML = require('yaml');
var getPort = require('get-port');
var mri = require('mri');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var semver__default = /*#__PURE__*/_interopDefaultLegacy(semver);
var Mcrypto__default = /*#__PURE__*/_interopDefaultLegacy(Mcrypto);
var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var YAML__default = /*#__PURE__*/_interopDefaultLegacy(YAML);
var getPort__default = /*#__PURE__*/_interopDefaultLegacy(getPort);
var mri__default = /*#__PURE__*/_interopDefaultLegacy(mri);

const { types } = Mcrypto__default["default"];

function toBlockletDid(name) {
  const pk = util.toHex(Buffer.from(typeof name === 'string' ? name.trim() : name));
  return did.fromPublicKey(pk, { role: types.RoleType.ROLE_ANY });
}

const isInBlocklet = !!process.env.BLOCKLET_PORT;

function createHmrPlugin({ version = vite.version } = {}) {
  return {
    name: 'blocklet:hmr',
    apply: 'serve',
    async transform(code, id) {
      if (isInBlocklet && id.endsWith('/vite/dist/client/client.mjs')) {
        const pureVersion = semver__default["default"].major(version);
        let replacedCode = code;
        if (pureVersion === 2) {
          replacedCode = replacedCode.replace("const base = __BASE__ || '/';\n", '');
          replacedCode = replacedCode.replace(
            'const socketHost = `${__HMR_HOSTNAME__ || location.hostname}:${__HMR_PORT__}`;',
            "const base = __BASE__ || '/';\nlet tmpPort = __HMR_PORT__;\nif (window.blocklet) {\ntmpPort = new URL(window.location.href).port + base;\n}\nconst socketHost = `${__HMR_HOSTNAME__ || location.hostname}${tmpPort ? `:${tmpPort}` : ''}`;"
          );
          return replacedCode;
        }
      }
    },
  };
}

function createConfigPlugin() {
  return {
    name: 'blocklet:config',
    configureServer(server) {
      if (isInBlocklet) {
        server.middlewares.use((req, res, next) => {
          const prefix = req.headers['x-path-prefix'] || '/';
          // blocklet server 会把设置的 base 从请求 url 中移除，所以需要再加回 base
          if (!req.url.startsWith(prefix)) {
            req.url = path__default["default"].join(prefix || '/', req.url);
          }
          return next();
        });
      }
    },
    config(config, { command }) {
      if (command === 'serve') {
        const targetConfig = {};
        if (!config.base) {
          let base = process.env.BLOCKLET_DEV_MOUNT_POINT || '';

          if (base) {
            if (!base.startsWith('/')) {
              base = `/${base}`;
            }
            if (!base.endsWith('/')) {
              base = `${base}/`;
            }
          }
          targetConfig.base = base;
        }
        if (!(config.server && config.server.port)) {
          const port = process.env.BLOCKLET_PORT || 3000;
          targetConfig.server = {
            port,
          };
        }
        return targetConfig;
      }

      if (command === 'build') {
        if (!config.base) {
          try {
            const blockletYamlPath = './blocklet.yml';
            const blockletYaml = YAML__default["default"].parse(fs__default["default"].readFileSync(blockletYamlPath, 'utf8'));
            const { name } = blockletYaml;
            if (name) {
              const did = toBlockletDid(name);
              const base = `/.blocklet/proxy/${did}/`;

              return {
                base,
              };
            }
          } catch (err) {
            console.error(err);
            return {};
          }
        }
      }

      return {};
    },
  };
}

function createMetaPlugin() {
  return {
    name: 'blocklet:meta',
    transformIndexHtml(html) {
      const tags = [];
      // 如果 index.html 中没有设置 title，则自动注入 blocklet.yml 中的 title
      if (!/<title>(.*?)<\/title>/.test(html)) {
        const blockletYamlPath = './blocklet.yml';
        const blockletYaml = YAML__default["default"].parse(fs__default["default"].readFileSync(blockletYamlPath, 'utf8'));
        const { title } = blockletYaml;

        tags.push({
          tag: 'title',
          children: title,
        });
      }
      // 默认注入 __blocklet__.js 文件
      tags.push({
        // injectTo: 'head',
        tag: 'script',
        attrs: {
          src: '__blocklet__.js',
        },
      });

      return {
        html,
        tags,
      };
    },
  };
}

const argv = process.argv.slice(2);
const isProduction = process.env.NODE_ENV === 'production' || process.env.ABT_NODE_SERVICE_ENV === 'production';

async function setupClient(app, options = {}) {
  if (!isProduction) {
    const params = mri__default["default"](argv, {
      alias: {
        config: 'c',
      },
    });
    const { host = '127.0.0.1', protocol = 'ws', port: inputPort, configFile = '' } = options;
    const port = await getPort__default["default"]({ port: inputPort });
    // 以中间件模式创建 Vite 服务器
    const vite$1 = await vite.createServer({
      configFile: params.config || configFile || undefined,
      server: {
        middlewareMode: true,
        hmr: {
          host,
          port,
          protocol,
        },
      },
    });
    // 将 vite 的 connect 实例作中间件使用
    app.use(vite$1.middlewares);
  }
}

function createBlockletPlugin(options = {}) {
  const { disableConfig = false, disableMeta = false, disableHmr = false } = options;
  const plugins = [];
  if (!disableMeta) {
    plugins.push(createMetaPlugin());
  }
  if (!disableConfig) {
    plugins.push(createConfigPlugin());
  }
  if (!disableHmr) {
    plugins.push(createHmrPlugin(options));
  }

  return plugins;
}

exports.createBlockletConfig = createConfigPlugin;
exports.createBlockletHmr = createHmrPlugin;
exports.createBlockletMeta = createMetaPlugin;
exports.createBlockletPlugin = createBlockletPlugin;
exports.setupClient = setupClient;
